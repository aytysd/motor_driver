
motor_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000496c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004af4  08004af4  00014af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b2c  08004b2c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004b2c  08004b2c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b2c  08004b2c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b2c  08004b2c  00014b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b30  08004b30  00014b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004b34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  20000070  08004ba4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  08004ba4  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012452  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002866  00000000  00000000  000324f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  00034d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d38  00000000  00000000  00035b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000c36a  00000000  00000000  000368b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000050f1  00000000  00000000  00042c1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00047d0b  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003ea4  00000000  00000000  00047d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004adc 	.word	0x08004adc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08004adc 	.word	0x08004adc

080001c8 <_ZN3PWMC1Ev>:
    void ccw(uint8_t pwm);
    void brake(void);
    void free(void);
public:
    void control_PWM();
	PWM(){
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
		this -> old_pwm = 0;
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	2200      	movs	r2, #0
 80001d4:	701a      	strb	r2, [r3, #0]
	}
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4618      	mov	r0, r3
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e2:	4770      	bx	lr

080001e4 <HAL_UART_RxCpltCallback>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM6_Init(void);
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef*UartHandle){
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, (uint8_t*)Rxdata, sizeof(Rxdata));
 80001ec:	2202      	movs	r2, #2
 80001ee:	4904      	ldr	r1, [pc, #16]	; (8000200 <HAL_UART_RxCpltCallback+0x1c>)
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <HAL_UART_RxCpltCallback+0x20>)
 80001f2:	f003 fc40 	bl	8003a76 <HAL_UART_Receive_IT>
}
 80001f6:	bf00      	nop
 80001f8:	3708      	adds	r7, #8
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	200001c4 	.word	0x200001c4
 8000204:	20000124 	.word	0x20000124

08000208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000208:	b590      	push	{r4, r7, lr}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020e:	f000 fe09 	bl	8000e24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000212:	f000 f81f 	bl	8000254 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000216:	f000 f9c1 	bl	800059c <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 800021a:	f000 f98b 	bl	8000534 <_ZL19MX_USART2_UART_Initv>
  MX_TIM1_Init();
 800021e:	f000 f881 	bl	8000324 <_ZL12MX_TIM1_Initv>
  MX_TIM6_Init();
 8000222:	f000 f947 	bl	80004b4 <_ZL12MX_TIM6_Initv>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_Base_Start_IT(&htim6);
  HAL_UART_Receive_IT(&huart2, (uint8_t*)Rxdata, sizeof(Rxdata));
 8000226:	2202      	movs	r2, #2
 8000228:	4908      	ldr	r1, [pc, #32]	; (800024c <main+0x44>)
 800022a:	4809      	ldr	r0, [pc, #36]	; (8000250 <main+0x48>)
 800022c:	f003 fc23 	bl	8003a76 <HAL_UART_Receive_IT>
  PWM* pwm = new PWM();
 8000230:	2001      	movs	r0, #1
 8000232:	f004 fae1 	bl	80047f8 <_Znwj>
 8000236:	4603      	mov	r3, r0
 8000238:	461c      	mov	r4, r3
 800023a:	4620      	mov	r0, r4
 800023c:	f7ff ffc4 	bl	80001c8 <_ZN3PWMC1Ev>
 8000240:	607c      	str	r4, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  pwm -> control_PWM();
 8000242:	6878      	ldr	r0, [r7, #4]
 8000244:	f000 fb06 	bl	8000854 <_ZN3PWM11control_PWMEv>
 8000248:	e7fb      	b.n	8000242 <main+0x3a>
 800024a:	bf00      	nop
 800024c:	200001c4 	.word	0x200001c4
 8000250:	20000124 	.word	0x20000124

08000254 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b096      	sub	sp, #88	; 0x58
 8000258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800025e:	2228      	movs	r2, #40	; 0x28
 8000260:	2100      	movs	r1, #0
 8000262:	4618      	mov	r0, r3
 8000264:	f004 fb26 	bl	80048b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000268:	f107 031c 	add.w	r3, r7, #28
 800026c:	2200      	movs	r2, #0
 800026e:	601a      	str	r2, [r3, #0]
 8000270:	605a      	str	r2, [r3, #4]
 8000272:	609a      	str	r2, [r3, #8]
 8000274:	60da      	str	r2, [r3, #12]
 8000276:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]
 8000284:	611a      	str	r2, [r3, #16]
 8000286:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000288:	2302      	movs	r3, #2
 800028a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028c:	2301      	movs	r3, #1
 800028e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000290:	2310      	movs	r3, #16
 8000292:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000294:	2302      	movs	r3, #2
 8000296:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000298:	2300      	movs	r3, #0
 800029a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800029c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80002a0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002a6:	4618      	mov	r0, r3
 80002a8:	f001 f994 	bl	80015d4 <HAL_RCC_OscConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	bf14      	ite	ne
 80002b2:	2301      	movne	r3, #1
 80002b4:	2300      	moveq	r3, #0
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <_Z18SystemClock_Configv+0x6c>
  {
    Error_Handler();
 80002bc:	f000 fa76 	bl	80007ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c0:	230f      	movs	r3, #15
 80002c2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c4:	2302      	movs	r3, #2
 80002c6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002d6:	f107 031c 	add.w	r3, r7, #28
 80002da:	2102      	movs	r1, #2
 80002dc:	4618      	mov	r0, r3
 80002de:	f002 f881 	bl	80023e4 <HAL_RCC_ClockConfig>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	bf14      	ite	ne
 80002e8:	2301      	movne	r3, #1
 80002ea:	2300      	moveq	r3, #0
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 80002f2:	f000 fa5b 	bl	80007ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80002f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002fa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80002fc:	2300      	movs	r3, #0
 80002fe:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	4618      	mov	r0, r3
 8000304:	f002 faa4 	bl	8002850 <HAL_RCCEx_PeriphCLKConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	bf14      	ite	ne
 800030e:	2301      	movne	r3, #1
 8000310:	2300      	moveq	r3, #0
 8000312:	b2db      	uxtb	r3, r3
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <_Z18SystemClock_Configv+0xc8>
  {
    Error_Handler();
 8000318:	f000 fa48 	bl	80007ac <Error_Handler>
  }
}
 800031c:	bf00      	nop
 800031e:	3758      	adds	r7, #88	; 0x58
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}

08000324 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b096      	sub	sp, #88	; 0x58
 8000328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800032a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]
 8000334:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000336:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
 800033e:	605a      	str	r2, [r3, #4]
 8000340:	609a      	str	r2, [r3, #8]
 8000342:	60da      	str	r2, [r3, #12]
 8000344:	611a      	str	r2, [r3, #16]
 8000346:	615a      	str	r2, [r3, #20]
 8000348:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	222c      	movs	r2, #44	; 0x2c
 800034e:	2100      	movs	r1, #0
 8000350:	4618      	mov	r0, r3
 8000352:	f004 faaf 	bl	80048b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000356:	4b54      	ldr	r3, [pc, #336]	; (80004a8 <_ZL12MX_TIM1_Initv+0x184>)
 8000358:	4a54      	ldr	r2, [pc, #336]	; (80004ac <_ZL12MX_TIM1_Initv+0x188>)
 800035a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6400;
 800035c:	4b52      	ldr	r3, [pc, #328]	; (80004a8 <_ZL12MX_TIM1_Initv+0x184>)
 800035e:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8000362:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000364:	4b50      	ldr	r3, [pc, #320]	; (80004a8 <_ZL12MX_TIM1_Initv+0x184>)
 8000366:	2200      	movs	r2, #0
 8000368:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 799;
 800036a:	4b4f      	ldr	r3, [pc, #316]	; (80004a8 <_ZL12MX_TIM1_Initv+0x184>)
 800036c:	f240 321f 	movw	r2, #799	; 0x31f
 8000370:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000372:	4b4d      	ldr	r3, [pc, #308]	; (80004a8 <_ZL12MX_TIM1_Initv+0x184>)
 8000374:	2200      	movs	r2, #0
 8000376:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000378:	4b4b      	ldr	r3, [pc, #300]	; (80004a8 <_ZL12MX_TIM1_Initv+0x184>)
 800037a:	2200      	movs	r2, #0
 800037c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800037e:	4b4a      	ldr	r3, [pc, #296]	; (80004a8 <_ZL12MX_TIM1_Initv+0x184>)
 8000380:	2280      	movs	r2, #128	; 0x80
 8000382:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000384:	4848      	ldr	r0, [pc, #288]	; (80004a8 <_ZL12MX_TIM1_Initv+0x184>)
 8000386:	f002 fbe0 	bl	8002b4a <HAL_TIM_PWM_Init>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	bf14      	ite	ne
 8000390:	2301      	movne	r3, #1
 8000392:	2300      	moveq	r3, #0
 8000394:	b2db      	uxtb	r3, r3
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <_ZL12MX_TIM1_Initv+0x7a>
  {
    Error_Handler();
 800039a:	f000 fa07 	bl	80007ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800039e:	2300      	movs	r3, #0
 80003a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80003a2:	2300      	movs	r3, #0
 80003a4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003a6:	2300      	movs	r3, #0
 80003a8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003aa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80003ae:	4619      	mov	r1, r3
 80003b0:	483d      	ldr	r0, [pc, #244]	; (80004a8 <_ZL12MX_TIM1_Initv+0x184>)
 80003b2:	f003 fa07 	bl	80037c4 <HAL_TIMEx_MasterConfigSynchronization>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	bf14      	ite	ne
 80003bc:	2301      	movne	r3, #1
 80003be:	2300      	moveq	r3, #0
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <_ZL12MX_TIM1_Initv+0xa6>
  {
    Error_Handler();
 80003c6:	f000 f9f1 	bl	80007ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ASSYMETRIC_PWM1;
 80003ca:	4b39      	ldr	r3, [pc, #228]	; (80004b0 <_ZL12MX_TIM1_Initv+0x18c>)
 80003cc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80003ce:	2300      	movs	r3, #0
 80003d0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003d2:	2300      	movs	r3, #0
 80003d4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80003d6:	2300      	movs	r3, #0
 80003d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003da:	2300      	movs	r3, #0
 80003dc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80003de:	2300      	movs	r3, #0
 80003e0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003e2:	2300      	movs	r3, #0
 80003e4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80003e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003ea:	2204      	movs	r2, #4
 80003ec:	4619      	mov	r1, r3
 80003ee:	482e      	ldr	r0, [pc, #184]	; (80004a8 <_ZL12MX_TIM1_Initv+0x184>)
 80003f0:	f002 fcee 	bl	8002dd0 <HAL_TIM_PWM_ConfigChannel>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	bf14      	ite	ne
 80003fa:	2301      	movne	r3, #1
 80003fc:	2300      	moveq	r3, #0
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <_ZL12MX_TIM1_Initv+0xe4>
  {
    Error_Handler();
 8000404:	f000 f9d2 	bl	80007ac <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 8000408:	4b27      	ldr	r3, [pc, #156]	; (80004a8 <_ZL12MX_TIM1_Initv+0x184>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	699a      	ldr	r2, [r3, #24]
 800040e:	4b26      	ldr	r3, [pc, #152]	; (80004a8 <_ZL12MX_TIM1_Initv+0x184>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000416:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000418:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800041c:	2208      	movs	r2, #8
 800041e:	4619      	mov	r1, r3
 8000420:	4821      	ldr	r0, [pc, #132]	; (80004a8 <_ZL12MX_TIM1_Initv+0x184>)
 8000422:	f002 fcd5 	bl	8002dd0 <HAL_TIM_PWM_ConfigChannel>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	bf14      	ite	ne
 800042c:	2301      	movne	r3, #1
 800042e:	2300      	moveq	r3, #0
 8000430:	b2db      	uxtb	r3, r3
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <_ZL12MX_TIM1_Initv+0x116>
  {
    Error_Handler();
 8000436:	f000 f9b9 	bl	80007ac <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_3);
 800043a:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <_ZL12MX_TIM1_Initv+0x184>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	69da      	ldr	r2, [r3, #28]
 8000440:	4b19      	ldr	r3, [pc, #100]	; (80004a8 <_ZL12MX_TIM1_Initv+0x184>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	f022 0208 	bic.w	r2, r2, #8
 8000448:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800044a:	2300      	movs	r3, #0
 800044c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800044e:	2300      	movs	r3, #0
 8000450:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000452:	2300      	movs	r3, #0
 8000454:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 13;
 8000456:	230d      	movs	r3, #13
 8000458:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800045a:	2300      	movs	r3, #0
 800045c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800045e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000462:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000464:	2300      	movs	r3, #0
 8000466:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000468:	2300      	movs	r3, #0
 800046a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800046c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000470:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000472:	2300      	movs	r3, #0
 8000474:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000476:	2300      	movs	r3, #0
 8000478:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	4619      	mov	r1, r3
 800047e:	480a      	ldr	r0, [pc, #40]	; (80004a8 <_ZL12MX_TIM1_Initv+0x184>)
 8000480:	f003 fa0e 	bl	80038a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	bf14      	ite	ne
 800048a:	2301      	movne	r3, #1
 800048c:	2300      	moveq	r3, #0
 800048e:	b2db      	uxtb	r3, r3
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <_ZL12MX_TIM1_Initv+0x174>
  {
    Error_Handler();
 8000494:	f000 f98a 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000498:	4803      	ldr	r0, [pc, #12]	; (80004a8 <_ZL12MX_TIM1_Initv+0x184>)
 800049a:	f000 fb4b 	bl	8000b34 <HAL_TIM_MspPostInit>

}
 800049e:	bf00      	nop
 80004a0:	3758      	adds	r7, #88	; 0x58
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	2000008c 	.word	0x2000008c
 80004ac:	40012c00 	.word	0x40012c00
 80004b0:	00010060 	.word	0x00010060

080004b4 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b084      	sub	sp, #16
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ba:	1d3b      	adds	r3, r7, #4
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
 80004c0:	605a      	str	r2, [r3, #4]
 80004c2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80004c4:	4b19      	ldr	r3, [pc, #100]	; (800052c <_ZL12MX_TIM6_Initv+0x78>)
 80004c6:	4a1a      	ldr	r2, [pc, #104]	; (8000530 <_ZL12MX_TIM6_Initv+0x7c>)
 80004c8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80004ca:	4b18      	ldr	r3, [pc, #96]	; (800052c <_ZL12MX_TIM6_Initv+0x78>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004d0:	4b16      	ldr	r3, [pc, #88]	; (800052c <_ZL12MX_TIM6_Initv+0x78>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80004d6:	4b15      	ldr	r3, [pc, #84]	; (800052c <_ZL12MX_TIM6_Initv+0x78>)
 80004d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004dc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004de:	4b13      	ldr	r3, [pc, #76]	; (800052c <_ZL12MX_TIM6_Initv+0x78>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80004e4:	4811      	ldr	r0, [pc, #68]	; (800052c <_ZL12MX_TIM6_Initv+0x78>)
 80004e6:	f002 fad9 	bl	8002a9c <HAL_TIM_Base_Init>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	bf14      	ite	ne
 80004f0:	2301      	movne	r3, #1
 80004f2:	2300      	moveq	r3, #0
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 80004fa:	f000 f957 	bl	80007ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004fe:	2300      	movs	r3, #0
 8000500:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000502:	2300      	movs	r3, #0
 8000504:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	4619      	mov	r1, r3
 800050a:	4808      	ldr	r0, [pc, #32]	; (800052c <_ZL12MX_TIM6_Initv+0x78>)
 800050c:	f003 f95a 	bl	80037c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	bf14      	ite	ne
 8000516:	2301      	movne	r3, #1
 8000518:	2300      	moveq	r3, #0
 800051a:	b2db      	uxtb	r3, r3
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 8000520:	f000 f944 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000524:	bf00      	nop
 8000526:	3710      	adds	r7, #16
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	200000d8 	.word	0x200000d8
 8000530:	40001000 	.word	0x40001000

08000534 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000538:	4b16      	ldr	r3, [pc, #88]	; (8000594 <_ZL19MX_USART2_UART_Initv+0x60>)
 800053a:	4a17      	ldr	r2, [pc, #92]	; (8000598 <_ZL19MX_USART2_UART_Initv+0x64>)
 800053c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800053e:	4b15      	ldr	r3, [pc, #84]	; (8000594 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000540:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000544:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000546:	4b13      	ldr	r3, [pc, #76]	; (8000594 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800054c:	4b11      	ldr	r3, [pc, #68]	; (8000594 <_ZL19MX_USART2_UART_Initv+0x60>)
 800054e:	2200      	movs	r2, #0
 8000550:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000552:	4b10      	ldr	r3, [pc, #64]	; (8000594 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000554:	2200      	movs	r2, #0
 8000556:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000558:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <_ZL19MX_USART2_UART_Initv+0x60>)
 800055a:	220c      	movs	r2, #12
 800055c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800055e:	4b0d      	ldr	r3, [pc, #52]	; (8000594 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000560:	2200      	movs	r2, #0
 8000562:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000564:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000566:	2200      	movs	r2, #0
 8000568:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800056a:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <_ZL19MX_USART2_UART_Initv+0x60>)
 800056c:	2200      	movs	r2, #0
 800056e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000570:	4b08      	ldr	r3, [pc, #32]	; (8000594 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000572:	2200      	movs	r2, #0
 8000574:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000576:	4807      	ldr	r0, [pc, #28]	; (8000594 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000578:	f003 fa2f 	bl	80039da <HAL_UART_Init>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	bf14      	ite	ne
 8000582:	2301      	movne	r3, #1
 8000584:	2300      	moveq	r3, #0
 8000586:	b2db      	uxtb	r3, r3
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 800058c:	f000 f90e 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000124 	.word	0x20000124
 8000598:	40004400 	.word	0x40004400

0800059c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a2:	f107 030c 	add.w	r3, r7, #12
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]
 80005b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b2:	4b45      	ldr	r3, [pc, #276]	; (80006c8 <_ZL12MX_GPIO_Initv+0x12c>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	4a44      	ldr	r2, [pc, #272]	; (80006c8 <_ZL12MX_GPIO_Initv+0x12c>)
 80005b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005bc:	6153      	str	r3, [r2, #20]
 80005be:	4b42      	ldr	r3, [pc, #264]	; (80006c8 <_ZL12MX_GPIO_Initv+0x12c>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ca:	4b3f      	ldr	r3, [pc, #252]	; (80006c8 <_ZL12MX_GPIO_Initv+0x12c>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	4a3e      	ldr	r2, [pc, #248]	; (80006c8 <_ZL12MX_GPIO_Initv+0x12c>)
 80005d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005d4:	6153      	str	r3, [r2, #20]
 80005d6:	4b3c      	ldr	r3, [pc, #240]	; (80006c8 <_ZL12MX_GPIO_Initv+0x12c>)
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD_0_Pin|LD_1_Pin, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80005e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ec:	f000 ffb6 	bl	800155c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EN_A_Pin EN_B_Pin */
  GPIO_InitStruct.Pin = EN_A_Pin|EN_B_Pin;
 80005f0:	230a      	movs	r3, #10
 80005f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005f4:	4b35      	ldr	r3, [pc, #212]	; (80006cc <_ZL12MX_GPIO_Initv+0x130>)
 80005f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	4619      	mov	r1, r3
 8000602:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000606:	f000 fe1f 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : MN_0_Pin */
  GPIO_InitStruct.Pin = MN_0_Pin;
 800060a:	2310      	movs	r3, #16
 800060c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800060e:	2300      	movs	r3, #0
 8000610:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MN_0_GPIO_Port, &GPIO_InitStruct);
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	4619      	mov	r1, r3
 800061c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000620:	f000 fe12 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pins : MN_1_Pin MN_2_Pin MN_3_Pin */
  GPIO_InitStruct.Pin = MN_1_Pin|MN_2_Pin|MN_3_Pin;
 8000624:	23e0      	movs	r3, #224	; 0xe0
 8000626:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000628:	2300      	movs	r3, #0
 800062a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800062c:	2301      	movs	r3, #1
 800062e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	4619      	mov	r1, r3
 8000636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063a:	f000 fe05 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_0_Pin LD_1_Pin */
  GPIO_InitStruct.Pin = LD_0_Pin|LD_1_Pin;
 800063e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000642:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000644:	2301      	movs	r3, #1
 8000646:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	2300      	movs	r3, #0
 800064e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	4619      	mov	r1, r3
 8000656:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065a:	f000 fdf5 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800065e:	2308      	movs	r3, #8
 8000660:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000662:	2302      	movs	r3, #2
 8000664:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066a:	2300      	movs	r3, #0
 800066c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800066e:	2301      	movs	r3, #1
 8000670:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000672:	f107 030c 	add.w	r3, r7, #12
 8000676:	4619      	mov	r1, r3
 8000678:	4815      	ldr	r0, [pc, #84]	; (80006d0 <_ZL12MX_GPIO_Initv+0x134>)
 800067a:	f000 fde5 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800067e:	2320      	movs	r3, #32
 8000680:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000682:	2302      	movs	r3, #2
 8000684:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068a:	2300      	movs	r3, #0
 800068c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800068e:	2302      	movs	r3, #2
 8000690:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000692:	f107 030c 	add.w	r3, r7, #12
 8000696:	4619      	mov	r1, r3
 8000698:	480d      	ldr	r0, [pc, #52]	; (80006d0 <_ZL12MX_GPIO_Initv+0x134>)
 800069a:	f000 fdd5 	bl	8001248 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	2100      	movs	r1, #0
 80006a2:	2007      	movs	r0, #7
 80006a4:	f000 fd23 	bl	80010ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80006a8:	2007      	movs	r0, #7
 80006aa:	f000 fd3c 	bl	8001126 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2100      	movs	r1, #0
 80006b2:	2009      	movs	r0, #9
 80006b4:	f000 fd1b 	bl	80010ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80006b8:	2009      	movs	r0, #9
 80006ba:	f000 fd34 	bl	8001126 <HAL_NVIC_EnableIRQ>

}
 80006be:	bf00      	nop
 80006c0:	3720      	adds	r7, #32
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40021000 	.word	0x40021000
 80006cc:	10110000 	.word	0x10110000
 80006d0:	48000400 	.word	0x48000400

080006d4 <_ZN8FunctionC1Ev>:

/* USER CODE BEGIN 4 */

Function::Function(){
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]

}
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4618      	mov	r0, r3
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr

080006ea <_ZN8FunctionD1Ev>:
Function::~Function(){
 80006ea:	b480      	push	{r7}
 80006ec:	b083      	sub	sp, #12
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]

}
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4618      	mov	r0, r3
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr

08000700 <_ZN8Function10outputPWM1Ei>:

void Function::outputPWM1(int pwm){
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]

    static int old_pwm = 0;

    if (old_pwm != pwm)
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <_ZN8Function10outputPWM1Ei+0x4c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	683a      	ldr	r2, [r7, #0]
 8000710:	429a      	cmp	r2, r3
 8000712:	d013      	beq.n	800073c <_ZN8Function10outputPWM1Ei+0x3c>
    {

    	sConfigOC.Pulse = (uint32_t)(8)*pwm;
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	00db      	lsls	r3, r3, #3
 8000718:	4a0d      	ldr	r2, [pc, #52]	; (8000750 <_ZN8Function10outputPWM1Ei+0x50>)
 800071a:	6053      	str	r3, [r2, #4]

        HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 800071c:	2204      	movs	r2, #4
 800071e:	490c      	ldr	r1, [pc, #48]	; (8000750 <_ZN8Function10outputPWM1Ei+0x50>)
 8000720:	480c      	ldr	r0, [pc, #48]	; (8000754 <_ZN8Function10outputPWM1Ei+0x54>)
 8000722:	f002 fb55 	bl	8002dd0 <HAL_TIM_PWM_ConfigChannel>
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000726:	2104      	movs	r1, #4
 8000728:	480a      	ldr	r0, [pc, #40]	; (8000754 <_ZN8Function10outputPWM1Ei+0x54>)
 800072a:	f002 fa65 	bl	8002bf8 <HAL_TIM_PWM_Start>
        HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 800072e:	2104      	movs	r1, #4
 8000730:	4808      	ldr	r0, [pc, #32]	; (8000754 <_ZN8Function10outputPWM1Ei+0x54>)
 8000732:	f002 ffa1 	bl	8003678 <HAL_TIMEx_PWMN_Start>
        HAL_TIM_PWM_Init(&htim1);
 8000736:	4807      	ldr	r0, [pc, #28]	; (8000754 <_ZN8Function10outputPWM1Ei+0x54>)
 8000738:	f002 fa07 	bl	8002b4a <HAL_TIM_PWM_Init>
    }
    old_pwm = pwm;
 800073c:	4a03      	ldr	r2, [pc, #12]	; (800074c <_ZN8Function10outputPWM1Ei+0x4c>)
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	6013      	str	r3, [r2, #0]

}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200001c8 	.word	0x200001c8
 8000750:	200001a8 	.word	0x200001a8
 8000754:	2000008c 	.word	0x2000008c

08000758 <_ZN8Function10outputPWM0Ei>:

void Function::outputPWM0(int pwm)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	6039      	str	r1, [r7, #0]

    static int old_pwm = 0;

    if (old_pwm != pwm)
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <_ZN8Function10outputPWM0Ei+0x48>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	683a      	ldr	r2, [r7, #0]
 8000768:	429a      	cmp	r2, r3
 800076a:	d011      	beq.n	8000790 <_ZN8Function10outputPWM0Ei+0x38>
    {

        sConfigOC.Pulse = (uint32_t)((8)*pwm);
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	00db      	lsls	r3, r3, #3
 8000770:	461a      	mov	r2, r3
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <_ZN8Function10outputPWM0Ei+0x4c>)
 8000774:	605a      	str	r2, [r3, #4]

        HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
 8000776:	2208      	movs	r2, #8
 8000778:	490a      	ldr	r1, [pc, #40]	; (80007a4 <_ZN8Function10outputPWM0Ei+0x4c>)
 800077a:	480b      	ldr	r0, [pc, #44]	; (80007a8 <_ZN8Function10outputPWM0Ei+0x50>)
 800077c:	f002 fb28 	bl	8002dd0 <HAL_TIM_PWM_ConfigChannel>
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000780:	2108      	movs	r1, #8
 8000782:	4809      	ldr	r0, [pc, #36]	; (80007a8 <_ZN8Function10outputPWM0Ei+0x50>)
 8000784:	f002 fa38 	bl	8002bf8 <HAL_TIM_PWM_Start>
        HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3);
 8000788:	2108      	movs	r1, #8
 800078a:	4807      	ldr	r0, [pc, #28]	; (80007a8 <_ZN8Function10outputPWM0Ei+0x50>)
 800078c:	f002 ff74 	bl	8003678 <HAL_TIMEx_PWMN_Start>
    }
    old_pwm = pwm;
 8000790:	4a03      	ldr	r2, [pc, #12]	; (80007a0 <_ZN8Function10outputPWM0Ei+0x48>)
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	6013      	str	r3, [r2, #0]

}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200001cc 	.word	0x200001cc
 80007a4:	200001a8 	.word	0x200001a8
 80007a8:	2000008c 	.word	0x2000008c

080007ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b0:	b672      	cpsid	i
}
 80007b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <Error_Handler+0x8>

080007b6 <_ZN3PWM16set_motor_numberEv>:
#include <main.h>
#include "General.hpp"



uint8_t PWM::set_motor_number(){
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b084      	sub	sp, #16
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
	uint8_t motor_number = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	73fb      	strb	r3, [r7, #15]

	if (HAL_GPIO_ReadPin(MN_0_GPIO_Port, MN_0_Pin) == 0) motor_number = motor_number|0b1;
 80007c2:	2110      	movs	r1, #16
 80007c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c8:	f000 feb0 	bl	800152c <HAL_GPIO_ReadPin>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	bf0c      	ite	eq
 80007d2:	2301      	moveq	r3, #1
 80007d4:	2300      	movne	r3, #0
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d003      	beq.n	80007e4 <_ZN3PWM16set_motor_numberEv+0x2e>
 80007dc:	7bfb      	ldrb	r3, [r7, #15]
 80007de:	f043 0301 	orr.w	r3, r3, #1
 80007e2:	73fb      	strb	r3, [r7, #15]
	if (HAL_GPIO_ReadPin(MN_1_GPIO_Port, MN_1_Pin) == 0) motor_number = motor_number|(0b1<<1);
 80007e4:	2120      	movs	r1, #32
 80007e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ea:	f000 fe9f 	bl	800152c <HAL_GPIO_ReadPin>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	bf0c      	ite	eq
 80007f4:	2301      	moveq	r3, #1
 80007f6:	2300      	movne	r3, #0
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d003      	beq.n	8000806 <_ZN3PWM16set_motor_numberEv+0x50>
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	73fb      	strb	r3, [r7, #15]
	if (HAL_GPIO_ReadPin(MN_2_GPIO_Port, MN_2_Pin) == 0) motor_number = motor_number|(0b1<<2);
 8000806:	2140      	movs	r1, #64	; 0x40
 8000808:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080c:	f000 fe8e 	bl	800152c <HAL_GPIO_ReadPin>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	bf0c      	ite	eq
 8000816:	2301      	moveq	r3, #1
 8000818:	2300      	movne	r3, #0
 800081a:	b2db      	uxtb	r3, r3
 800081c:	2b00      	cmp	r3, #0
 800081e:	d003      	beq.n	8000828 <_ZN3PWM16set_motor_numberEv+0x72>
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	f043 0304 	orr.w	r3, r3, #4
 8000826:	73fb      	strb	r3, [r7, #15]
	if (HAL_GPIO_ReadPin(MN_3_GPIO_Port, MN_3_Pin) == 0) motor_number = motor_number|(0b1<<3);
 8000828:	2180      	movs	r1, #128	; 0x80
 800082a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082e:	f000 fe7d 	bl	800152c <HAL_GPIO_ReadPin>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	bf0c      	ite	eq
 8000838:	2301      	moveq	r3, #1
 800083a:	2300      	movne	r3, #0
 800083c:	b2db      	uxtb	r3, r3
 800083e:	2b00      	cmp	r3, #0
 8000840:	d003      	beq.n	800084a <_ZN3PWM16set_motor_numberEv+0x94>
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	f043 0308 	orr.w	r3, r3, #8
 8000848:	73fb      	strb	r3, [r7, #15]

	return motor_number;
 800084a:	7bfb      	ldrb	r3, [r7, #15]


}
 800084c:	4618      	mov	r0, r3
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <_ZN3PWM11control_PWMEv>:
void PWM::control_PWM(void){
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]



    uint8_t motor_number = (0b00111100&Rxdata[0])>>2;
 800085c:	4b23      	ldr	r3, [pc, #140]	; (80008ec <_ZN3PWM11control_PWMEv+0x98>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	109b      	asrs	r3, r3, #2
 8000862:	b2db      	uxtb	r3, r3
 8000864:	f003 030f 	and.w	r3, r3, #15
 8000868:	737b      	strb	r3, [r7, #13]
    uint8_t direction = 0b00000011&Rxdata[0];
 800086a:	4b20      	ldr	r3, [pc, #128]	; (80008ec <_ZN3PWM11control_PWMEv+0x98>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	f003 0303 	and.w	r3, r3, #3
 8000872:	733b      	strb	r3, [r7, #12]
    uint8_t target = Rxdata[1];
 8000874:	4b1d      	ldr	r3, [pc, #116]	; (80008ec <_ZN3PWM11control_PWMEv+0x98>)
 8000876:	785b      	ldrb	r3, [r3, #1]
 8000878:	73fb      	strb	r3, [r7, #15]
    if(target >= 99){
 800087a:	7bfb      	ldrb	r3, [r7, #15]
 800087c:	2b62      	cmp	r3, #98	; 0x62
 800087e:	d901      	bls.n	8000884 <_ZN3PWM11control_PWMEv+0x30>
    	target = 99;
 8000880:	2363      	movs	r3, #99	; 0x63
 8000882:	73fb      	strb	r3, [r7, #15]
    }
    uint8_t pwm;


    if (motor_number == this -> set_motor_number())
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f7ff ff96 	bl	80007b6 <_ZN3PWM16set_motor_numberEv>
 800088a:	4603      	mov	r3, r0
 800088c:	461a      	mov	r2, r3
 800088e:	7b7b      	ldrb	r3, [r7, #13]
 8000890:	4293      	cmp	r3, r2
 8000892:	bf0c      	ite	eq
 8000894:	2301      	moveq	r3, #1
 8000896:	2300      	movne	r3, #0
 8000898:	b2db      	uxtb	r3, r3
 800089a:	2b00      	cmp	r3, #0
 800089c:	d01f      	beq.n	80008de <_ZN3PWM11control_PWMEv+0x8a>
    {
    	pwm = this -> trapezoid_control(PERIOD, target);
 800089e:	7bfb      	ldrb	r3, [r7, #15]
 80008a0:	461a      	mov	r2, r3
 80008a2:	2132      	movs	r1, #50	; 0x32
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f000 f823 	bl	80008f0 <_ZN3PWM17trapezoid_controlEhh>
 80008aa:	4603      	mov	r3, r0
 80008ac:	73bb      	strb	r3, [r7, #14]

        if (direction == CW)
 80008ae:	7b3b      	ldrb	r3, [r7, #12]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d105      	bne.n	80008c0 <_ZN3PWM11control_PWMEv+0x6c>
        {
        	this -> cw(pwm);
 80008b4:	7bbb      	ldrb	r3, [r7, #14]
 80008b6:	4619      	mov	r1, r3
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f000 f838 	bl	800092e <_ZN3PWM2cwEh>
 80008be:	e00e      	b.n	80008de <_ZN3PWM11control_PWMEv+0x8a>
        }
        else if (direction == CCW)
 80008c0:	7b3b      	ldrb	r3, [r7, #12]
 80008c2:	2b02      	cmp	r3, #2
 80008c4:	d105      	bne.n	80008d2 <_ZN3PWM11control_PWMEv+0x7e>
        {
        	this -> ccw(pwm);
 80008c6:	7bbb      	ldrb	r3, [r7, #14]
 80008c8:	4619      	mov	r1, r3
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f000 f863 	bl	8000996 <_ZN3PWM3ccwEh>
 80008d0:	e005      	b.n	80008de <_ZN3PWM11control_PWMEv+0x8a>
        }
        else if (direction == BRAKE)
 80008d2:	7b3b      	ldrb	r3, [r7, #12]
 80008d4:	2b03      	cmp	r3, #3
 80008d6:	d102      	bne.n	80008de <_ZN3PWM11control_PWMEv+0x8a>
        {
        	this -> brake();
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f000 f892 	bl	8000a02 <_ZN3PWM5brakeEv>
        }
    }

    old_pwm = pwm;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	7bba      	ldrb	r2, [r7, #14]
 80008e2:	701a      	strb	r2, [r3, #0]





}
 80008e4:	bf00      	nop
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	200001c4 	.word	0x200001c4

080008f0 <_ZN3PWM17trapezoid_controlEhh>:

uint8_t PWM::trapezoid_control(uint8_t period, uint8_t target){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	460b      	mov	r3, r1
 80008fa:	70fb      	strb	r3, [r7, #3]
 80008fc:	4613      	mov	r3, r2
 80008fe:	70bb      	strb	r3, [r7, #2]

	if(this -> old_pwm >= target){
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	78ba      	ldrb	r2, [r7, #2]
 8000906:	429a      	cmp	r2, r3
 8000908:	d801      	bhi.n	800090e <_ZN3PWM17trapezoid_controlEhh+0x1e>
		return target;
 800090a:	78bb      	ldrb	r3, [r7, #2]
 800090c:	e00b      	b.n	8000926 <_ZN3PWM17trapezoid_controlEhh+0x36>
	}
	this -> old_pwm++;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	3301      	adds	r3, #1
 8000914:	b2da      	uxtb	r2, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	701a      	strb	r2, [r3, #0]
	HAL_Delay(period);
 800091a:	78fb      	ldrb	r3, [r7, #3]
 800091c:	4618      	mov	r0, r3
 800091e:	f000 fae7 	bl	8000ef0 <HAL_Delay>

	return this -> old_pwm;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	781b      	ldrb	r3, [r3, #0]

}
 8000926:	4618      	mov	r0, r3
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <_ZN3PWM2cwEh>:

void PWM::cw(uint8_t pwm){
 800092e:	b590      	push	{r4, r7, lr}
 8000930:	b085      	sub	sp, #20
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
 8000936:	460b      	mov	r3, r1
 8000938:	70fb      	strb	r3, [r7, #3]

	Function * function = new Function();
 800093a:	2004      	movs	r0, #4
 800093c:	f003 ff5c 	bl	80047f8 <_Znwj>
 8000940:	4603      	mov	r3, r0
 8000942:	461c      	mov	r4, r3
 8000944:	4620      	mov	r0, r4
 8000946:	f7ff fec5 	bl	80006d4 <_ZN8FunctionC1Ev>
 800094a:	60fc      	str	r4, [r7, #12]

	function -> outputPWM0(pwm);
 800094c:	78fb      	ldrb	r3, [r7, #3]
 800094e:	4619      	mov	r1, r3
 8000950:	68f8      	ldr	r0, [r7, #12]
 8000952:	f7ff ff01 	bl	8000758 <_ZN8Function10outputPWM0Ei>
	function -> outputPWM1(99);
 8000956:	2163      	movs	r1, #99	; 0x63
 8000958:	68f8      	ldr	r0, [r7, #12]
 800095a:	f7ff fed1 	bl	8000700 <_ZN8Function10outputPWM1Ei>


	HAL_GPIO_WritePin(LD_0_GPIO_Port, LD_0_Pin, GPIO_PIN_SET);
 800095e:	2201      	movs	r2, #1
 8000960:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000964:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000968:	f000 fdf8 	bl	800155c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD_1_GPIO_Port, LD_1_Pin, GPIO_PIN_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000972:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000976:	f000 fdf1 	bl	800155c <HAL_GPIO_WritePin>

	delete function;
 800097a:	68fc      	ldr	r4, [r7, #12]
 800097c:	2c00      	cmp	r4, #0
 800097e:	d006      	beq.n	800098e <_ZN3PWM2cwEh+0x60>
 8000980:	4620      	mov	r0, r4
 8000982:	f7ff feb2 	bl	80006ea <_ZN8FunctionD1Ev>
 8000986:	2104      	movs	r1, #4
 8000988:	4620      	mov	r0, r4
 800098a:	f003 ff33 	bl	80047f4 <_ZdlPvj>

}
 800098e:	bf00      	nop
 8000990:	3714      	adds	r7, #20
 8000992:	46bd      	mov	sp, r7
 8000994:	bd90      	pop	{r4, r7, pc}

08000996 <_ZN3PWM3ccwEh>:
void PWM::ccw(uint8_t pwm){
 8000996:	b590      	push	{r4, r7, lr}
 8000998:	b085      	sub	sp, #20
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
 800099e:	460b      	mov	r3, r1
 80009a0:	70fb      	strb	r3, [r7, #3]

	Function * function = new Function();
 80009a2:	2004      	movs	r0, #4
 80009a4:	f003 ff28 	bl	80047f8 <_Znwj>
 80009a8:	4603      	mov	r3, r0
 80009aa:	461c      	mov	r4, r3
 80009ac:	4620      	mov	r0, r4
 80009ae:	f7ff fe91 	bl	80006d4 <_ZN8FunctionC1Ev>
 80009b2:	60fc      	str	r4, [r7, #12]

	function -> outputPWM0(1);
 80009b4:	2101      	movs	r1, #1
 80009b6:	68f8      	ldr	r0, [r7, #12]
 80009b8:	f7ff fece 	bl	8000758 <_ZN8Function10outputPWM0Ei>
	function -> outputPWM1(100-pwm);
 80009bc:	78fb      	ldrb	r3, [r7, #3]
 80009be:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80009c2:	4619      	mov	r1, r3
 80009c4:	68f8      	ldr	r0, [r7, #12]
 80009c6:	f7ff fe9b 	bl	8000700 <_ZN8Function10outputPWM1Ei>

	HAL_GPIO_WritePin(LD_0_GPIO_Port, LD_0_Pin, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d4:	f000 fdc2 	bl	800155c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD_1_GPIO_Port, LD_1_Pin, GPIO_PIN_SET);
 80009d8:	2201      	movs	r2, #1
 80009da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e2:	f000 fdbb 	bl	800155c <HAL_GPIO_WritePin>

	delete function;
 80009e6:	68fc      	ldr	r4, [r7, #12]
 80009e8:	2c00      	cmp	r4, #0
 80009ea:	d006      	beq.n	80009fa <_ZN3PWM3ccwEh+0x64>
 80009ec:	4620      	mov	r0, r4
 80009ee:	f7ff fe7c 	bl	80006ea <_ZN8FunctionD1Ev>
 80009f2:	2104      	movs	r1, #4
 80009f4:	4620      	mov	r0, r4
 80009f6:	f003 fefd 	bl	80047f4 <_ZdlPvj>

}
 80009fa:	bf00      	nop
 80009fc:	3714      	adds	r7, #20
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd90      	pop	{r4, r7, pc}

08000a02 <_ZN3PWM5brakeEv>:
void PWM::brake(void){
 8000a02:	b590      	push	{r4, r7, lr}
 8000a04:	b085      	sub	sp, #20
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]

	Function * function = new Function();
 8000a0a:	2004      	movs	r0, #4
 8000a0c:	f003 fef4 	bl	80047f8 <_Znwj>
 8000a10:	4603      	mov	r3, r0
 8000a12:	461c      	mov	r4, r3
 8000a14:	4620      	mov	r0, r4
 8000a16:	f7ff fe5d 	bl	80006d4 <_ZN8FunctionC1Ev>
 8000a1a:	60fc      	str	r4, [r7, #12]

	function -> outputPWM0(0);
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	68f8      	ldr	r0, [r7, #12]
 8000a20:	f7ff fe9a 	bl	8000758 <_ZN8Function10outputPWM0Ei>
	function -> outputPWM1(100);
 8000a24:	2164      	movs	r1, #100	; 0x64
 8000a26:	68f8      	ldr	r0, [r7, #12]
 8000a28:	f7ff fe6a 	bl	8000700 <_ZN8Function10outputPWM1Ei>

	HAL_GPIO_WritePin(LD_0_GPIO_Port, LD_0_Pin, GPIO_PIN_SET);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a36:	f000 fd91 	bl	800155c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD_1_GPIO_Port, LD_1_Pin, GPIO_PIN_SET);
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a44:	f000 fd8a 	bl	800155c <HAL_GPIO_WritePin>

	this -> old_pwm = 0;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]

	delete function;
 8000a4e:	68fc      	ldr	r4, [r7, #12]
 8000a50:	2c00      	cmp	r4, #0
 8000a52:	d006      	beq.n	8000a62 <_ZN3PWM5brakeEv+0x60>
 8000a54:	4620      	mov	r0, r4
 8000a56:	f7ff fe48 	bl	80006ea <_ZN8FunctionD1Ev>
 8000a5a:	2104      	movs	r1, #4
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	f003 fec9 	bl	80047f4 <_ZdlPvj>

}
 8000a62:	bf00      	nop
 8000a64:	3714      	adds	r7, #20
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd90      	pop	{r4, r7, pc}
	...

08000a6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a74:	699b      	ldr	r3, [r3, #24]
 8000a76:	4a0e      	ldr	r2, [pc, #56]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6193      	str	r3, [r2, #24]
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a8c:	69db      	ldr	r3, [r3, #28]
 8000a8e:	4a08      	ldr	r2, [pc, #32]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a94:	61d3      	str	r3, [r2, #28]
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a98:	69db      	ldr	r3, [r3, #28]
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a0a      	ldr	r2, [pc, #40]	; (8000aec <HAL_TIM_PWM_MspInit+0x38>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d10b      	bne.n	8000ade <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ac8:	699b      	ldr	r3, [r3, #24]
 8000aca:	4a09      	ldr	r2, [pc, #36]	; (8000af0 <HAL_TIM_PWM_MspInit+0x3c>)
 8000acc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ad0:	6193      	str	r3, [r2, #24]
 8000ad2:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ad4:	699b      	ldr	r3, [r3, #24]
 8000ad6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000ade:	bf00      	nop
 8000ae0:	3714      	adds	r7, #20
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	40012c00 	.word	0x40012c00
 8000af0:	40021000 	.word	0x40021000

08000af4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <HAL_TIM_Base_MspInit+0x38>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d10b      	bne.n	8000b1e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <HAL_TIM_Base_MspInit+0x3c>)
 8000b08:	69db      	ldr	r3, [r3, #28]
 8000b0a:	4a09      	ldr	r2, [pc, #36]	; (8000b30 <HAL_TIM_Base_MspInit+0x3c>)
 8000b0c:	f043 0310 	orr.w	r3, r3, #16
 8000b10:	61d3      	str	r3, [r2, #28]
 8000b12:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <HAL_TIM_Base_MspInit+0x3c>)
 8000b14:	69db      	ldr	r3, [r3, #28]
 8000b16:	f003 0310 	and.w	r3, r3, #16
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000b1e:	bf00      	nop
 8000b20:	3714      	adds	r7, #20
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	40001000 	.word	0x40001000
 8000b30:	40021000 	.word	0x40021000

08000b34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08a      	sub	sp, #40	; 0x28
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a20      	ldr	r2, [pc, #128]	; (8000bd4 <HAL_TIM_MspPostInit+0xa0>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d139      	bne.n	8000bca <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b56:	4b20      	ldr	r3, [pc, #128]	; (8000bd8 <HAL_TIM_MspPostInit+0xa4>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	4a1f      	ldr	r2, [pc, #124]	; (8000bd8 <HAL_TIM_MspPostInit+0xa4>)
 8000b5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b60:	6153      	str	r3, [r2, #20]
 8000b62:	4b1d      	ldr	r3, [pc, #116]	; (8000bd8 <HAL_TIM_MspPostInit+0xa4>)
 8000b64:	695b      	ldr	r3, [r3, #20]
 8000b66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <HAL_TIM_MspPostInit+0xa4>)
 8000b70:	695b      	ldr	r3, [r3, #20]
 8000b72:	4a19      	ldr	r2, [pc, #100]	; (8000bd8 <HAL_TIM_MspPostInit+0xa4>)
 8000b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b78:	6153      	str	r3, [r2, #20]
 8000b7a:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <HAL_TIM_MspPostInit+0xa4>)
 8000b7c:	695b      	ldr	r3, [r3, #20]
 8000b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b86:	2303      	movs	r3, #3
 8000b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000b96:	2306      	movs	r3, #6
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	480e      	ldr	r0, [pc, #56]	; (8000bdc <HAL_TIM_MspPostInit+0xa8>)
 8000ba2:	f000 fb51 	bl	8001248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ba6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000bb8:	2306      	movs	r3, #6
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc6:	f000 fb3f 	bl	8001248 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000bca:	bf00      	nop
 8000bcc:	3728      	adds	r7, #40	; 0x28
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40012c00 	.word	0x40012c00
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	48000400 	.word	0x48000400

08000be0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08a      	sub	sp, #40	; 0x28
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a1c      	ldr	r2, [pc, #112]	; (8000c70 <HAL_UART_MspInit+0x90>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d131      	bne.n	8000c66 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c02:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <HAL_UART_MspInit+0x94>)
 8000c04:	69db      	ldr	r3, [r3, #28]
 8000c06:	4a1b      	ldr	r2, [pc, #108]	; (8000c74 <HAL_UART_MspInit+0x94>)
 8000c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c0c:	61d3      	str	r3, [r2, #28]
 8000c0e:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <HAL_UART_MspInit+0x94>)
 8000c10:	69db      	ldr	r3, [r3, #28]
 8000c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <HAL_UART_MspInit+0x94>)
 8000c1c:	695b      	ldr	r3, [r3, #20]
 8000c1e:	4a15      	ldr	r2, [pc, #84]	; (8000c74 <HAL_UART_MspInit+0x94>)
 8000c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c24:	6153      	str	r3, [r2, #20]
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <HAL_UART_MspInit+0x94>)
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8000c32:	f248 0304 	movw	r3, #32772	; 0x8004
 8000c36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c40:	2303      	movs	r3, #3
 8000c42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c44:	2307      	movs	r3, #7
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c52:	f000 faf9 	bl	8001248 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2100      	movs	r1, #0
 8000c5a:	2026      	movs	r0, #38	; 0x26
 8000c5c:	f000 fa47 	bl	80010ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c60:	2026      	movs	r0, #38	; 0x26
 8000c62:	f000 fa60 	bl	8001126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c66:	bf00      	nop
 8000c68:	3728      	adds	r7, #40	; 0x28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40004400 	.word	0x40004400
 8000c74:	40021000 	.word	0x40021000

08000c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <NMI_Handler+0x4>

08000c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <HardFault_Handler+0x4>

08000c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <MemManage_Handler+0x4>

08000c8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <BusFault_Handler+0x4>

08000c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <UsageFault_Handler+0x4>

08000c96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc4:	f000 f8f4 	bl	8000eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000cd0:	2002      	movs	r0, #2
 8000cd2:	f000 fc5b 	bl	800158c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000cde:	2008      	movs	r0, #8
 8000ce0:	f000 fc54 	bl	800158c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cec:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <USART2_IRQHandler+0x10>)
 8000cee:	f002 feff 	bl	8003af0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000124 	.word	0x20000124

08000cfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
	return 1;
 8000d00:	2301      	movs	r3, #1
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <_kill>:

int _kill(int pid, int sig)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d16:	f003 fd93 	bl	8004840 <__errno>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2216      	movs	r2, #22
 8000d1e:	601a      	str	r2, [r3, #0]
	return -1;
 8000d20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <_exit>:

void _exit (int status)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d34:	f04f 31ff 	mov.w	r1, #4294967295
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f7ff ffe7 	bl	8000d0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d3e:	e7fe      	b.n	8000d3e <_exit+0x12>

08000d40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d48:	4a14      	ldr	r2, [pc, #80]	; (8000d9c <_sbrk+0x5c>)
 8000d4a:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <_sbrk+0x60>)
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d54:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <_sbrk+0x64>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d102      	bne.n	8000d62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d5c:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <_sbrk+0x64>)
 8000d5e:	4a12      	ldr	r2, [pc, #72]	; (8000da8 <_sbrk+0x68>)
 8000d60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d62:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <_sbrk+0x64>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d207      	bcs.n	8000d80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d70:	f003 fd66 	bl	8004840 <__errno>
 8000d74:	4603      	mov	r3, r0
 8000d76:	220c      	movs	r2, #12
 8000d78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7e:	e009      	b.n	8000d94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <_sbrk+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d86:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <_sbrk+0x64>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	4a05      	ldr	r2, [pc, #20]	; (8000da4 <_sbrk+0x64>)
 8000d90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d92:	68fb      	ldr	r3, [r7, #12]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3718      	adds	r7, #24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20003000 	.word	0x20003000
 8000da0:	00000400 	.word	0x00000400
 8000da4:	200001d0 	.word	0x200001d0
 8000da8:	200001f8 	.word	0x200001f8

08000dac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <SystemInit+0x20>)
 8000db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000db6:	4a05      	ldr	r2, [pc, #20]	; (8000dcc <SystemInit+0x20>)
 8000db8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000dd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e08 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dd4:	480d      	ldr	r0, [pc, #52]	; (8000e0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000dd6:	490e      	ldr	r1, [pc, #56]	; (8000e10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dd8:	4a0e      	ldr	r2, [pc, #56]	; (8000e14 <LoopForever+0xe>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ddc:	e002      	b.n	8000de4 <LoopCopyDataInit>

08000dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de2:	3304      	adds	r3, #4

08000de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de8:	d3f9      	bcc.n	8000dde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dea:	4a0b      	ldr	r2, [pc, #44]	; (8000e18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dec:	4c0b      	ldr	r4, [pc, #44]	; (8000e1c <LoopForever+0x16>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df0:	e001      	b.n	8000df6 <LoopFillZerobss>

08000df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df4:	3204      	adds	r2, #4

08000df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df8:	d3fb      	bcc.n	8000df2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dfa:	f7ff ffd7 	bl	8000dac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dfe:	f003 fd25 	bl	800484c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e02:	f7ff fa01 	bl	8000208 <main>

08000e06 <LoopForever>:

LoopForever:
    b LoopForever
 8000e06:	e7fe      	b.n	8000e06 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e08:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e10:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e14:	08004b34 	.word	0x08004b34
  ldr r2, =_sbss
 8000e18:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e1c:	200001f4 	.word	0x200001f4

08000e20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e20:	e7fe      	b.n	8000e20 <ADC1_2_IRQHandler>
	...

08000e24 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <HAL_Init+0x28>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a07      	ldr	r2, [pc, #28]	; (8000e4c <HAL_Init+0x28>)
 8000e2e:	f043 0310 	orr.w	r3, r3, #16
 8000e32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e34:	2003      	movs	r0, #3
 8000e36:	f000 f94f 	bl	80010d8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f000 f808 	bl	8000e50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e40:	f7ff fe14 	bl	8000a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40022000 	.word	0x40022000

08000e50 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_InitTick+0x54>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_InitTick+0x58>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4619      	mov	r1, r3
 8000e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 f967 	bl	8001142 <HAL_SYSTICK_Config>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e00e      	b.n	8000e9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2b0f      	cmp	r3, #15
 8000e82:	d80a      	bhi.n	8000e9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e84:	2200      	movs	r2, #0
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8c:	f000 f92f 	bl	80010ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e90:	4a06      	ldr	r2, [pc, #24]	; (8000eac <HAL_InitTick+0x5c>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000e96:	2300      	movs	r3, #0
 8000e98:	e000      	b.n	8000e9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000000 	.word	0x20000000
 8000ea8:	20000008 	.word	0x20000008
 8000eac:	20000004 	.word	0x20000004

08000eb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x20>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_IncTick+0x24>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <HAL_IncTick+0x24>)
 8000ec2:	6013      	str	r3, [r2, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	200001e0 	.word	0x200001e0

08000ed8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return uwTick;  
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <HAL_GetTick+0x14>)
 8000ede:	681b      	ldr	r3, [r3, #0]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	200001e0 	.word	0x200001e0

08000ef0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef8:	f7ff ffee 	bl	8000ed8 <HAL_GetTick>
 8000efc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f08:	d005      	beq.n	8000f16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <HAL_Delay+0x44>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4413      	add	r3, r2
 8000f14:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f16:	bf00      	nop
 8000f18:	f7ff ffde 	bl	8000ed8 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d8f7      	bhi.n	8000f18 <HAL_Delay+0x28>
  {
  }
}
 8000f28:	bf00      	nop
 8000f2a:	bf00      	nop
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000008 	.word	0x20000008

08000f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <__NVIC_SetPriorityGrouping+0x44>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f54:	4013      	ands	r3, r2
 8000f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6a:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <__NVIC_SetPriorityGrouping+0x44>)
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	60d3      	str	r3, [r2, #12]
}
 8000f70:	bf00      	nop
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f84:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <__NVIC_GetPriorityGrouping+0x18>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	0a1b      	lsrs	r3, r3, #8
 8000f8a:	f003 0307 	and.w	r3, r3, #7
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	db0b      	blt.n	8000fc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	f003 021f 	and.w	r2, r3, #31
 8000fb4:	4907      	ldr	r1, [pc, #28]	; (8000fd4 <__NVIC_EnableIRQ+0x38>)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	095b      	lsrs	r3, r3, #5
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000e100 	.word	0xe000e100

08000fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	db0a      	blt.n	8001002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	490c      	ldr	r1, [pc, #48]	; (8001024 <__NVIC_SetPriority+0x4c>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	0112      	lsls	r2, r2, #4
 8000ff8:	b2d2      	uxtb	r2, r2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001000:	e00a      	b.n	8001018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4908      	ldr	r1, [pc, #32]	; (8001028 <__NVIC_SetPriority+0x50>)
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	f003 030f 	and.w	r3, r3, #15
 800100e:	3b04      	subs	r3, #4
 8001010:	0112      	lsls	r2, r2, #4
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	440b      	add	r3, r1
 8001016:	761a      	strb	r2, [r3, #24]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000e100 	.word	0xe000e100
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800102c:	b480      	push	{r7}
 800102e:	b089      	sub	sp, #36	; 0x24
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f1c3 0307 	rsb	r3, r3, #7
 8001046:	2b04      	cmp	r3, #4
 8001048:	bf28      	it	cs
 800104a:	2304      	movcs	r3, #4
 800104c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3304      	adds	r3, #4
 8001052:	2b06      	cmp	r3, #6
 8001054:	d902      	bls.n	800105c <NVIC_EncodePriority+0x30>
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3b03      	subs	r3, #3
 800105a:	e000      	b.n	800105e <NVIC_EncodePriority+0x32>
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	f04f 32ff 	mov.w	r2, #4294967295
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43da      	mvns	r2, r3
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	401a      	ands	r2, r3
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001074:	f04f 31ff 	mov.w	r1, #4294967295
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	fa01 f303 	lsl.w	r3, r1, r3
 800107e:	43d9      	mvns	r1, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	4313      	orrs	r3, r2
         );
}
 8001086:	4618      	mov	r0, r3
 8001088:	3724      	adds	r7, #36	; 0x24
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010a4:	d301      	bcc.n	80010aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010a6:	2301      	movs	r3, #1
 80010a8:	e00f      	b.n	80010ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010aa:	4a0a      	ldr	r2, [pc, #40]	; (80010d4 <SysTick_Config+0x40>)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b2:	210f      	movs	r1, #15
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295
 80010b8:	f7ff ff8e 	bl	8000fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <SysTick_Config+0x40>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c2:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <SysTick_Config+0x40>)
 80010c4:	2207      	movs	r2, #7
 80010c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	e000e010 	.word	0xe000e010

080010d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ff29 	bl	8000f38 <__NVIC_SetPriorityGrouping>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b086      	sub	sp, #24
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	4603      	mov	r3, r0
 80010f6:	60b9      	str	r1, [r7, #8]
 80010f8:	607a      	str	r2, [r7, #4]
 80010fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001100:	f7ff ff3e 	bl	8000f80 <__NVIC_GetPriorityGrouping>
 8001104:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	68b9      	ldr	r1, [r7, #8]
 800110a:	6978      	ldr	r0, [r7, #20]
 800110c:	f7ff ff8e 	bl	800102c <NVIC_EncodePriority>
 8001110:	4602      	mov	r2, r0
 8001112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001116:	4611      	mov	r1, r2
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff5d 	bl	8000fd8 <__NVIC_SetPriority>
}
 800111e:	bf00      	nop
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	4603      	mov	r3, r0
 800112e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff31 	bl	8000f9c <__NVIC_EnableIRQ>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff ffa2 	bl	8001094 <SysTick_Config>
 8001150:	4603      	mov	r3, r0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001168:	2b02      	cmp	r3, #2
 800116a:	d008      	beq.n	800117e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2204      	movs	r2, #4
 8001170:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e020      	b.n	80011c0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f022 020e 	bic.w	r2, r2, #14
 800118c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f022 0201 	bic.w	r2, r2, #1
 800119c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011a6:	2101      	movs	r1, #1
 80011a8:	fa01 f202 	lsl.w	r2, r1, r2
 80011ac:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2201      	movs	r2, #1
 80011b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2200      	movs	r2, #0
 80011ba:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011d4:	2300      	movs	r3, #0
 80011d6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d005      	beq.n	80011ee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2204      	movs	r2, #4
 80011e6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	73fb      	strb	r3, [r7, #15]
 80011ec:	e027      	b.n	800123e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f022 020e 	bic.w	r2, r2, #14
 80011fc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f022 0201 	bic.w	r2, r2, #1
 800120c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001216:	2101      	movs	r1, #1
 8001218:	fa01 f202 	lsl.w	r2, r1, r2
 800121c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2201      	movs	r2, #1
 8001222:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	4798      	blx	r3
    } 
  }
  return status;
 800123e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001248:	b480      	push	{r7}
 800124a:	b087      	sub	sp, #28
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001256:	e14e      	b.n	80014f6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	2101      	movs	r1, #1
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	fa01 f303 	lsl.w	r3, r1, r3
 8001264:	4013      	ands	r3, r2
 8001266:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2b00      	cmp	r3, #0
 800126c:	f000 8140 	beq.w	80014f0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d00b      	beq.n	8001290 <HAL_GPIO_Init+0x48>
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	2b02      	cmp	r3, #2
 800127e:	d007      	beq.n	8001290 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001284:	2b11      	cmp	r3, #17
 8001286:	d003      	beq.n	8001290 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2b12      	cmp	r3, #18
 800128e:	d130      	bne.n	80012f2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	2203      	movs	r2, #3
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4013      	ands	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	68da      	ldr	r2, [r3, #12]
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012c6:	2201      	movs	r2, #1
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	4013      	ands	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	091b      	lsrs	r3, r3, #4
 80012dc:	f003 0201 	and.w	r2, r3, #1
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	2203      	movs	r2, #3
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43db      	mvns	r3, r3
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4013      	ands	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b02      	cmp	r3, #2
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_Init+0xea>
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	2b12      	cmp	r3, #18
 8001330:	d123      	bne.n	800137a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	08da      	lsrs	r2, r3, #3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	3208      	adds	r2, #8
 800133a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800133e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	220f      	movs	r2, #15
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	4013      	ands	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	691a      	ldr	r2, [r3, #16]
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	f003 0307 	and.w	r3, r3, #7
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	4313      	orrs	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	08da      	lsrs	r2, r3, #3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3208      	adds	r2, #8
 8001374:	6939      	ldr	r1, [r7, #16]
 8001376:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	2203      	movs	r2, #3
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f003 0203 	and.w	r2, r3, #3
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f000 809a 	beq.w	80014f0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013bc:	4b55      	ldr	r3, [pc, #340]	; (8001514 <HAL_GPIO_Init+0x2cc>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	4a54      	ldr	r2, [pc, #336]	; (8001514 <HAL_GPIO_Init+0x2cc>)
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	6193      	str	r3, [r2, #24]
 80013c8:	4b52      	ldr	r3, [pc, #328]	; (8001514 <HAL_GPIO_Init+0x2cc>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013d4:	4a50      	ldr	r2, [pc, #320]	; (8001518 <HAL_GPIO_Init+0x2d0>)
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	089b      	lsrs	r3, r3, #2
 80013da:	3302      	adds	r3, #2
 80013dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	f003 0303 	and.w	r3, r3, #3
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	220f      	movs	r2, #15
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	4013      	ands	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013fe:	d013      	beq.n	8001428 <HAL_GPIO_Init+0x1e0>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a46      	ldr	r2, [pc, #280]	; (800151c <HAL_GPIO_Init+0x2d4>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d00d      	beq.n	8001424 <HAL_GPIO_Init+0x1dc>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a45      	ldr	r2, [pc, #276]	; (8001520 <HAL_GPIO_Init+0x2d8>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d007      	beq.n	8001420 <HAL_GPIO_Init+0x1d8>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a44      	ldr	r2, [pc, #272]	; (8001524 <HAL_GPIO_Init+0x2dc>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d101      	bne.n	800141c <HAL_GPIO_Init+0x1d4>
 8001418:	2303      	movs	r3, #3
 800141a:	e006      	b.n	800142a <HAL_GPIO_Init+0x1e2>
 800141c:	2305      	movs	r3, #5
 800141e:	e004      	b.n	800142a <HAL_GPIO_Init+0x1e2>
 8001420:	2302      	movs	r3, #2
 8001422:	e002      	b.n	800142a <HAL_GPIO_Init+0x1e2>
 8001424:	2301      	movs	r3, #1
 8001426:	e000      	b.n	800142a <HAL_GPIO_Init+0x1e2>
 8001428:	2300      	movs	r3, #0
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	f002 0203 	and.w	r2, r2, #3
 8001430:	0092      	lsls	r2, r2, #2
 8001432:	4093      	lsls	r3, r2
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4313      	orrs	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800143a:	4937      	ldr	r1, [pc, #220]	; (8001518 <HAL_GPIO_Init+0x2d0>)
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	089b      	lsrs	r3, r3, #2
 8001440:	3302      	adds	r3, #2
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001448:	4b37      	ldr	r3, [pc, #220]	; (8001528 <HAL_GPIO_Init+0x2e0>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	43db      	mvns	r3, r3
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	4313      	orrs	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800146c:	4a2e      	ldr	r2, [pc, #184]	; (8001528 <HAL_GPIO_Init+0x2e0>)
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001472:	4b2d      	ldr	r3, [pc, #180]	; (8001528 <HAL_GPIO_Init+0x2e0>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	43db      	mvns	r3, r3
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	4013      	ands	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4313      	orrs	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001496:	4a24      	ldr	r2, [pc, #144]	; (8001528 <HAL_GPIO_Init+0x2e0>)
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800149c:	4b22      	ldr	r3, [pc, #136]	; (8001528 <HAL_GPIO_Init+0x2e0>)
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	43db      	mvns	r3, r3
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	4013      	ands	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d003      	beq.n	80014c0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	4313      	orrs	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014c0:	4a19      	ldr	r2, [pc, #100]	; (8001528 <HAL_GPIO_Init+0x2e0>)
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014c6:	4b18      	ldr	r3, [pc, #96]	; (8001528 <HAL_GPIO_Init+0x2e0>)
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	43db      	mvns	r3, r3
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	4013      	ands	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014ea:	4a0f      	ldr	r2, [pc, #60]	; (8001528 <HAL_GPIO_Init+0x2e0>)
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	3301      	adds	r3, #1
 80014f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001500:	2b00      	cmp	r3, #0
 8001502:	f47f aea9 	bne.w	8001258 <HAL_GPIO_Init+0x10>
  }
}
 8001506:	bf00      	nop
 8001508:	bf00      	nop
 800150a:	371c      	adds	r7, #28
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	40021000 	.word	0x40021000
 8001518:	40010000 	.word	0x40010000
 800151c:	48000400 	.word	0x48000400
 8001520:	48000800 	.word	0x48000800
 8001524:	48000c00 	.word	0x48000c00
 8001528:	40010400 	.word	0x40010400

0800152c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	691a      	ldr	r2, [r3, #16]
 800153c:	887b      	ldrh	r3, [r7, #2]
 800153e:	4013      	ands	r3, r2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d002      	beq.n	800154a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001544:	2301      	movs	r3, #1
 8001546:	73fb      	strb	r3, [r7, #15]
 8001548:	e001      	b.n	800154e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800154a:	2300      	movs	r3, #0
 800154c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800154e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	807b      	strh	r3, [r7, #2]
 8001568:	4613      	mov	r3, r2
 800156a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800156c:	787b      	ldrb	r3, [r7, #1]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001572:	887a      	ldrh	r2, [r7, #2]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001578:	e002      	b.n	8001580 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800157a:	887a      	ldrh	r2, [r7, #2]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001596:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001598:	695a      	ldr	r2, [r3, #20]
 800159a:	88fb      	ldrh	r3, [r7, #6]
 800159c:	4013      	ands	r3, r2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d006      	beq.n	80015b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015a2:	4a05      	ldr	r2, [pc, #20]	; (80015b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015a4:	88fb      	ldrh	r3, [r7, #6]
 80015a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015a8:	88fb      	ldrh	r3, [r7, #6]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 f806 	bl	80015bc <HAL_GPIO_EXTI_Callback>
  }
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40010400 	.word	0x40010400

080015bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80015da:	af00      	add	r7, sp, #0
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d102      	bne.n	80015ee <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	f000 bef4 	b.w	80023d6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f000 816a 	beq.w	80018d2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80015fe:	4bb3      	ldr	r3, [pc, #716]	; (80018cc <HAL_RCC_OscConfig+0x2f8>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f003 030c 	and.w	r3, r3, #12
 8001606:	2b04      	cmp	r3, #4
 8001608:	d00c      	beq.n	8001624 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800160a:	4bb0      	ldr	r3, [pc, #704]	; (80018cc <HAL_RCC_OscConfig+0x2f8>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 030c 	and.w	r3, r3, #12
 8001612:	2b08      	cmp	r3, #8
 8001614:	d159      	bne.n	80016ca <HAL_RCC_OscConfig+0xf6>
 8001616:	4bad      	ldr	r3, [pc, #692]	; (80018cc <HAL_RCC_OscConfig+0x2f8>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800161e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001622:	d152      	bne.n	80016ca <HAL_RCC_OscConfig+0xf6>
 8001624:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001628:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001630:	fa93 f3a3 	rbit	r3, r3
 8001634:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001638:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800163c:	fab3 f383 	clz	r3, r3
 8001640:	b2db      	uxtb	r3, r3
 8001642:	095b      	lsrs	r3, r3, #5
 8001644:	b2db      	uxtb	r3, r3
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b01      	cmp	r3, #1
 800164e:	d102      	bne.n	8001656 <HAL_RCC_OscConfig+0x82>
 8001650:	4b9e      	ldr	r3, [pc, #632]	; (80018cc <HAL_RCC_OscConfig+0x2f8>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	e015      	b.n	8001682 <HAL_RCC_OscConfig+0xae>
 8001656:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800165a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001662:	fa93 f3a3 	rbit	r3, r3
 8001666:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800166a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800166e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001672:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001676:	fa93 f3a3 	rbit	r3, r3
 800167a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800167e:	4b93      	ldr	r3, [pc, #588]	; (80018cc <HAL_RCC_OscConfig+0x2f8>)
 8001680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001682:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001686:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800168a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800168e:	fa92 f2a2 	rbit	r2, r2
 8001692:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001696:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800169a:	fab2 f282 	clz	r2, r2
 800169e:	b2d2      	uxtb	r2, r2
 80016a0:	f042 0220 	orr.w	r2, r2, #32
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	f002 021f 	and.w	r2, r2, #31
 80016aa:	2101      	movs	r1, #1
 80016ac:	fa01 f202 	lsl.w	r2, r1, r2
 80016b0:	4013      	ands	r3, r2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f000 810c 	beq.w	80018d0 <HAL_RCC_OscConfig+0x2fc>
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f040 8106 	bne.w	80018d0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	f000 be86 	b.w	80023d6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d4:	d106      	bne.n	80016e4 <HAL_RCC_OscConfig+0x110>
 80016d6:	4b7d      	ldr	r3, [pc, #500]	; (80018cc <HAL_RCC_OscConfig+0x2f8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a7c      	ldr	r2, [pc, #496]	; (80018cc <HAL_RCC_OscConfig+0x2f8>)
 80016dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	e030      	b.n	8001746 <HAL_RCC_OscConfig+0x172>
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d10c      	bne.n	8001708 <HAL_RCC_OscConfig+0x134>
 80016ee:	4b77      	ldr	r3, [pc, #476]	; (80018cc <HAL_RCC_OscConfig+0x2f8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a76      	ldr	r2, [pc, #472]	; (80018cc <HAL_RCC_OscConfig+0x2f8>)
 80016f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	4b74      	ldr	r3, [pc, #464]	; (80018cc <HAL_RCC_OscConfig+0x2f8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a73      	ldr	r2, [pc, #460]	; (80018cc <HAL_RCC_OscConfig+0x2f8>)
 8001700:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001704:	6013      	str	r3, [r2, #0]
 8001706:	e01e      	b.n	8001746 <HAL_RCC_OscConfig+0x172>
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001712:	d10c      	bne.n	800172e <HAL_RCC_OscConfig+0x15a>
 8001714:	4b6d      	ldr	r3, [pc, #436]	; (80018cc <HAL_RCC_OscConfig+0x2f8>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a6c      	ldr	r2, [pc, #432]	; (80018cc <HAL_RCC_OscConfig+0x2f8>)
 800171a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	4b6a      	ldr	r3, [pc, #424]	; (80018cc <HAL_RCC_OscConfig+0x2f8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a69      	ldr	r2, [pc, #420]	; (80018cc <HAL_RCC_OscConfig+0x2f8>)
 8001726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172a:	6013      	str	r3, [r2, #0]
 800172c:	e00b      	b.n	8001746 <HAL_RCC_OscConfig+0x172>
 800172e:	4b67      	ldr	r3, [pc, #412]	; (80018cc <HAL_RCC_OscConfig+0x2f8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a66      	ldr	r2, [pc, #408]	; (80018cc <HAL_RCC_OscConfig+0x2f8>)
 8001734:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	4b64      	ldr	r3, [pc, #400]	; (80018cc <HAL_RCC_OscConfig+0x2f8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a63      	ldr	r2, [pc, #396]	; (80018cc <HAL_RCC_OscConfig+0x2f8>)
 8001740:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001744:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001746:	4b61      	ldr	r3, [pc, #388]	; (80018cc <HAL_RCC_OscConfig+0x2f8>)
 8001748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174a:	f023 020f 	bic.w	r2, r3, #15
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	495d      	ldr	r1, [pc, #372]	; (80018cc <HAL_RCC_OscConfig+0x2f8>)
 8001756:	4313      	orrs	r3, r2
 8001758:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d059      	beq.n	8001818 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001764:	f7ff fbb8 	bl	8000ed8 <HAL_GetTick>
 8001768:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176c:	e00a      	b.n	8001784 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800176e:	f7ff fbb3 	bl	8000ed8 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b64      	cmp	r3, #100	; 0x64
 800177c:	d902      	bls.n	8001784 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	f000 be29 	b.w	80023d6 <HAL_RCC_OscConfig+0xe02>
 8001784:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001788:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001790:	fa93 f3a3 	rbit	r3, r3
 8001794:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001798:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179c:	fab3 f383 	clz	r3, r3
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	095b      	lsrs	r3, r3, #5
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d102      	bne.n	80017b6 <HAL_RCC_OscConfig+0x1e2>
 80017b0:	4b46      	ldr	r3, [pc, #280]	; (80018cc <HAL_RCC_OscConfig+0x2f8>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	e015      	b.n	80017e2 <HAL_RCC_OscConfig+0x20e>
 80017b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017ba:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017be:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80017c2:	fa93 f3a3 	rbit	r3, r3
 80017c6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80017ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017ce:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80017d2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80017d6:	fa93 f3a3 	rbit	r3, r3
 80017da:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80017de:	4b3b      	ldr	r3, [pc, #236]	; (80018cc <HAL_RCC_OscConfig+0x2f8>)
 80017e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017e6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80017ea:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80017ee:	fa92 f2a2 	rbit	r2, r2
 80017f2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80017f6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80017fa:	fab2 f282 	clz	r2, r2
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	f042 0220 	orr.w	r2, r2, #32
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	f002 021f 	and.w	r2, r2, #31
 800180a:	2101      	movs	r1, #1
 800180c:	fa01 f202 	lsl.w	r2, r1, r2
 8001810:	4013      	ands	r3, r2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0ab      	beq.n	800176e <HAL_RCC_OscConfig+0x19a>
 8001816:	e05c      	b.n	80018d2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001818:	f7ff fb5e 	bl	8000ed8 <HAL_GetTick>
 800181c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001820:	e00a      	b.n	8001838 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001822:	f7ff fb59 	bl	8000ed8 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b64      	cmp	r3, #100	; 0x64
 8001830:	d902      	bls.n	8001838 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	f000 bdcf 	b.w	80023d6 <HAL_RCC_OscConfig+0xe02>
 8001838:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800183c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001840:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001844:	fa93 f3a3 	rbit	r3, r3
 8001848:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800184c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001850:	fab3 f383 	clz	r3, r3
 8001854:	b2db      	uxtb	r3, r3
 8001856:	095b      	lsrs	r3, r3, #5
 8001858:	b2db      	uxtb	r3, r3
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b01      	cmp	r3, #1
 8001862:	d102      	bne.n	800186a <HAL_RCC_OscConfig+0x296>
 8001864:	4b19      	ldr	r3, [pc, #100]	; (80018cc <HAL_RCC_OscConfig+0x2f8>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	e015      	b.n	8001896 <HAL_RCC_OscConfig+0x2c2>
 800186a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800186e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001872:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001876:	fa93 f3a3 	rbit	r3, r3
 800187a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800187e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001882:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001886:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800188a:	fa93 f3a3 	rbit	r3, r3
 800188e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001892:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <HAL_RCC_OscConfig+0x2f8>)
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001896:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800189a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800189e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80018a2:	fa92 f2a2 	rbit	r2, r2
 80018a6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80018aa:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80018ae:	fab2 f282 	clz	r2, r2
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	f042 0220 	orr.w	r2, r2, #32
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	f002 021f 	and.w	r2, r2, #31
 80018be:	2101      	movs	r1, #1
 80018c0:	fa01 f202 	lsl.w	r2, r1, r2
 80018c4:	4013      	ands	r3, r2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1ab      	bne.n	8001822 <HAL_RCC_OscConfig+0x24e>
 80018ca:	e002      	b.n	80018d2 <HAL_RCC_OscConfig+0x2fe>
 80018cc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d2:	1d3b      	adds	r3, r7, #4
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 816f 	beq.w	8001bc0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80018e2:	4bd0      	ldr	r3, [pc, #832]	; (8001c24 <HAL_RCC_OscConfig+0x650>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 030c 	and.w	r3, r3, #12
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00b      	beq.n	8001906 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80018ee:	4bcd      	ldr	r3, [pc, #820]	; (8001c24 <HAL_RCC_OscConfig+0x650>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 030c 	and.w	r3, r3, #12
 80018f6:	2b08      	cmp	r3, #8
 80018f8:	d16c      	bne.n	80019d4 <HAL_RCC_OscConfig+0x400>
 80018fa:	4bca      	ldr	r3, [pc, #808]	; (8001c24 <HAL_RCC_OscConfig+0x650>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d166      	bne.n	80019d4 <HAL_RCC_OscConfig+0x400>
 8001906:	2302      	movs	r3, #2
 8001908:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001910:	fa93 f3a3 	rbit	r3, r3
 8001914:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001918:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800191c:	fab3 f383 	clz	r3, r3
 8001920:	b2db      	uxtb	r3, r3
 8001922:	095b      	lsrs	r3, r3, #5
 8001924:	b2db      	uxtb	r3, r3
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	b2db      	uxtb	r3, r3
 800192c:	2b01      	cmp	r3, #1
 800192e:	d102      	bne.n	8001936 <HAL_RCC_OscConfig+0x362>
 8001930:	4bbc      	ldr	r3, [pc, #752]	; (8001c24 <HAL_RCC_OscConfig+0x650>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	e013      	b.n	800195e <HAL_RCC_OscConfig+0x38a>
 8001936:	2302      	movs	r3, #2
 8001938:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001940:	fa93 f3a3 	rbit	r3, r3
 8001944:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001948:	2302      	movs	r3, #2
 800194a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800194e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001952:	fa93 f3a3 	rbit	r3, r3
 8001956:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800195a:	4bb2      	ldr	r3, [pc, #712]	; (8001c24 <HAL_RCC_OscConfig+0x650>)
 800195c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195e:	2202      	movs	r2, #2
 8001960:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001964:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001968:	fa92 f2a2 	rbit	r2, r2
 800196c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001970:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001974:	fab2 f282 	clz	r2, r2
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	f042 0220 	orr.w	r2, r2, #32
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	f002 021f 	and.w	r2, r2, #31
 8001984:	2101      	movs	r1, #1
 8001986:	fa01 f202 	lsl.w	r2, r1, r2
 800198a:	4013      	ands	r3, r2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d007      	beq.n	80019a0 <HAL_RCC_OscConfig+0x3cc>
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d002      	beq.n	80019a0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	f000 bd1b 	b.w	80023d6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a0:	4ba0      	ldr	r3, [pc, #640]	; (8001c24 <HAL_RCC_OscConfig+0x650>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019a8:	1d3b      	adds	r3, r7, #4
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	21f8      	movs	r1, #248	; 0xf8
 80019b0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80019b8:	fa91 f1a1 	rbit	r1, r1
 80019bc:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80019c0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80019c4:	fab1 f181 	clz	r1, r1
 80019c8:	b2c9      	uxtb	r1, r1
 80019ca:	408b      	lsls	r3, r1
 80019cc:	4995      	ldr	r1, [pc, #596]	; (8001c24 <HAL_RCC_OscConfig+0x650>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019d2:	e0f5      	b.n	8001bc0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 8085 	beq.w	8001aea <HAL_RCC_OscConfig+0x516>
 80019e0:	2301      	movs	r3, #1
 80019e2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80019ea:	fa93 f3a3 	rbit	r3, r3
 80019ee:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80019f2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019f6:	fab3 f383 	clz	r3, r3
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a00:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	461a      	mov	r2, r3
 8001a08:	2301      	movs	r3, #1
 8001a0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0c:	f7ff fa64 	bl	8000ed8 <HAL_GetTick>
 8001a10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a14:	e00a      	b.n	8001a2c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a16:	f7ff fa5f 	bl	8000ed8 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d902      	bls.n	8001a2c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	f000 bcd5 	b.w	80023d6 <HAL_RCC_OscConfig+0xe02>
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a32:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001a36:	fa93 f3a3 	rbit	r3, r3
 8001a3a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001a3e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a42:	fab3 f383 	clz	r3, r3
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	095b      	lsrs	r3, r3, #5
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d102      	bne.n	8001a5c <HAL_RCC_OscConfig+0x488>
 8001a56:	4b73      	ldr	r3, [pc, #460]	; (8001c24 <HAL_RCC_OscConfig+0x650>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	e013      	b.n	8001a84 <HAL_RCC_OscConfig+0x4b0>
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a62:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001a66:	fa93 f3a3 	rbit	r3, r3
 8001a6a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001a6e:	2302      	movs	r3, #2
 8001a70:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001a74:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001a78:	fa93 f3a3 	rbit	r3, r3
 8001a7c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001a80:	4b68      	ldr	r3, [pc, #416]	; (8001c24 <HAL_RCC_OscConfig+0x650>)
 8001a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a84:	2202      	movs	r2, #2
 8001a86:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001a8a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001a8e:	fa92 f2a2 	rbit	r2, r2
 8001a92:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001a96:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001a9a:	fab2 f282 	clz	r2, r2
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	f042 0220 	orr.w	r2, r2, #32
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	f002 021f 	and.w	r2, r2, #31
 8001aaa:	2101      	movs	r1, #1
 8001aac:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d0af      	beq.n	8001a16 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab6:	4b5b      	ldr	r3, [pc, #364]	; (8001c24 <HAL_RCC_OscConfig+0x650>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	21f8      	movs	r1, #248	; 0xf8
 8001ac6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aca:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001ace:	fa91 f1a1 	rbit	r1, r1
 8001ad2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001ad6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001ada:	fab1 f181 	clz	r1, r1
 8001ade:	b2c9      	uxtb	r1, r1
 8001ae0:	408b      	lsls	r3, r1
 8001ae2:	4950      	ldr	r1, [pc, #320]	; (8001c24 <HAL_RCC_OscConfig+0x650>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	600b      	str	r3, [r1, #0]
 8001ae8:	e06a      	b.n	8001bc0 <HAL_RCC_OscConfig+0x5ec>
 8001aea:	2301      	movs	r3, #1
 8001aec:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001af4:	fa93 f3a3 	rbit	r3, r3
 8001af8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001afc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b00:	fab3 f383 	clz	r3, r3
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b0a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	461a      	mov	r2, r3
 8001b12:	2300      	movs	r3, #0
 8001b14:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b16:	f7ff f9df 	bl	8000ed8 <HAL_GetTick>
 8001b1a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b1e:	e00a      	b.n	8001b36 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b20:	f7ff f9da 	bl	8000ed8 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d902      	bls.n	8001b36 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	f000 bc50 	b.w	80023d6 <HAL_RCC_OscConfig+0xe02>
 8001b36:	2302      	movs	r3, #2
 8001b38:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001b40:	fa93 f3a3 	rbit	r3, r3
 8001b44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001b48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b4c:	fab3 f383 	clz	r3, r3
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	095b      	lsrs	r3, r3, #5
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d102      	bne.n	8001b66 <HAL_RCC_OscConfig+0x592>
 8001b60:	4b30      	ldr	r3, [pc, #192]	; (8001c24 <HAL_RCC_OscConfig+0x650>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	e013      	b.n	8001b8e <HAL_RCC_OscConfig+0x5ba>
 8001b66:	2302      	movs	r3, #2
 8001b68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001b70:	fa93 f3a3 	rbit	r3, r3
 8001b74:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001b78:	2302      	movs	r3, #2
 8001b7a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001b7e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001b82:	fa93 f3a3 	rbit	r3, r3
 8001b86:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001b8a:	4b26      	ldr	r3, [pc, #152]	; (8001c24 <HAL_RCC_OscConfig+0x650>)
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8e:	2202      	movs	r2, #2
 8001b90:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001b94:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001b98:	fa92 f2a2 	rbit	r2, r2
 8001b9c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001ba0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001ba4:	fab2 f282 	clz	r2, r2
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	f042 0220 	orr.w	r2, r2, #32
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	f002 021f 	and.w	r2, r2, #31
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bba:	4013      	ands	r3, r2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1af      	bne.n	8001b20 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0308 	and.w	r3, r3, #8
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f000 80da 	beq.w	8001d84 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bd0:	1d3b      	adds	r3, r7, #4
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d069      	beq.n	8001cae <HAL_RCC_OscConfig+0x6da>
 8001bda:	2301      	movs	r3, #1
 8001bdc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001be4:	fa93 f3a3 	rbit	r3, r3
 8001be8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001bec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bf0:	fab3 f383 	clz	r3, r3
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <HAL_RCC_OscConfig+0x654>)
 8001bfa:	4413      	add	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	461a      	mov	r2, r3
 8001c00:	2301      	movs	r3, #1
 8001c02:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c04:	f7ff f968 	bl	8000ed8 <HAL_GetTick>
 8001c08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c0c:	e00e      	b.n	8001c2c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c0e:	f7ff f963 	bl	8000ed8 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d906      	bls.n	8001c2c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e3d9      	b.n	80023d6 <HAL_RCC_OscConfig+0xe02>
 8001c22:	bf00      	nop
 8001c24:	40021000 	.word	0x40021000
 8001c28:	10908120 	.word	0x10908120
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c32:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001c36:	fa93 f3a3 	rbit	r3, r3
 8001c3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001c3e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001c42:	2202      	movs	r2, #2
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	fa93 f2a3 	rbit	r2, r3
 8001c50:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	fa93 f2a3 	rbit	r2, r3
 8001c68:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001c6c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c6e:	4ba5      	ldr	r3, [pc, #660]	; (8001f04 <HAL_RCC_OscConfig+0x930>)
 8001c70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c72:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001c76:	2102      	movs	r1, #2
 8001c78:	6019      	str	r1, [r3, #0]
 8001c7a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	fa93 f1a3 	rbit	r1, r3
 8001c84:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001c88:	6019      	str	r1, [r3, #0]
  return result;
 8001c8a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	fab3 f383 	clz	r3, r3
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	f003 031f 	and.w	r3, r3, #31
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0b0      	beq.n	8001c0e <HAL_RCC_OscConfig+0x63a>
 8001cac:	e06a      	b.n	8001d84 <HAL_RCC_OscConfig+0x7b0>
 8001cae:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	fa93 f2a3 	rbit	r2, r3
 8001cc0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001cc4:	601a      	str	r2, [r3, #0]
  return result;
 8001cc6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001cca:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ccc:	fab3 f383 	clz	r3, r3
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	4b8c      	ldr	r3, [pc, #560]	; (8001f08 <HAL_RCC_OscConfig+0x934>)
 8001cd6:	4413      	add	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	461a      	mov	r2, r3
 8001cdc:	2300      	movs	r3, #0
 8001cde:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce0:	f7ff f8fa 	bl	8000ed8 <HAL_GetTick>
 8001ce4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce8:	e009      	b.n	8001cfe <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cea:	f7ff f8f5 	bl	8000ed8 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e36b      	b.n	80023d6 <HAL_RCC_OscConfig+0xe02>
 8001cfe:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001d02:	2202      	movs	r2, #2
 8001d04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d06:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	fa93 f2a3 	rbit	r2, r3
 8001d10:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	fa93 f2a3 	rbit	r2, r3
 8001d28:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001d32:	2202      	movs	r2, #2
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	fa93 f2a3 	rbit	r2, r3
 8001d40:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d44:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d46:	4b6f      	ldr	r3, [pc, #444]	; (8001f04 <HAL_RCC_OscConfig+0x930>)
 8001d48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d4a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001d4e:	2102      	movs	r1, #2
 8001d50:	6019      	str	r1, [r3, #0]
 8001d52:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	fa93 f1a3 	rbit	r1, r3
 8001d5c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d60:	6019      	str	r1, [r3, #0]
  return result;
 8001d62:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	fab3 f383 	clz	r3, r3
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	f003 031f 	and.w	r3, r3, #31
 8001d78:	2101      	movs	r1, #1
 8001d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1b2      	bne.n	8001cea <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d84:	1d3b      	adds	r3, r7, #4
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0304 	and.w	r3, r3, #4
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f000 8158 	beq.w	8002044 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d94:	2300      	movs	r3, #0
 8001d96:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d9a:	4b5a      	ldr	r3, [pc, #360]	; (8001f04 <HAL_RCC_OscConfig+0x930>)
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d112      	bne.n	8001dcc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001da6:	4b57      	ldr	r3, [pc, #348]	; (8001f04 <HAL_RCC_OscConfig+0x930>)
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	4a56      	ldr	r2, [pc, #344]	; (8001f04 <HAL_RCC_OscConfig+0x930>)
 8001dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db0:	61d3      	str	r3, [r2, #28]
 8001db2:	4b54      	ldr	r3, [pc, #336]	; (8001f04 <HAL_RCC_OscConfig+0x930>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001dba:	f107 0308 	add.w	r3, r7, #8
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	f107 0308 	add.w	r3, r7, #8
 8001dc4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dcc:	4b4f      	ldr	r3, [pc, #316]	; (8001f0c <HAL_RCC_OscConfig+0x938>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d11a      	bne.n	8001e0e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dd8:	4b4c      	ldr	r3, [pc, #304]	; (8001f0c <HAL_RCC_OscConfig+0x938>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a4b      	ldr	r2, [pc, #300]	; (8001f0c <HAL_RCC_OscConfig+0x938>)
 8001dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001de4:	f7ff f878 	bl	8000ed8 <HAL_GetTick>
 8001de8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dec:	e009      	b.n	8001e02 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dee:	f7ff f873 	bl	8000ed8 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b64      	cmp	r3, #100	; 0x64
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e2e9      	b.n	80023d6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e02:	4b42      	ldr	r3, [pc, #264]	; (8001f0c <HAL_RCC_OscConfig+0x938>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0ef      	beq.n	8001dee <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e0e:	1d3b      	adds	r3, r7, #4
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d106      	bne.n	8001e26 <HAL_RCC_OscConfig+0x852>
 8001e18:	4b3a      	ldr	r3, [pc, #232]	; (8001f04 <HAL_RCC_OscConfig+0x930>)
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	4a39      	ldr	r2, [pc, #228]	; (8001f04 <HAL_RCC_OscConfig+0x930>)
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	6213      	str	r3, [r2, #32]
 8001e24:	e02f      	b.n	8001e86 <HAL_RCC_OscConfig+0x8b2>
 8001e26:	1d3b      	adds	r3, r7, #4
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10c      	bne.n	8001e4a <HAL_RCC_OscConfig+0x876>
 8001e30:	4b34      	ldr	r3, [pc, #208]	; (8001f04 <HAL_RCC_OscConfig+0x930>)
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	4a33      	ldr	r2, [pc, #204]	; (8001f04 <HAL_RCC_OscConfig+0x930>)
 8001e36:	f023 0301 	bic.w	r3, r3, #1
 8001e3a:	6213      	str	r3, [r2, #32]
 8001e3c:	4b31      	ldr	r3, [pc, #196]	; (8001f04 <HAL_RCC_OscConfig+0x930>)
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	4a30      	ldr	r2, [pc, #192]	; (8001f04 <HAL_RCC_OscConfig+0x930>)
 8001e42:	f023 0304 	bic.w	r3, r3, #4
 8001e46:	6213      	str	r3, [r2, #32]
 8001e48:	e01d      	b.n	8001e86 <HAL_RCC_OscConfig+0x8b2>
 8001e4a:	1d3b      	adds	r3, r7, #4
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	2b05      	cmp	r3, #5
 8001e52:	d10c      	bne.n	8001e6e <HAL_RCC_OscConfig+0x89a>
 8001e54:	4b2b      	ldr	r3, [pc, #172]	; (8001f04 <HAL_RCC_OscConfig+0x930>)
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	4a2a      	ldr	r2, [pc, #168]	; (8001f04 <HAL_RCC_OscConfig+0x930>)
 8001e5a:	f043 0304 	orr.w	r3, r3, #4
 8001e5e:	6213      	str	r3, [r2, #32]
 8001e60:	4b28      	ldr	r3, [pc, #160]	; (8001f04 <HAL_RCC_OscConfig+0x930>)
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	4a27      	ldr	r2, [pc, #156]	; (8001f04 <HAL_RCC_OscConfig+0x930>)
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	6213      	str	r3, [r2, #32]
 8001e6c:	e00b      	b.n	8001e86 <HAL_RCC_OscConfig+0x8b2>
 8001e6e:	4b25      	ldr	r3, [pc, #148]	; (8001f04 <HAL_RCC_OscConfig+0x930>)
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	4a24      	ldr	r2, [pc, #144]	; (8001f04 <HAL_RCC_OscConfig+0x930>)
 8001e74:	f023 0301 	bic.w	r3, r3, #1
 8001e78:	6213      	str	r3, [r2, #32]
 8001e7a:	4b22      	ldr	r3, [pc, #136]	; (8001f04 <HAL_RCC_OscConfig+0x930>)
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	4a21      	ldr	r2, [pc, #132]	; (8001f04 <HAL_RCC_OscConfig+0x930>)
 8001e80:	f023 0304 	bic.w	r3, r3, #4
 8001e84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e86:	1d3b      	adds	r3, r7, #4
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d06b      	beq.n	8001f68 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e90:	f7ff f822 	bl	8000ed8 <HAL_GetTick>
 8001e94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e98:	e00b      	b.n	8001eb2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e9a:	f7ff f81d 	bl	8000ed8 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e291      	b.n	80023d6 <HAL_RCC_OscConfig+0xe02>
 8001eb2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eba:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	fa93 f2a3 	rbit	r2, r3
 8001ec4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001ece:	2202      	movs	r2, #2
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	fa93 f2a3 	rbit	r2, r3
 8001edc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ee0:	601a      	str	r2, [r3, #0]
  return result;
 8001ee2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ee6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee8:	fab3 f383 	clz	r3, r3
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	095b      	lsrs	r3, r3, #5
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	f043 0302 	orr.w	r3, r3, #2
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d109      	bne.n	8001f10 <HAL_RCC_OscConfig+0x93c>
 8001efc:	4b01      	ldr	r3, [pc, #4]	; (8001f04 <HAL_RCC_OscConfig+0x930>)
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	e014      	b.n	8001f2c <HAL_RCC_OscConfig+0x958>
 8001f02:	bf00      	nop
 8001f04:	40021000 	.word	0x40021000
 8001f08:	10908120 	.word	0x10908120
 8001f0c:	40007000 	.word	0x40007000
 8001f10:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001f14:	2202      	movs	r2, #2
 8001f16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f18:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	fa93 f2a3 	rbit	r2, r3
 8001f22:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	4bbb      	ldr	r3, [pc, #748]	; (8002218 <HAL_RCC_OscConfig+0xc44>)
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001f30:	2102      	movs	r1, #2
 8001f32:	6011      	str	r1, [r2, #0]
 8001f34:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001f38:	6812      	ldr	r2, [r2, #0]
 8001f3a:	fa92 f1a2 	rbit	r1, r2
 8001f3e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001f42:	6011      	str	r1, [r2, #0]
  return result;
 8001f44:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001f48:	6812      	ldr	r2, [r2, #0]
 8001f4a:	fab2 f282 	clz	r2, r2
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	f002 021f 	and.w	r2, r2, #31
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f60:	4013      	ands	r3, r2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d099      	beq.n	8001e9a <HAL_RCC_OscConfig+0x8c6>
 8001f66:	e063      	b.n	8002030 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f68:	f7fe ffb6 	bl	8000ed8 <HAL_GetTick>
 8001f6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f70:	e00b      	b.n	8001f8a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f72:	f7fe ffb1 	bl	8000ed8 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e225      	b.n	80023d6 <HAL_RCC_OscConfig+0xe02>
 8001f8a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001f8e:	2202      	movs	r2, #2
 8001f90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f92:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	fa93 f2a3 	rbit	r2, r3
 8001f9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	fa93 f2a3 	rbit	r2, r3
 8001fb4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001fb8:	601a      	str	r2, [r3, #0]
  return result;
 8001fba:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001fbe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc0:	fab3 f383 	clz	r3, r3
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	095b      	lsrs	r3, r3, #5
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	f043 0302 	orr.w	r3, r3, #2
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d102      	bne.n	8001fda <HAL_RCC_OscConfig+0xa06>
 8001fd4:	4b90      	ldr	r3, [pc, #576]	; (8002218 <HAL_RCC_OscConfig+0xc44>)
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	e00d      	b.n	8001ff6 <HAL_RCC_OscConfig+0xa22>
 8001fda:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001fde:	2202      	movs	r2, #2
 8001fe0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	fa93 f2a3 	rbit	r2, r3
 8001fec:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	4b89      	ldr	r3, [pc, #548]	; (8002218 <HAL_RCC_OscConfig+0xc44>)
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001ffa:	2102      	movs	r1, #2
 8001ffc:	6011      	str	r1, [r2, #0]
 8001ffe:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002002:	6812      	ldr	r2, [r2, #0]
 8002004:	fa92 f1a2 	rbit	r1, r2
 8002008:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800200c:	6011      	str	r1, [r2, #0]
  return result;
 800200e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002012:	6812      	ldr	r2, [r2, #0]
 8002014:	fab2 f282 	clz	r2, r2
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	f002 021f 	and.w	r2, r2, #31
 8002024:	2101      	movs	r1, #1
 8002026:	fa01 f202 	lsl.w	r2, r1, r2
 800202a:	4013      	ands	r3, r2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1a0      	bne.n	8001f72 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002030:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002034:	2b01      	cmp	r3, #1
 8002036:	d105      	bne.n	8002044 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002038:	4b77      	ldr	r3, [pc, #476]	; (8002218 <HAL_RCC_OscConfig+0xc44>)
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	4a76      	ldr	r2, [pc, #472]	; (8002218 <HAL_RCC_OscConfig+0xc44>)
 800203e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002042:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002044:	1d3b      	adds	r3, r7, #4
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 81c2 	beq.w	80023d4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002050:	4b71      	ldr	r3, [pc, #452]	; (8002218 <HAL_RCC_OscConfig+0xc44>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 030c 	and.w	r3, r3, #12
 8002058:	2b08      	cmp	r3, #8
 800205a:	f000 819c 	beq.w	8002396 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800205e:	1d3b      	adds	r3, r7, #4
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	69db      	ldr	r3, [r3, #28]
 8002064:	2b02      	cmp	r3, #2
 8002066:	f040 8114 	bne.w	8002292 <HAL_RCC_OscConfig+0xcbe>
 800206a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800206e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002072:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002074:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	fa93 f2a3 	rbit	r2, r3
 800207e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002082:	601a      	str	r2, [r3, #0]
  return result;
 8002084:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002088:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800208a:	fab3 f383 	clz	r3, r3
 800208e:	b2db      	uxtb	r3, r3
 8002090:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002094:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	461a      	mov	r2, r3
 800209c:	2300      	movs	r3, #0
 800209e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a0:	f7fe ff1a 	bl	8000ed8 <HAL_GetTick>
 80020a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020a8:	e009      	b.n	80020be <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020aa:	f7fe ff15 	bl	8000ed8 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e18b      	b.n	80023d6 <HAL_RCC_OscConfig+0xe02>
 80020be:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80020c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	fa93 f2a3 	rbit	r2, r3
 80020d2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80020d6:	601a      	str	r2, [r3, #0]
  return result;
 80020d8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80020dc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020de:	fab3 f383 	clz	r3, r3
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	095b      	lsrs	r3, r3, #5
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d102      	bne.n	80020f8 <HAL_RCC_OscConfig+0xb24>
 80020f2:	4b49      	ldr	r3, [pc, #292]	; (8002218 <HAL_RCC_OscConfig+0xc44>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	e01b      	b.n	8002130 <HAL_RCC_OscConfig+0xb5c>
 80020f8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80020fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002100:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002102:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	fa93 f2a3 	rbit	r2, r3
 800210c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002116:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	fa93 f2a3 	rbit	r2, r3
 8002126:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	4b3a      	ldr	r3, [pc, #232]	; (8002218 <HAL_RCC_OscConfig+0xc44>)
 800212e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002130:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002134:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002138:	6011      	str	r1, [r2, #0]
 800213a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800213e:	6812      	ldr	r2, [r2, #0]
 8002140:	fa92 f1a2 	rbit	r1, r2
 8002144:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002148:	6011      	str	r1, [r2, #0]
  return result;
 800214a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800214e:	6812      	ldr	r2, [r2, #0]
 8002150:	fab2 f282 	clz	r2, r2
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	f042 0220 	orr.w	r2, r2, #32
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	f002 021f 	and.w	r2, r2, #31
 8002160:	2101      	movs	r1, #1
 8002162:	fa01 f202 	lsl.w	r2, r1, r2
 8002166:	4013      	ands	r3, r2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d19e      	bne.n	80020aa <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800216c:	4b2a      	ldr	r3, [pc, #168]	; (8002218 <HAL_RCC_OscConfig+0xc44>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002174:	1d3b      	adds	r3, r7, #4
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800217a:	1d3b      	adds	r3, r7, #4
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	430b      	orrs	r3, r1
 8002182:	4925      	ldr	r1, [pc, #148]	; (8002218 <HAL_RCC_OscConfig+0xc44>)
 8002184:	4313      	orrs	r3, r2
 8002186:	604b      	str	r3, [r1, #4]
 8002188:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800218c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002190:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002192:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	fa93 f2a3 	rbit	r2, r3
 800219c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021a0:	601a      	str	r2, [r3, #0]
  return result;
 80021a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021a6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021a8:	fab3 f383 	clz	r3, r3
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021b2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	461a      	mov	r2, r3
 80021ba:	2301      	movs	r3, #1
 80021bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021be:	f7fe fe8b 	bl	8000ed8 <HAL_GetTick>
 80021c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021c6:	e009      	b.n	80021dc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021c8:	f7fe fe86 	bl	8000ed8 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e0fc      	b.n	80023d6 <HAL_RCC_OscConfig+0xe02>
 80021dc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80021e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	fa93 f2a3 	rbit	r2, r3
 80021f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80021f4:	601a      	str	r2, [r3, #0]
  return result;
 80021f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80021fa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021fc:	fab3 f383 	clz	r3, r3
 8002200:	b2db      	uxtb	r3, r3
 8002202:	095b      	lsrs	r3, r3, #5
 8002204:	b2db      	uxtb	r3, r3
 8002206:	f043 0301 	orr.w	r3, r3, #1
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b01      	cmp	r3, #1
 800220e:	d105      	bne.n	800221c <HAL_RCC_OscConfig+0xc48>
 8002210:	4b01      	ldr	r3, [pc, #4]	; (8002218 <HAL_RCC_OscConfig+0xc44>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	e01e      	b.n	8002254 <HAL_RCC_OscConfig+0xc80>
 8002216:	bf00      	nop
 8002218:	40021000 	.word	0x40021000
 800221c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002220:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002224:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002226:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	fa93 f2a3 	rbit	r2, r3
 8002230:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800223a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	fa93 f2a3 	rbit	r2, r3
 800224a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	4b63      	ldr	r3, [pc, #396]	; (80023e0 <HAL_RCC_OscConfig+0xe0c>)
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002258:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800225c:	6011      	str	r1, [r2, #0]
 800225e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002262:	6812      	ldr	r2, [r2, #0]
 8002264:	fa92 f1a2 	rbit	r1, r2
 8002268:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800226c:	6011      	str	r1, [r2, #0]
  return result;
 800226e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002272:	6812      	ldr	r2, [r2, #0]
 8002274:	fab2 f282 	clz	r2, r2
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	f042 0220 	orr.w	r2, r2, #32
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	f002 021f 	and.w	r2, r2, #31
 8002284:	2101      	movs	r1, #1
 8002286:	fa01 f202 	lsl.w	r2, r1, r2
 800228a:	4013      	ands	r3, r2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d09b      	beq.n	80021c8 <HAL_RCC_OscConfig+0xbf4>
 8002290:	e0a0      	b.n	80023d4 <HAL_RCC_OscConfig+0xe00>
 8002292:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002296:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800229a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	fa93 f2a3 	rbit	r2, r3
 80022a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022aa:	601a      	str	r2, [r3, #0]
  return result;
 80022ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022b0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b2:	fab3 f383 	clz	r3, r3
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	461a      	mov	r2, r3
 80022c4:	2300      	movs	r3, #0
 80022c6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c8:	f7fe fe06 	bl	8000ed8 <HAL_GetTick>
 80022cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d0:	e009      	b.n	80022e6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022d2:	f7fe fe01 	bl	8000ed8 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e077      	b.n	80023d6 <HAL_RCC_OscConfig+0xe02>
 80022e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	fa93 f2a3 	rbit	r2, r3
 80022fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022fe:	601a      	str	r2, [r3, #0]
  return result;
 8002300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002304:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002306:	fab3 f383 	clz	r3, r3
 800230a:	b2db      	uxtb	r3, r3
 800230c:	095b      	lsrs	r3, r3, #5
 800230e:	b2db      	uxtb	r3, r3
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b01      	cmp	r3, #1
 8002318:	d102      	bne.n	8002320 <HAL_RCC_OscConfig+0xd4c>
 800231a:	4b31      	ldr	r3, [pc, #196]	; (80023e0 <HAL_RCC_OscConfig+0xe0c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	e01b      	b.n	8002358 <HAL_RCC_OscConfig+0xd84>
 8002320:	f107 0320 	add.w	r3, r7, #32
 8002324:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002328:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	f107 0320 	add.w	r3, r7, #32
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	fa93 f2a3 	rbit	r2, r3
 8002334:	f107 031c 	add.w	r3, r7, #28
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	f107 0318 	add.w	r3, r7, #24
 800233e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	f107 0318 	add.w	r3, r7, #24
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	fa93 f2a3 	rbit	r2, r3
 800234e:	f107 0314 	add.w	r3, r7, #20
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	4b22      	ldr	r3, [pc, #136]	; (80023e0 <HAL_RCC_OscConfig+0xe0c>)
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	f107 0210 	add.w	r2, r7, #16
 800235c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002360:	6011      	str	r1, [r2, #0]
 8002362:	f107 0210 	add.w	r2, r7, #16
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	fa92 f1a2 	rbit	r1, r2
 800236c:	f107 020c 	add.w	r2, r7, #12
 8002370:	6011      	str	r1, [r2, #0]
  return result;
 8002372:	f107 020c 	add.w	r2, r7, #12
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	fab2 f282 	clz	r2, r2
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	f042 0220 	orr.w	r2, r2, #32
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	f002 021f 	and.w	r2, r2, #31
 8002388:	2101      	movs	r1, #1
 800238a:	fa01 f202 	lsl.w	r2, r1, r2
 800238e:	4013      	ands	r3, r2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d19e      	bne.n	80022d2 <HAL_RCC_OscConfig+0xcfe>
 8002394:	e01e      	b.n	80023d4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002396:	1d3b      	adds	r3, r7, #4
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d101      	bne.n	80023a4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e018      	b.n	80023d6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023a4:	4b0e      	ldr	r3, [pc, #56]	; (80023e0 <HAL_RCC_OscConfig+0xe0c>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80023ac:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80023b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023b4:	1d3b      	adds	r3, r7, #4
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d108      	bne.n	80023d0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80023be:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80023c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023c6:	1d3b      	adds	r3, r7, #4
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d001      	beq.n	80023d4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e000      	b.n	80023d6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40021000 	.word	0x40021000

080023e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b09e      	sub	sp, #120	; 0x78
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e162      	b.n	80026c2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023fc:	4b90      	ldr	r3, [pc, #576]	; (8002640 <HAL_RCC_ClockConfig+0x25c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	429a      	cmp	r2, r3
 8002408:	d910      	bls.n	800242c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240a:	4b8d      	ldr	r3, [pc, #564]	; (8002640 <HAL_RCC_ClockConfig+0x25c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f023 0207 	bic.w	r2, r3, #7
 8002412:	498b      	ldr	r1, [pc, #556]	; (8002640 <HAL_RCC_ClockConfig+0x25c>)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	4313      	orrs	r3, r2
 8002418:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800241a:	4b89      	ldr	r3, [pc, #548]	; (8002640 <HAL_RCC_ClockConfig+0x25c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	429a      	cmp	r2, r3
 8002426:	d001      	beq.n	800242c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e14a      	b.n	80026c2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d008      	beq.n	800244a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002438:	4b82      	ldr	r3, [pc, #520]	; (8002644 <HAL_RCC_ClockConfig+0x260>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	497f      	ldr	r1, [pc, #508]	; (8002644 <HAL_RCC_ClockConfig+0x260>)
 8002446:	4313      	orrs	r3, r2
 8002448:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 80dc 	beq.w	8002610 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d13c      	bne.n	80024da <HAL_RCC_ClockConfig+0xf6>
 8002460:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002464:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002466:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002468:	fa93 f3a3 	rbit	r3, r3
 800246c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800246e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002470:	fab3 f383 	clz	r3, r3
 8002474:	b2db      	uxtb	r3, r3
 8002476:	095b      	lsrs	r3, r3, #5
 8002478:	b2db      	uxtb	r3, r3
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b01      	cmp	r3, #1
 8002482:	d102      	bne.n	800248a <HAL_RCC_ClockConfig+0xa6>
 8002484:	4b6f      	ldr	r3, [pc, #444]	; (8002644 <HAL_RCC_ClockConfig+0x260>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	e00f      	b.n	80024aa <HAL_RCC_ClockConfig+0xc6>
 800248a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800248e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002490:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002492:	fa93 f3a3 	rbit	r3, r3
 8002496:	667b      	str	r3, [r7, #100]	; 0x64
 8002498:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800249c:	663b      	str	r3, [r7, #96]	; 0x60
 800249e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024a0:	fa93 f3a3 	rbit	r3, r3
 80024a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024a6:	4b67      	ldr	r3, [pc, #412]	; (8002644 <HAL_RCC_ClockConfig+0x260>)
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024ae:	65ba      	str	r2, [r7, #88]	; 0x58
 80024b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80024b2:	fa92 f2a2 	rbit	r2, r2
 80024b6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80024b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80024ba:	fab2 f282 	clz	r2, r2
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	f042 0220 	orr.w	r2, r2, #32
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	f002 021f 	and.w	r2, r2, #31
 80024ca:	2101      	movs	r1, #1
 80024cc:	fa01 f202 	lsl.w	r2, r1, r2
 80024d0:	4013      	ands	r3, r2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d17b      	bne.n	80025ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e0f3      	b.n	80026c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d13c      	bne.n	800255c <HAL_RCC_ClockConfig+0x178>
 80024e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024ea:	fa93 f3a3 	rbit	r3, r3
 80024ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80024f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f2:	fab3 f383 	clz	r3, r3
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	095b      	lsrs	r3, r3, #5
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b01      	cmp	r3, #1
 8002504:	d102      	bne.n	800250c <HAL_RCC_ClockConfig+0x128>
 8002506:	4b4f      	ldr	r3, [pc, #316]	; (8002644 <HAL_RCC_ClockConfig+0x260>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	e00f      	b.n	800252c <HAL_RCC_ClockConfig+0x148>
 800250c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002510:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002514:	fa93 f3a3 	rbit	r3, r3
 8002518:	647b      	str	r3, [r7, #68]	; 0x44
 800251a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800251e:	643b      	str	r3, [r7, #64]	; 0x40
 8002520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002522:	fa93 f3a3 	rbit	r3, r3
 8002526:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002528:	4b46      	ldr	r3, [pc, #280]	; (8002644 <HAL_RCC_ClockConfig+0x260>)
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002530:	63ba      	str	r2, [r7, #56]	; 0x38
 8002532:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002534:	fa92 f2a2 	rbit	r2, r2
 8002538:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800253a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800253c:	fab2 f282 	clz	r2, r2
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	f042 0220 	orr.w	r2, r2, #32
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	f002 021f 	and.w	r2, r2, #31
 800254c:	2101      	movs	r1, #1
 800254e:	fa01 f202 	lsl.w	r2, r1, r2
 8002552:	4013      	ands	r3, r2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d13a      	bne.n	80025ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e0b2      	b.n	80026c2 <HAL_RCC_ClockConfig+0x2de>
 800255c:	2302      	movs	r3, #2
 800255e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002562:	fa93 f3a3 	rbit	r3, r3
 8002566:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800256a:	fab3 f383 	clz	r3, r3
 800256e:	b2db      	uxtb	r3, r3
 8002570:	095b      	lsrs	r3, r3, #5
 8002572:	b2db      	uxtb	r3, r3
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b01      	cmp	r3, #1
 800257c:	d102      	bne.n	8002584 <HAL_RCC_ClockConfig+0x1a0>
 800257e:	4b31      	ldr	r3, [pc, #196]	; (8002644 <HAL_RCC_ClockConfig+0x260>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	e00d      	b.n	80025a0 <HAL_RCC_ClockConfig+0x1bc>
 8002584:	2302      	movs	r3, #2
 8002586:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800258a:	fa93 f3a3 	rbit	r3, r3
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
 8002590:	2302      	movs	r3, #2
 8002592:	623b      	str	r3, [r7, #32]
 8002594:	6a3b      	ldr	r3, [r7, #32]
 8002596:	fa93 f3a3 	rbit	r3, r3
 800259a:	61fb      	str	r3, [r7, #28]
 800259c:	4b29      	ldr	r3, [pc, #164]	; (8002644 <HAL_RCC_ClockConfig+0x260>)
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	2202      	movs	r2, #2
 80025a2:	61ba      	str	r2, [r7, #24]
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	fa92 f2a2 	rbit	r2, r2
 80025aa:	617a      	str	r2, [r7, #20]
  return result;
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	fab2 f282 	clz	r2, r2
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	f042 0220 	orr.w	r2, r2, #32
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	f002 021f 	and.w	r2, r2, #31
 80025be:	2101      	movs	r1, #1
 80025c0:	fa01 f202 	lsl.w	r2, r1, r2
 80025c4:	4013      	ands	r3, r2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e079      	b.n	80026c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ce:	4b1d      	ldr	r3, [pc, #116]	; (8002644 <HAL_RCC_ClockConfig+0x260>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f023 0203 	bic.w	r2, r3, #3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	491a      	ldr	r1, [pc, #104]	; (8002644 <HAL_RCC_ClockConfig+0x260>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025e0:	f7fe fc7a 	bl	8000ed8 <HAL_GetTick>
 80025e4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e6:	e00a      	b.n	80025fe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e8:	f7fe fc76 	bl	8000ed8 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e061      	b.n	80026c2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fe:	4b11      	ldr	r3, [pc, #68]	; (8002644 <HAL_RCC_ClockConfig+0x260>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f003 020c 	and.w	r2, r3, #12
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	429a      	cmp	r2, r3
 800260e:	d1eb      	bne.n	80025e8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <HAL_RCC_ClockConfig+0x25c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d214      	bcs.n	8002648 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261e:	4b08      	ldr	r3, [pc, #32]	; (8002640 <HAL_RCC_ClockConfig+0x25c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f023 0207 	bic.w	r2, r3, #7
 8002626:	4906      	ldr	r1, [pc, #24]	; (8002640 <HAL_RCC_ClockConfig+0x25c>)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	4313      	orrs	r3, r2
 800262c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800262e:	4b04      	ldr	r3, [pc, #16]	; (8002640 <HAL_RCC_ClockConfig+0x25c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d005      	beq.n	8002648 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e040      	b.n	80026c2 <HAL_RCC_ClockConfig+0x2de>
 8002640:	40022000 	.word	0x40022000
 8002644:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002654:	4b1d      	ldr	r3, [pc, #116]	; (80026cc <HAL_RCC_ClockConfig+0x2e8>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	491a      	ldr	r1, [pc, #104]	; (80026cc <HAL_RCC_ClockConfig+0x2e8>)
 8002662:	4313      	orrs	r3, r2
 8002664:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b00      	cmp	r3, #0
 8002670:	d009      	beq.n	8002686 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002672:	4b16      	ldr	r3, [pc, #88]	; (80026cc <HAL_RCC_ClockConfig+0x2e8>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	4912      	ldr	r1, [pc, #72]	; (80026cc <HAL_RCC_ClockConfig+0x2e8>)
 8002682:	4313      	orrs	r3, r2
 8002684:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002686:	f000 f829 	bl	80026dc <HAL_RCC_GetSysClockFreq>
 800268a:	4601      	mov	r1, r0
 800268c:	4b0f      	ldr	r3, [pc, #60]	; (80026cc <HAL_RCC_ClockConfig+0x2e8>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002694:	22f0      	movs	r2, #240	; 0xf0
 8002696:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	fa92 f2a2 	rbit	r2, r2
 800269e:	60fa      	str	r2, [r7, #12]
  return result;
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	fab2 f282 	clz	r2, r2
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	40d3      	lsrs	r3, r2
 80026aa:	4a09      	ldr	r2, [pc, #36]	; (80026d0 <HAL_RCC_ClockConfig+0x2ec>)
 80026ac:	5cd3      	ldrb	r3, [r2, r3]
 80026ae:	fa21 f303 	lsr.w	r3, r1, r3
 80026b2:	4a08      	ldr	r2, [pc, #32]	; (80026d4 <HAL_RCC_ClockConfig+0x2f0>)
 80026b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80026b6:	4b08      	ldr	r3, [pc, #32]	; (80026d8 <HAL_RCC_ClockConfig+0x2f4>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fe fbc8 	bl	8000e50 <HAL_InitTick>
  
  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3778      	adds	r7, #120	; 0x78
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40021000 	.word	0x40021000
 80026d0:	08004af4 	.word	0x08004af4
 80026d4:	20000000 	.word	0x20000000
 80026d8:	20000004 	.word	0x20000004

080026dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	b08b      	sub	sp, #44	; 0x2c
 80026e0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61fb      	str	r3, [r7, #28]
 80026e6:	2300      	movs	r3, #0
 80026e8:	61bb      	str	r3, [r7, #24]
 80026ea:	2300      	movs	r3, #0
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80026f6:	4b29      	ldr	r3, [pc, #164]	; (800279c <HAL_RCC_GetSysClockFreq+0xc0>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f003 030c 	and.w	r3, r3, #12
 8002702:	2b04      	cmp	r3, #4
 8002704:	d002      	beq.n	800270c <HAL_RCC_GetSysClockFreq+0x30>
 8002706:	2b08      	cmp	r3, #8
 8002708:	d003      	beq.n	8002712 <HAL_RCC_GetSysClockFreq+0x36>
 800270a:	e03c      	b.n	8002786 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800270c:	4b24      	ldr	r3, [pc, #144]	; (80027a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800270e:	623b      	str	r3, [r7, #32]
      break;
 8002710:	e03c      	b.n	800278c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002718:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800271c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	fa92 f2a2 	rbit	r2, r2
 8002724:	607a      	str	r2, [r7, #4]
  return result;
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	fab2 f282 	clz	r2, r2
 800272c:	b2d2      	uxtb	r2, r2
 800272e:	40d3      	lsrs	r3, r2
 8002730:	4a1c      	ldr	r2, [pc, #112]	; (80027a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002732:	5cd3      	ldrb	r3, [r2, r3]
 8002734:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002736:	4b19      	ldr	r3, [pc, #100]	; (800279c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	220f      	movs	r2, #15
 8002740:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	fa92 f2a2 	rbit	r2, r2
 8002748:	60fa      	str	r2, [r7, #12]
  return result;
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	fab2 f282 	clz	r2, r2
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	40d3      	lsrs	r3, r2
 8002754:	4a14      	ldr	r2, [pc, #80]	; (80027a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002756:	5cd3      	ldrb	r3, [r2, r3]
 8002758:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d008      	beq.n	8002776 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002764:	4a0e      	ldr	r2, [pc, #56]	; (80027a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	fbb2 f2f3 	udiv	r2, r2, r3
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	fb02 f303 	mul.w	r3, r2, r3
 8002772:	627b      	str	r3, [r7, #36]	; 0x24
 8002774:	e004      	b.n	8002780 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	4a0c      	ldr	r2, [pc, #48]	; (80027ac <HAL_RCC_GetSysClockFreq+0xd0>)
 800277a:	fb02 f303 	mul.w	r3, r2, r3
 800277e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	623b      	str	r3, [r7, #32]
      break;
 8002784:	e002      	b.n	800278c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002786:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002788:	623b      	str	r3, [r7, #32]
      break;
 800278a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800278c:	6a3b      	ldr	r3, [r7, #32]
}
 800278e:	4618      	mov	r0, r3
 8002790:	372c      	adds	r7, #44	; 0x2c
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40021000 	.word	0x40021000
 80027a0:	007a1200 	.word	0x007a1200
 80027a4:	08004b0c 	.word	0x08004b0c
 80027a8:	08004b1c 	.word	0x08004b1c
 80027ac:	003d0900 	.word	0x003d0900

080027b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027b4:	4b03      	ldr	r3, [pc, #12]	; (80027c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80027b6:	681b      	ldr	r3, [r3, #0]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	20000000 	.word	0x20000000

080027c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80027ce:	f7ff ffef 	bl	80027b0 <HAL_RCC_GetHCLKFreq>
 80027d2:	4601      	mov	r1, r0
 80027d4:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80027dc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80027e0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	fa92 f2a2 	rbit	r2, r2
 80027e8:	603a      	str	r2, [r7, #0]
  return result;
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	fab2 f282 	clz	r2, r2
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	40d3      	lsrs	r3, r2
 80027f4:	4a04      	ldr	r2, [pc, #16]	; (8002808 <HAL_RCC_GetPCLK1Freq+0x40>)
 80027f6:	5cd3      	ldrb	r3, [r2, r3]
 80027f8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80027fc:	4618      	mov	r0, r3
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40021000 	.word	0x40021000
 8002808:	08004b04 	.word	0x08004b04

0800280c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002812:	f7ff ffcd 	bl	80027b0 <HAL_RCC_GetHCLKFreq>
 8002816:	4601      	mov	r1, r0
 8002818:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002820:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002824:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	fa92 f2a2 	rbit	r2, r2
 800282c:	603a      	str	r2, [r7, #0]
  return result;
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	fab2 f282 	clz	r2, r2
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	40d3      	lsrs	r3, r2
 8002838:	4a04      	ldr	r2, [pc, #16]	; (800284c <HAL_RCC_GetPCLK2Freq+0x40>)
 800283a:	5cd3      	ldrb	r3, [r2, r3]
 800283c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002840:	4618      	mov	r0, r3
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40021000 	.word	0x40021000
 800284c:	08004b04 	.word	0x08004b04

08002850 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b092      	sub	sp, #72	; 0x48
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002858:	2300      	movs	r3, #0
 800285a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800285c:	2300      	movs	r3, #0
 800285e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002860:	2300      	movs	r3, #0
 8002862:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 80cd 	beq.w	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002874:	4b86      	ldr	r3, [pc, #536]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10e      	bne.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002880:	4b83      	ldr	r3, [pc, #524]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	4a82      	ldr	r2, [pc, #520]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800288a:	61d3      	str	r3, [r2, #28]
 800288c:	4b80      	ldr	r3, [pc, #512]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002898:	2301      	movs	r3, #1
 800289a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289e:	4b7d      	ldr	r3, [pc, #500]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d118      	bne.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028aa:	4b7a      	ldr	r3, [pc, #488]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a79      	ldr	r2, [pc, #484]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80028b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028b6:	f7fe fb0f 	bl	8000ed8 <HAL_GetTick>
 80028ba:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028bc:	e008      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028be:	f7fe fb0b 	bl	8000ed8 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b64      	cmp	r3, #100	; 0x64
 80028ca:	d901      	bls.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e0db      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d0:	4b70      	ldr	r3, [pc, #448]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028dc:	4b6c      	ldr	r3, [pc, #432]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d07d      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d076      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028fa:	4b65      	ldr	r3, [pc, #404]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002902:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002904:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002908:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290c:	fa93 f3a3 	rbit	r3, r3
 8002910:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002914:	fab3 f383 	clz	r3, r3
 8002918:	b2db      	uxtb	r3, r3
 800291a:	461a      	mov	r2, r3
 800291c:	4b5e      	ldr	r3, [pc, #376]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800291e:	4413      	add	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	461a      	mov	r2, r3
 8002924:	2301      	movs	r3, #1
 8002926:	6013      	str	r3, [r2, #0]
 8002928:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800292c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002930:	fa93 f3a3 	rbit	r3, r3
 8002934:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002938:	fab3 f383 	clz	r3, r3
 800293c:	b2db      	uxtb	r3, r3
 800293e:	461a      	mov	r2, r3
 8002940:	4b55      	ldr	r3, [pc, #340]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002942:	4413      	add	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	461a      	mov	r2, r3
 8002948:	2300      	movs	r3, #0
 800294a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800294c:	4a50      	ldr	r2, [pc, #320]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800294e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002950:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b00      	cmp	r3, #0
 800295a:	d045      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295c:	f7fe fabc 	bl	8000ed8 <HAL_GetTick>
 8002960:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002962:	e00a      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002964:	f7fe fab8 	bl	8000ed8 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002972:	4293      	cmp	r3, r2
 8002974:	d901      	bls.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e086      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800297a:	2302      	movs	r3, #2
 800297c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002980:	fa93 f3a3 	rbit	r3, r3
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
 8002986:	2302      	movs	r3, #2
 8002988:	623b      	str	r3, [r7, #32]
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	fa93 f3a3 	rbit	r3, r3
 8002990:	61fb      	str	r3, [r7, #28]
  return result;
 8002992:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002994:	fab3 f383 	clz	r3, r3
 8002998:	b2db      	uxtb	r3, r3
 800299a:	095b      	lsrs	r3, r3, #5
 800299c:	b2db      	uxtb	r3, r3
 800299e:	f043 0302 	orr.w	r3, r3, #2
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d102      	bne.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80029a8:	4b39      	ldr	r3, [pc, #228]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	e007      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80029ae:	2302      	movs	r3, #2
 80029b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	fa93 f3a3 	rbit	r3, r3
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	4b35      	ldr	r3, [pc, #212]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	2202      	movs	r2, #2
 80029c0:	613a      	str	r2, [r7, #16]
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	fa92 f2a2 	rbit	r2, r2
 80029c8:	60fa      	str	r2, [r7, #12]
  return result;
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	fab2 f282 	clz	r2, r2
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	f002 021f 	and.w	r2, r2, #31
 80029dc:	2101      	movs	r1, #1
 80029de:	fa01 f202 	lsl.w	r2, r1, r2
 80029e2:	4013      	ands	r3, r2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0bd      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80029e8:	4b29      	ldr	r3, [pc, #164]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	4926      	ldr	r1, [pc, #152]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d105      	bne.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a02:	4b23      	ldr	r3, [pc, #140]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	4a22      	ldr	r2, [pc, #136]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a0c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d008      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a1a:	4b1d      	ldr	r3, [pc, #116]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	f023 0203 	bic.w	r2, r3, #3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	491a      	ldr	r1, [pc, #104]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0320 	and.w	r3, r3, #32
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a38:	4b15      	ldr	r3, [pc, #84]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3c:	f023 0210 	bic.w	r2, r3, #16
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	4912      	ldr	r1, [pc, #72]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d008      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a56:	4b0e      	ldr	r3, [pc, #56]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	490b      	ldr	r1, [pc, #44]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d008      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002a74:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	4903      	ldr	r1, [pc, #12]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3748      	adds	r7, #72	; 0x48
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40021000 	.word	0x40021000
 8002a94:	40007000 	.word	0x40007000
 8002a98:	10908100 	.word	0x10908100

08002a9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e049      	b.n	8002b42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d106      	bne.n	8002ac8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7fe f816 	bl	8000af4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2202      	movs	r2, #2
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3304      	adds	r3, #4
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4610      	mov	r0, r2
 8002adc:	f000 fa88 	bl	8002ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b082      	sub	sp, #8
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e049      	b.n	8002bf0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d106      	bne.n	8002b76 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f7fd ff9f 	bl	8000ab4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2202      	movs	r2, #2
 8002b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	3304      	adds	r3, #4
 8002b86:	4619      	mov	r1, r3
 8002b88:	4610      	mov	r0, r2
 8002b8a:	f000 fa31 	bl	8002ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d109      	bne.n	8002c1c <HAL_TIM_PWM_Start+0x24>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	bf14      	ite	ne
 8002c14:	2301      	movne	r3, #1
 8002c16:	2300      	moveq	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	e03c      	b.n	8002c96 <HAL_TIM_PWM_Start+0x9e>
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d109      	bne.n	8002c36 <HAL_TIM_PWM_Start+0x3e>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	bf14      	ite	ne
 8002c2e:	2301      	movne	r3, #1
 8002c30:	2300      	moveq	r3, #0
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	e02f      	b.n	8002c96 <HAL_TIM_PWM_Start+0x9e>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d109      	bne.n	8002c50 <HAL_TIM_PWM_Start+0x58>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	bf14      	ite	ne
 8002c48:	2301      	movne	r3, #1
 8002c4a:	2300      	moveq	r3, #0
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	e022      	b.n	8002c96 <HAL_TIM_PWM_Start+0x9e>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	2b0c      	cmp	r3, #12
 8002c54:	d109      	bne.n	8002c6a <HAL_TIM_PWM_Start+0x72>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	bf14      	ite	ne
 8002c62:	2301      	movne	r3, #1
 8002c64:	2300      	moveq	r3, #0
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	e015      	b.n	8002c96 <HAL_TIM_PWM_Start+0x9e>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	2b10      	cmp	r3, #16
 8002c6e:	d109      	bne.n	8002c84 <HAL_TIM_PWM_Start+0x8c>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	bf14      	ite	ne
 8002c7c:	2301      	movne	r3, #1
 8002c7e:	2300      	moveq	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	e008      	b.n	8002c96 <HAL_TIM_PWM_Start+0x9e>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	bf14      	ite	ne
 8002c90:	2301      	movne	r3, #1
 8002c92:	2300      	moveq	r3, #0
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e088      	b.n	8002db0 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d104      	bne.n	8002cae <HAL_TIM_PWM_Start+0xb6>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cac:	e023      	b.n	8002cf6 <HAL_TIM_PWM_Start+0xfe>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d104      	bne.n	8002cbe <HAL_TIM_PWM_Start+0xc6>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cbc:	e01b      	b.n	8002cf6 <HAL_TIM_PWM_Start+0xfe>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d104      	bne.n	8002cce <HAL_TIM_PWM_Start+0xd6>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ccc:	e013      	b.n	8002cf6 <HAL_TIM_PWM_Start+0xfe>
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	2b0c      	cmp	r3, #12
 8002cd2:	d104      	bne.n	8002cde <HAL_TIM_PWM_Start+0xe6>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002cdc:	e00b      	b.n	8002cf6 <HAL_TIM_PWM_Start+0xfe>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	2b10      	cmp	r3, #16
 8002ce2:	d104      	bne.n	8002cee <HAL_TIM_PWM_Start+0xf6>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cec:	e003      	b.n	8002cf6 <HAL_TIM_PWM_Start+0xfe>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	6839      	ldr	r1, [r7, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 fc94 	bl	800362c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a2b      	ldr	r2, [pc, #172]	; (8002db8 <HAL_TIM_PWM_Start+0x1c0>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d00e      	beq.n	8002d2c <HAL_TIM_PWM_Start+0x134>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a2a      	ldr	r2, [pc, #168]	; (8002dbc <HAL_TIM_PWM_Start+0x1c4>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d009      	beq.n	8002d2c <HAL_TIM_PWM_Start+0x134>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a28      	ldr	r2, [pc, #160]	; (8002dc0 <HAL_TIM_PWM_Start+0x1c8>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d004      	beq.n	8002d2c <HAL_TIM_PWM_Start+0x134>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a27      	ldr	r2, [pc, #156]	; (8002dc4 <HAL_TIM_PWM_Start+0x1cc>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d101      	bne.n	8002d30 <HAL_TIM_PWM_Start+0x138>
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e000      	b.n	8002d32 <HAL_TIM_PWM_Start+0x13a>
 8002d30:	2300      	movs	r3, #0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d007      	beq.n	8002d46 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a1b      	ldr	r2, [pc, #108]	; (8002db8 <HAL_TIM_PWM_Start+0x1c0>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d00e      	beq.n	8002d6e <HAL_TIM_PWM_Start+0x176>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d58:	d009      	beq.n	8002d6e <HAL_TIM_PWM_Start+0x176>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a1a      	ldr	r2, [pc, #104]	; (8002dc8 <HAL_TIM_PWM_Start+0x1d0>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d004      	beq.n	8002d6e <HAL_TIM_PWM_Start+0x176>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a14      	ldr	r2, [pc, #80]	; (8002dbc <HAL_TIM_PWM_Start+0x1c4>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d115      	bne.n	8002d9a <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	4b15      	ldr	r3, [pc, #84]	; (8002dcc <HAL_TIM_PWM_Start+0x1d4>)
 8002d76:	4013      	ands	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2b06      	cmp	r3, #6
 8002d7e:	d015      	beq.n	8002dac <HAL_TIM_PWM_Start+0x1b4>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d86:	d011      	beq.n	8002dac <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f042 0201 	orr.w	r2, r2, #1
 8002d96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d98:	e008      	b.n	8002dac <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f042 0201 	orr.w	r2, r2, #1
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	e000      	b.n	8002dae <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40012c00 	.word	0x40012c00
 8002dbc:	40014000 	.word	0x40014000
 8002dc0:	40014400 	.word	0x40014400
 8002dc4:	40014800 	.word	0x40014800
 8002dc8:	40000400 	.word	0x40000400
 8002dcc:	00010007 	.word	0x00010007

08002dd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d101      	bne.n	8002dea <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002de6:	2302      	movs	r3, #2
 8002de8:	e0fd      	b.n	8002fe6 <HAL_TIM_PWM_ConfigChannel+0x216>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b14      	cmp	r3, #20
 8002df6:	f200 80f0 	bhi.w	8002fda <HAL_TIM_PWM_ConfigChannel+0x20a>
 8002dfa:	a201      	add	r2, pc, #4	; (adr r2, 8002e00 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e00:	08002e55 	.word	0x08002e55
 8002e04:	08002fdb 	.word	0x08002fdb
 8002e08:	08002fdb 	.word	0x08002fdb
 8002e0c:	08002fdb 	.word	0x08002fdb
 8002e10:	08002e95 	.word	0x08002e95
 8002e14:	08002fdb 	.word	0x08002fdb
 8002e18:	08002fdb 	.word	0x08002fdb
 8002e1c:	08002fdb 	.word	0x08002fdb
 8002e20:	08002ed7 	.word	0x08002ed7
 8002e24:	08002fdb 	.word	0x08002fdb
 8002e28:	08002fdb 	.word	0x08002fdb
 8002e2c:	08002fdb 	.word	0x08002fdb
 8002e30:	08002f17 	.word	0x08002f17
 8002e34:	08002fdb 	.word	0x08002fdb
 8002e38:	08002fdb 	.word	0x08002fdb
 8002e3c:	08002fdb 	.word	0x08002fdb
 8002e40:	08002f59 	.word	0x08002f59
 8002e44:	08002fdb 	.word	0x08002fdb
 8002e48:	08002fdb 	.word	0x08002fdb
 8002e4c:	08002fdb 	.word	0x08002fdb
 8002e50:	08002f99 	.word	0x08002f99
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68b9      	ldr	r1, [r7, #8]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 f940 	bl	80030e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	699a      	ldr	r2, [r3, #24]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0208 	orr.w	r2, r2, #8
 8002e6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	699a      	ldr	r2, [r3, #24]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0204 	bic.w	r2, r2, #4
 8002e7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6999      	ldr	r1, [r3, #24]
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	691a      	ldr	r2, [r3, #16]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	619a      	str	r2, [r3, #24]
      break;
 8002e92:	e0a3      	b.n	8002fdc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68b9      	ldr	r1, [r7, #8]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 f9a6 	bl	80031ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699a      	ldr	r2, [r3, #24]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	699a      	ldr	r2, [r3, #24]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ebe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6999      	ldr	r1, [r3, #24]
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	021a      	lsls	r2, r3, #8
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	619a      	str	r2, [r3, #24]
      break;
 8002ed4:	e082      	b.n	8002fdc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68b9      	ldr	r1, [r7, #8]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f000 fa05 	bl	80032ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	69da      	ldr	r2, [r3, #28]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f042 0208 	orr.w	r2, r2, #8
 8002ef0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	69da      	ldr	r2, [r3, #28]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 0204 	bic.w	r2, r2, #4
 8002f00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	69d9      	ldr	r1, [r3, #28]
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	61da      	str	r2, [r3, #28]
      break;
 8002f14:	e062      	b.n	8002fdc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68b9      	ldr	r1, [r7, #8]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f000 fa63 	bl	80033e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	69da      	ldr	r2, [r3, #28]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	69da      	ldr	r2, [r3, #28]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	69d9      	ldr	r1, [r3, #28]
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	021a      	lsls	r2, r3, #8
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	61da      	str	r2, [r3, #28]
      break;
 8002f56:	e041      	b.n	8002fdc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 faa6 	bl	80034b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0208 	orr.w	r2, r2, #8
 8002f72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 0204 	bic.w	r2, r2, #4
 8002f82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	691a      	ldr	r2, [r3, #16]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002f96:	e021      	b.n	8002fdc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68b9      	ldr	r1, [r7, #8]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 fae4 	bl	800356c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fb2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fc2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	021a      	lsls	r2, r3, #8
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002fd8:	e000      	b.n	8002fdc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8002fda:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop

08002ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a32      	ldr	r2, [pc, #200]	; (80030cc <TIM_Base_SetConfig+0xdc>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d007      	beq.n	8003018 <TIM_Base_SetConfig+0x28>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800300e:	d003      	beq.n	8003018 <TIM_Base_SetConfig+0x28>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a2f      	ldr	r2, [pc, #188]	; (80030d0 <TIM_Base_SetConfig+0xe0>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d108      	bne.n	800302a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800301e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	4313      	orrs	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a27      	ldr	r2, [pc, #156]	; (80030cc <TIM_Base_SetConfig+0xdc>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d013      	beq.n	800305a <TIM_Base_SetConfig+0x6a>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003038:	d00f      	beq.n	800305a <TIM_Base_SetConfig+0x6a>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a24      	ldr	r2, [pc, #144]	; (80030d0 <TIM_Base_SetConfig+0xe0>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d00b      	beq.n	800305a <TIM_Base_SetConfig+0x6a>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a23      	ldr	r2, [pc, #140]	; (80030d4 <TIM_Base_SetConfig+0xe4>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d007      	beq.n	800305a <TIM_Base_SetConfig+0x6a>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a22      	ldr	r2, [pc, #136]	; (80030d8 <TIM_Base_SetConfig+0xe8>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d003      	beq.n	800305a <TIM_Base_SetConfig+0x6a>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a21      	ldr	r2, [pc, #132]	; (80030dc <TIM_Base_SetConfig+0xec>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d108      	bne.n	800306c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003060:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	4313      	orrs	r3, r2
 800306a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	4313      	orrs	r3, r2
 8003078:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a0e      	ldr	r2, [pc, #56]	; (80030cc <TIM_Base_SetConfig+0xdc>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d00b      	beq.n	80030b0 <TIM_Base_SetConfig+0xc0>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a0e      	ldr	r2, [pc, #56]	; (80030d4 <TIM_Base_SetConfig+0xe4>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d007      	beq.n	80030b0 <TIM_Base_SetConfig+0xc0>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a0d      	ldr	r2, [pc, #52]	; (80030d8 <TIM_Base_SetConfig+0xe8>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d003      	beq.n	80030b0 <TIM_Base_SetConfig+0xc0>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a0c      	ldr	r2, [pc, #48]	; (80030dc <TIM_Base_SetConfig+0xec>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d103      	bne.n	80030b8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	691a      	ldr	r2, [r3, #16]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	615a      	str	r2, [r3, #20]
}
 80030be:	bf00      	nop
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40012c00 	.word	0x40012c00
 80030d0:	40000400 	.word	0x40000400
 80030d4:	40014000 	.word	0x40014000
 80030d8:	40014400 	.word	0x40014400
 80030dc:	40014800 	.word	0x40014800

080030e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b087      	sub	sp, #28
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	f023 0201 	bic.w	r2, r3, #1
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800310e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f023 0303 	bic.w	r3, r3, #3
 800311a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	4313      	orrs	r3, r2
 8003124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f023 0302 	bic.w	r3, r3, #2
 800312c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	4313      	orrs	r3, r2
 8003136:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a28      	ldr	r2, [pc, #160]	; (80031dc <TIM_OC1_SetConfig+0xfc>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d00b      	beq.n	8003158 <TIM_OC1_SetConfig+0x78>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a27      	ldr	r2, [pc, #156]	; (80031e0 <TIM_OC1_SetConfig+0x100>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d007      	beq.n	8003158 <TIM_OC1_SetConfig+0x78>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a26      	ldr	r2, [pc, #152]	; (80031e4 <TIM_OC1_SetConfig+0x104>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d003      	beq.n	8003158 <TIM_OC1_SetConfig+0x78>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a25      	ldr	r2, [pc, #148]	; (80031e8 <TIM_OC1_SetConfig+0x108>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d10c      	bne.n	8003172 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f023 0308 	bic.w	r3, r3, #8
 800315e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	4313      	orrs	r3, r2
 8003168:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f023 0304 	bic.w	r3, r3, #4
 8003170:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a19      	ldr	r2, [pc, #100]	; (80031dc <TIM_OC1_SetConfig+0xfc>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d00b      	beq.n	8003192 <TIM_OC1_SetConfig+0xb2>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a18      	ldr	r2, [pc, #96]	; (80031e0 <TIM_OC1_SetConfig+0x100>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d007      	beq.n	8003192 <TIM_OC1_SetConfig+0xb2>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a17      	ldr	r2, [pc, #92]	; (80031e4 <TIM_OC1_SetConfig+0x104>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d003      	beq.n	8003192 <TIM_OC1_SetConfig+0xb2>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a16      	ldr	r2, [pc, #88]	; (80031e8 <TIM_OC1_SetConfig+0x108>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d111      	bne.n	80031b6 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003198:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	621a      	str	r2, [r3, #32]
}
 80031d0:	bf00      	nop
 80031d2:	371c      	adds	r7, #28
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	40012c00 	.word	0x40012c00
 80031e0:	40014000 	.word	0x40014000
 80031e4:	40014400 	.word	0x40014400
 80031e8:	40014800 	.word	0x40014800

080031ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b087      	sub	sp, #28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	f023 0210 	bic.w	r2, r3, #16
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800321a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800321e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003226:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	021b      	lsls	r3, r3, #8
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	4313      	orrs	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	f023 0320 	bic.w	r3, r3, #32
 800323a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	011b      	lsls	r3, r3, #4
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	4313      	orrs	r3, r2
 8003246:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a24      	ldr	r2, [pc, #144]	; (80032dc <TIM_OC2_SetConfig+0xf0>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d10d      	bne.n	800326c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003256:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	4313      	orrs	r3, r2
 8003262:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800326a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a1b      	ldr	r2, [pc, #108]	; (80032dc <TIM_OC2_SetConfig+0xf0>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d00b      	beq.n	800328c <TIM_OC2_SetConfig+0xa0>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a1a      	ldr	r2, [pc, #104]	; (80032e0 <TIM_OC2_SetConfig+0xf4>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d007      	beq.n	800328c <TIM_OC2_SetConfig+0xa0>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a19      	ldr	r2, [pc, #100]	; (80032e4 <TIM_OC2_SetConfig+0xf8>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d003      	beq.n	800328c <TIM_OC2_SetConfig+0xa0>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a18      	ldr	r2, [pc, #96]	; (80032e8 <TIM_OC2_SetConfig+0xfc>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d113      	bne.n	80032b4 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003292:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800329a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	621a      	str	r2, [r3, #32]
}
 80032ce:	bf00      	nop
 80032d0:	371c      	adds	r7, #28
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	40012c00 	.word	0x40012c00
 80032e0:	40014000 	.word	0x40014000
 80032e4:	40014400 	.word	0x40014400
 80032e8:	40014800 	.word	0x40014800

080032ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b087      	sub	sp, #28
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800331a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800331e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f023 0303 	bic.w	r3, r3, #3
 8003326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	4313      	orrs	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003338:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	021b      	lsls	r3, r3, #8
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	4313      	orrs	r3, r2
 8003344:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a23      	ldr	r2, [pc, #140]	; (80033d8 <TIM_OC3_SetConfig+0xec>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d10d      	bne.n	800336a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003354:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	021b      	lsls	r3, r3, #8
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	4313      	orrs	r3, r2
 8003360:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003368:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a1a      	ldr	r2, [pc, #104]	; (80033d8 <TIM_OC3_SetConfig+0xec>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d00b      	beq.n	800338a <TIM_OC3_SetConfig+0x9e>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a19      	ldr	r2, [pc, #100]	; (80033dc <TIM_OC3_SetConfig+0xf0>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d007      	beq.n	800338a <TIM_OC3_SetConfig+0x9e>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a18      	ldr	r2, [pc, #96]	; (80033e0 <TIM_OC3_SetConfig+0xf4>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d003      	beq.n	800338a <TIM_OC3_SetConfig+0x9e>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a17      	ldr	r2, [pc, #92]	; (80033e4 <TIM_OC3_SetConfig+0xf8>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d113      	bne.n	80033b2 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003390:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003398:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	621a      	str	r2, [r3, #32]
}
 80033cc:	bf00      	nop
 80033ce:	371c      	adds	r7, #28
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	40012c00 	.word	0x40012c00
 80033dc:	40014000 	.word	0x40014000
 80033e0:	40014400 	.word	0x40014400
 80033e4:	40014800 	.word	0x40014800

080033e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b087      	sub	sp, #28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003416:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800341a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003422:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	021b      	lsls	r3, r3, #8
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	4313      	orrs	r3, r2
 800342e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003436:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	031b      	lsls	r3, r3, #12
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a16      	ldr	r2, [pc, #88]	; (80034a0 <TIM_OC4_SetConfig+0xb8>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d00b      	beq.n	8003464 <TIM_OC4_SetConfig+0x7c>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a15      	ldr	r2, [pc, #84]	; (80034a4 <TIM_OC4_SetConfig+0xbc>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d007      	beq.n	8003464 <TIM_OC4_SetConfig+0x7c>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a14      	ldr	r2, [pc, #80]	; (80034a8 <TIM_OC4_SetConfig+0xc0>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d003      	beq.n	8003464 <TIM_OC4_SetConfig+0x7c>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a13      	ldr	r2, [pc, #76]	; (80034ac <TIM_OC4_SetConfig+0xc4>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d109      	bne.n	8003478 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800346a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	019b      	lsls	r3, r3, #6
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	4313      	orrs	r3, r2
 8003476:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	621a      	str	r2, [r3, #32]
}
 8003492:	bf00      	nop
 8003494:	371c      	adds	r7, #28
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	40012c00 	.word	0x40012c00
 80034a4:	40014000 	.word	0x40014000
 80034a8:	40014400 	.word	0x40014400
 80034ac:	40014800 	.word	0x40014800

080034b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b087      	sub	sp, #28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80034f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	041b      	lsls	r3, r3, #16
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	4313      	orrs	r3, r2
 8003500:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a15      	ldr	r2, [pc, #84]	; (800355c <TIM_OC5_SetConfig+0xac>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d00b      	beq.n	8003522 <TIM_OC5_SetConfig+0x72>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a14      	ldr	r2, [pc, #80]	; (8003560 <TIM_OC5_SetConfig+0xb0>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d007      	beq.n	8003522 <TIM_OC5_SetConfig+0x72>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a13      	ldr	r2, [pc, #76]	; (8003564 <TIM_OC5_SetConfig+0xb4>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d003      	beq.n	8003522 <TIM_OC5_SetConfig+0x72>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a12      	ldr	r2, [pc, #72]	; (8003568 <TIM_OC5_SetConfig+0xb8>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d109      	bne.n	8003536 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003528:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	021b      	lsls	r3, r3, #8
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	4313      	orrs	r3, r2
 8003534:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	621a      	str	r2, [r3, #32]
}
 8003550:	bf00      	nop
 8003552:	371c      	adds	r7, #28
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	40012c00 	.word	0x40012c00
 8003560:	40014000 	.word	0x40014000
 8003564:	40014400 	.word	0x40014400
 8003568:	40014800 	.word	0x40014800

0800356c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800356c:	b480      	push	{r7}
 800356e:	b087      	sub	sp, #28
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800359a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800359e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	021b      	lsls	r3, r3, #8
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	051b      	lsls	r3, r3, #20
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	4313      	orrs	r3, r2
 80035be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a16      	ldr	r2, [pc, #88]	; (800361c <TIM_OC6_SetConfig+0xb0>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d00b      	beq.n	80035e0 <TIM_OC6_SetConfig+0x74>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a15      	ldr	r2, [pc, #84]	; (8003620 <TIM_OC6_SetConfig+0xb4>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d007      	beq.n	80035e0 <TIM_OC6_SetConfig+0x74>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a14      	ldr	r2, [pc, #80]	; (8003624 <TIM_OC6_SetConfig+0xb8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d003      	beq.n	80035e0 <TIM_OC6_SetConfig+0x74>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a13      	ldr	r2, [pc, #76]	; (8003628 <TIM_OC6_SetConfig+0xbc>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d109      	bne.n	80035f4 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	029b      	lsls	r3, r3, #10
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	621a      	str	r2, [r3, #32]
}
 800360e:	bf00      	nop
 8003610:	371c      	adds	r7, #28
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	40012c00 	.word	0x40012c00
 8003620:	40014000 	.word	0x40014000
 8003624:	40014400 	.word	0x40014400
 8003628:	40014800 	.word	0x40014800

0800362c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800362c:	b480      	push	{r7}
 800362e:	b087      	sub	sp, #28
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	f003 031f 	and.w	r3, r3, #31
 800363e:	2201      	movs	r2, #1
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a1a      	ldr	r2, [r3, #32]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	43db      	mvns	r3, r3
 800364e:	401a      	ands	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6a1a      	ldr	r2, [r3, #32]
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	f003 031f 	and.w	r3, r3, #31
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	fa01 f303 	lsl.w	r3, r1, r3
 8003664:	431a      	orrs	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	621a      	str	r2, [r3, #32]
}
 800366a:	bf00      	nop
 800366c:	371c      	adds	r7, #28
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
	...

08003678 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d109      	bne.n	800369c <HAL_TIMEx_PWMN_Start+0x24>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b01      	cmp	r3, #1
 8003692:	bf14      	ite	ne
 8003694:	2301      	movne	r3, #1
 8003696:	2300      	moveq	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	e022      	b.n	80036e2 <HAL_TIMEx_PWMN_Start+0x6a>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d109      	bne.n	80036b6 <HAL_TIMEx_PWMN_Start+0x3e>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	bf14      	ite	ne
 80036ae:	2301      	movne	r3, #1
 80036b0:	2300      	moveq	r3, #0
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	e015      	b.n	80036e2 <HAL_TIMEx_PWMN_Start+0x6a>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d109      	bne.n	80036d0 <HAL_TIMEx_PWMN_Start+0x58>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	bf14      	ite	ne
 80036c8:	2301      	movne	r3, #1
 80036ca:	2300      	moveq	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	e008      	b.n	80036e2 <HAL_TIMEx_PWMN_Start+0x6a>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b01      	cmp	r3, #1
 80036da:	bf14      	ite	ne
 80036dc:	2301      	movne	r3, #1
 80036de:	2300      	moveq	r3, #0
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e05f      	b.n	80037aa <HAL_TIMEx_PWMN_Start+0x132>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d104      	bne.n	80036fa <HAL_TIMEx_PWMN_Start+0x82>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036f8:	e013      	b.n	8003722 <HAL_TIMEx_PWMN_Start+0xaa>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b04      	cmp	r3, #4
 80036fe:	d104      	bne.n	800370a <HAL_TIMEx_PWMN_Start+0x92>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003708:	e00b      	b.n	8003722 <HAL_TIMEx_PWMN_Start+0xaa>
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2b08      	cmp	r3, #8
 800370e:	d104      	bne.n	800371a <HAL_TIMEx_PWMN_Start+0xa2>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2202      	movs	r2, #2
 8003714:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003718:	e003      	b.n	8003722 <HAL_TIMEx_PWMN_Start+0xaa>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2202      	movs	r2, #2
 800371e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2204      	movs	r2, #4
 8003728:	6839      	ldr	r1, [r7, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	f000 f930 	bl	8003990 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800373e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a1b      	ldr	r2, [pc, #108]	; (80037b4 <HAL_TIMEx_PWMN_Start+0x13c>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d00e      	beq.n	8003768 <HAL_TIMEx_PWMN_Start+0xf0>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003752:	d009      	beq.n	8003768 <HAL_TIMEx_PWMN_Start+0xf0>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a17      	ldr	r2, [pc, #92]	; (80037b8 <HAL_TIMEx_PWMN_Start+0x140>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d004      	beq.n	8003768 <HAL_TIMEx_PWMN_Start+0xf0>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a16      	ldr	r2, [pc, #88]	; (80037bc <HAL_TIMEx_PWMN_Start+0x144>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d115      	bne.n	8003794 <HAL_TIMEx_PWMN_Start+0x11c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	4b14      	ldr	r3, [pc, #80]	; (80037c0 <HAL_TIMEx_PWMN_Start+0x148>)
 8003770:	4013      	ands	r3, r2
 8003772:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2b06      	cmp	r3, #6
 8003778:	d015      	beq.n	80037a6 <HAL_TIMEx_PWMN_Start+0x12e>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003780:	d011      	beq.n	80037a6 <HAL_TIMEx_PWMN_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f042 0201 	orr.w	r2, r2, #1
 8003790:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003792:	e008      	b.n	80037a6 <HAL_TIMEx_PWMN_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0201 	orr.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	e000      	b.n	80037a8 <HAL_TIMEx_PWMN_Start+0x130>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	40012c00 	.word	0x40012c00
 80037b8:	40000400 	.word	0x40000400
 80037bc:	40014000 	.word	0x40014000
 80037c0:	00010007 	.word	0x00010007

080037c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d101      	bne.n	80037dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037d8:	2302      	movs	r3, #2
 80037da:	e054      	b.n	8003886 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2202      	movs	r2, #2
 80037e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a24      	ldr	r2, [pc, #144]	; (8003894 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d108      	bne.n	8003818 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800380c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	4313      	orrs	r3, r2
 8003816:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800381e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	4313      	orrs	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a17      	ldr	r2, [pc, #92]	; (8003894 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d00e      	beq.n	800385a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003844:	d009      	beq.n	800385a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a13      	ldr	r2, [pc, #76]	; (8003898 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d004      	beq.n	800385a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a11      	ldr	r2, [pc, #68]	; (800389c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d10c      	bne.n	8003874 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003860:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	4313      	orrs	r3, r2
 800386a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40012c00 	.word	0x40012c00
 8003898:	40000400 	.word	0x40000400
 800389c:	40014000 	.word	0x40014000

080038a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d101      	bne.n	80038bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80038b8:	2302      	movs	r3, #2
 80038ba:	e060      	b.n	800397e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	4313      	orrs	r3, r2
 80038de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	4313      	orrs	r3, r2
 8003908:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	4313      	orrs	r3, r2
 8003916:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003922:	4313      	orrs	r3, r2
 8003924:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	041b      	lsls	r3, r3, #16
 8003932:	4313      	orrs	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a14      	ldr	r2, [pc, #80]	; (800398c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d115      	bne.n	800396c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	051b      	lsls	r3, r3, #20
 800394c:	4313      	orrs	r3, r2
 800394e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	4313      	orrs	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	4313      	orrs	r3, r2
 800396a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	40012c00 	.word	0x40012c00

08003990 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003990:	b480      	push	{r7}
 8003992:	b087      	sub	sp, #28
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	f003 031f 	and.w	r3, r3, #31
 80039a2:	2204      	movs	r2, #4
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6a1a      	ldr	r2, [r3, #32]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	43db      	mvns	r3, r3
 80039b2:	401a      	ands	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6a1a      	ldr	r2, [r3, #32]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f003 031f 	and.w	r3, r3, #31
 80039c2:	6879      	ldr	r1, [r7, #4]
 80039c4:	fa01 f303 	lsl.w	r3, r1, r3
 80039c8:	431a      	orrs	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	621a      	str	r2, [r3, #32]
}
 80039ce:	bf00      	nop
 80039d0:	371c      	adds	r7, #28
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b082      	sub	sp, #8
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e040      	b.n	8003a6e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d106      	bne.n	8003a02 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7fd f8ef 	bl	8000be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2224      	movs	r2, #36	; 0x24
 8003a06:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 0201 	bic.w	r2, r2, #1
 8003a16:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 fa89 	bl	8003f30 <UART_SetConfig>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d101      	bne.n	8003a28 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e022      	b.n	8003a6e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d002      	beq.n	8003a36 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 fbb3 	bl	800419c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a44:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a54:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f042 0201 	orr.w	r2, r2, #1
 8003a64:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 fc3a 	bl	80042e0 <UART_CheckIdleState>
 8003a6c:	4603      	mov	r3, r0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b084      	sub	sp, #16
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	60f8      	str	r0, [r7, #12]
 8003a7e:	60b9      	str	r1, [r7, #8]
 8003a80:	4613      	mov	r3, r2
 8003a82:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a88:	2b20      	cmp	r3, #32
 8003a8a:	d12c      	bne.n	8003ae6 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <HAL_UART_Receive_IT+0x22>
 8003a92:	88fb      	ldrh	r3, [r7, #6]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e025      	b.n	8003ae8 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d101      	bne.n	8003aaa <HAL_UART_Receive_IT+0x34>
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	e01e      	b.n	8003ae8 <HAL_UART_Receive_IT+0x72>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d007      	beq.n	8003ad6 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003ad4:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003ad6:	88fb      	ldrh	r3, [r7, #6]
 8003ad8:	461a      	mov	r2, r3
 8003ada:	68b9      	ldr	r1, [r7, #8]
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f000 fcc5 	bl	800446c <UART_Start_Receive_IT>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	e000      	b.n	8003ae8 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003ae6:	2302      	movs	r3, #2
  }
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b088      	sub	sp, #32
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b10:	69fa      	ldr	r2, [r7, #28]
 8003b12:	f640 030f 	movw	r3, #2063	; 0x80f
 8003b16:	4013      	ands	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d113      	bne.n	8003b48 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	f003 0320 	and.w	r3, r3, #32
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00e      	beq.n	8003b48 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	f003 0320 	and.w	r3, r3, #32
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d009      	beq.n	8003b48 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 81cc 	beq.w	8003ed6 <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	4798      	blx	r3
      }
      return;
 8003b46:	e1c6      	b.n	8003ed6 <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 80e3 	beq.w	8003d16 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d105      	bne.n	8003b66 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4ba5      	ldr	r3, [pc, #660]	; (8003df4 <HAL_UART_IRQHandler+0x304>)
 8003b5e:	4013      	ands	r3, r2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 80d8 	beq.w	8003d16 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d010      	beq.n	8003b92 <HAL_UART_IRQHandler+0xa2>
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00b      	beq.n	8003b92 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b88:	f043 0201 	orr.w	r2, r3, #1
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d010      	beq.n	8003bbe <HAL_UART_IRQHandler+0xce>
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00b      	beq.n	8003bbe <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2202      	movs	r2, #2
 8003bac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bb4:	f043 0204 	orr.w	r2, r3, #4
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d010      	beq.n	8003bea <HAL_UART_IRQHandler+0xfa>
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00b      	beq.n	8003bea <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2204      	movs	r2, #4
 8003bd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003be0:	f043 0202 	orr.w	r2, r3, #2
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d015      	beq.n	8003c20 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	f003 0320 	and.w	r3, r3, #32
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d104      	bne.n	8003c08 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00b      	beq.n	8003c20 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2208      	movs	r2, #8
 8003c0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c16:	f043 0208 	orr.w	r2, r3, #8
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d011      	beq.n	8003c4e <HAL_UART_IRQHandler+0x15e>
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00c      	beq.n	8003c4e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c44:	f043 0220 	orr.w	r2, r3, #32
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 8140 	beq.w	8003eda <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	f003 0320 	and.w	r3, r3, #32
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00c      	beq.n	8003c7e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	f003 0320 	and.w	r3, r3, #32
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d007      	beq.n	8003c7e <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c84:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c90:	2b40      	cmp	r3, #64	; 0x40
 8003c92:	d004      	beq.n	8003c9e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d031      	beq.n	8003d02 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 fc6c 	bl	800457c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cae:	2b40      	cmp	r3, #64	; 0x40
 8003cb0:	d123      	bne.n	8003cfa <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cc0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d013      	beq.n	8003cf2 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cce:	4a4a      	ldr	r2, [pc, #296]	; (8003df8 <HAL_UART_IRQHandler+0x308>)
 8003cd0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7fd fa78 	bl	80011cc <HAL_DMA_Abort_IT>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d017      	beq.n	8003d12 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003cec:	4610      	mov	r0, r2
 8003cee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf0:	e00f      	b.n	8003d12 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f906 	bl	8003f04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf8:	e00b      	b.n	8003d12 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f902 	bl	8003f04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d00:	e007      	b.n	8003d12 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f8fe 	bl	8003f04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003d10:	e0e3      	b.n	8003eda <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d12:	bf00      	nop
    return;
 8003d14:	e0e1      	b.n	8003eda <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	f040 80a7 	bne.w	8003e6e <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	f003 0310 	and.w	r3, r3, #16
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 80a1 	beq.w	8003e6e <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	f003 0310 	and.w	r3, r3, #16
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 809b 	beq.w	8003e6e <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2210      	movs	r2, #16
 8003d3e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d4a:	2b40      	cmp	r3, #64	; 0x40
 8003d4c:	d156      	bne.n	8003dfc <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003d58:	893b      	ldrh	r3, [r7, #8]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 80bf 	beq.w	8003ede <HAL_UART_IRQHandler+0x3ee>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003d66:	893a      	ldrh	r2, [r7, #8]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	f080 80b8 	bcs.w	8003ede <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	893a      	ldrh	r2, [r7, #8]
 8003d72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	2b20      	cmp	r3, #32
 8003d7e:	d02a      	beq.n	8003dd6 <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d8e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689a      	ldr	r2, [r3, #8]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0201 	bic.w	r2, r2, #1
 8003d9e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689a      	ldr	r2, [r3, #8]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dae:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2220      	movs	r2, #32
 8003db4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0210 	bic.w	r2, r2, #16
 8003dca:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7fd f9c2 	bl	800115a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	4619      	mov	r1, r3
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f894 	bl	8003f18 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003df0:	e075      	b.n	8003ede <HAL_UART_IRQHandler+0x3ee>
 8003df2:	bf00      	nop
 8003df4:	04000120 	.word	0x04000120
 8003df8:	080045db 	.word	0x080045db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d063      	beq.n	8003ee2 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_rx_data > 0U) )
 8003e1a:	897b      	ldrh	r3, [r7, #10]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d060      	beq.n	8003ee2 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e2e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689a      	ldr	r2, [r3, #8]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 0201 	bic.w	r2, r2, #1
 8003e3e:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2220      	movs	r2, #32
 8003e44:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0210 	bic.w	r2, r2, #16
 8003e60:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e62:	897b      	ldrh	r3, [r7, #10]
 8003e64:	4619      	mov	r1, r3
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f856 	bl	8003f18 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003e6c:	e039      	b.n	8003ee2 <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00d      	beq.n	8003e94 <HAL_UART_IRQHandler+0x3a4>
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d008      	beq.n	8003e94 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003e8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 fca7 	bl	80047e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e92:	e029      	b.n	8003ee8 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00d      	beq.n	8003eba <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d008      	beq.n	8003eba <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d01a      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	4798      	blx	r3
    }
    return;
 8003eb8:	e015      	b.n	8003ee6 <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d011      	beq.n	8003ee8 <HAL_UART_IRQHandler+0x3f8>
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00c      	beq.n	8003ee8 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 fb99 	bl	8004606 <UART_EndTransmit_IT>
    return;
 8003ed4:	e008      	b.n	8003ee8 <HAL_UART_IRQHandler+0x3f8>
      return;
 8003ed6:	bf00      	nop
 8003ed8:	e006      	b.n	8003ee8 <HAL_UART_IRQHandler+0x3f8>
    return;
 8003eda:	bf00      	nop
 8003edc:	e004      	b.n	8003ee8 <HAL_UART_IRQHandler+0x3f8>
      return;
 8003ede:	bf00      	nop
 8003ee0:	e002      	b.n	8003ee8 <HAL_UART_IRQHandler+0x3f8>
      return;
 8003ee2:	bf00      	nop
 8003ee4:	e000      	b.n	8003ee8 <HAL_UART_IRQHandler+0x3f8>
    return;
 8003ee6:	bf00      	nop
  }

}
 8003ee8:	3720      	adds	r7, #32
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop

08003ef0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	460b      	mov	r3, r1
 8003f22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b088      	sub	sp, #32
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	431a      	orrs	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	4b8a      	ldr	r3, [pc, #552]	; (8004184 <UART_SetConfig+0x254>)
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	6812      	ldr	r2, [r2, #0]
 8003f62:	6979      	ldr	r1, [r7, #20]
 8003f64:	430b      	orrs	r3, r1
 8003f66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a78      	ldr	r2, [pc, #480]	; (8004188 <UART_SetConfig+0x258>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d120      	bne.n	8003fee <UART_SetConfig+0xbe>
 8003fac:	4b77      	ldr	r3, [pc, #476]	; (800418c <UART_SetConfig+0x25c>)
 8003fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb0:	f003 0303 	and.w	r3, r3, #3
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d817      	bhi.n	8003fe8 <UART_SetConfig+0xb8>
 8003fb8:	a201      	add	r2, pc, #4	; (adr r2, 8003fc0 <UART_SetConfig+0x90>)
 8003fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbe:	bf00      	nop
 8003fc0:	08003fd1 	.word	0x08003fd1
 8003fc4:	08003fdd 	.word	0x08003fdd
 8003fc8:	08003fe3 	.word	0x08003fe3
 8003fcc:	08003fd7 	.word	0x08003fd7
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	77fb      	strb	r3, [r7, #31]
 8003fd4:	e01d      	b.n	8004012 <UART_SetConfig+0xe2>
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	77fb      	strb	r3, [r7, #31]
 8003fda:	e01a      	b.n	8004012 <UART_SetConfig+0xe2>
 8003fdc:	2304      	movs	r3, #4
 8003fde:	77fb      	strb	r3, [r7, #31]
 8003fe0:	e017      	b.n	8004012 <UART_SetConfig+0xe2>
 8003fe2:	2308      	movs	r3, #8
 8003fe4:	77fb      	strb	r3, [r7, #31]
 8003fe6:	e014      	b.n	8004012 <UART_SetConfig+0xe2>
 8003fe8:	2310      	movs	r3, #16
 8003fea:	77fb      	strb	r3, [r7, #31]
 8003fec:	e011      	b.n	8004012 <UART_SetConfig+0xe2>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a67      	ldr	r2, [pc, #412]	; (8004190 <UART_SetConfig+0x260>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d102      	bne.n	8003ffe <UART_SetConfig+0xce>
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	77fb      	strb	r3, [r7, #31]
 8003ffc:	e009      	b.n	8004012 <UART_SetConfig+0xe2>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a64      	ldr	r2, [pc, #400]	; (8004194 <UART_SetConfig+0x264>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d102      	bne.n	800400e <UART_SetConfig+0xde>
 8004008:	2300      	movs	r3, #0
 800400a:	77fb      	strb	r3, [r7, #31]
 800400c:	e001      	b.n	8004012 <UART_SetConfig+0xe2>
 800400e:	2310      	movs	r3, #16
 8004010:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800401a:	d15b      	bne.n	80040d4 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 800401c:	7ffb      	ldrb	r3, [r7, #31]
 800401e:	2b08      	cmp	r3, #8
 8004020:	d827      	bhi.n	8004072 <UART_SetConfig+0x142>
 8004022:	a201      	add	r2, pc, #4	; (adr r2, 8004028 <UART_SetConfig+0xf8>)
 8004024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004028:	0800404d 	.word	0x0800404d
 800402c:	08004055 	.word	0x08004055
 8004030:	0800405d 	.word	0x0800405d
 8004034:	08004073 	.word	0x08004073
 8004038:	08004063 	.word	0x08004063
 800403c:	08004073 	.word	0x08004073
 8004040:	08004073 	.word	0x08004073
 8004044:	08004073 	.word	0x08004073
 8004048:	0800406b 	.word	0x0800406b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800404c:	f7fe fbbc 	bl	80027c8 <HAL_RCC_GetPCLK1Freq>
 8004050:	61b8      	str	r0, [r7, #24]
        break;
 8004052:	e013      	b.n	800407c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004054:	f7fe fbda 	bl	800280c <HAL_RCC_GetPCLK2Freq>
 8004058:	61b8      	str	r0, [r7, #24]
        break;
 800405a:	e00f      	b.n	800407c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800405c:	4b4e      	ldr	r3, [pc, #312]	; (8004198 <UART_SetConfig+0x268>)
 800405e:	61bb      	str	r3, [r7, #24]
        break;
 8004060:	e00c      	b.n	800407c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004062:	f7fe fb3b 	bl	80026dc <HAL_RCC_GetSysClockFreq>
 8004066:	61b8      	str	r0, [r7, #24]
        break;
 8004068:	e008      	b.n	800407c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800406a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800406e:	61bb      	str	r3, [r7, #24]
        break;
 8004070:	e004      	b.n	800407c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004072:	2300      	movs	r3, #0
 8004074:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	77bb      	strb	r3, [r7, #30]
        break;
 800407a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d074      	beq.n	800416c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	005a      	lsls	r2, r3, #1
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	085b      	lsrs	r3, r3, #1
 800408c:	441a      	add	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	fbb2 f3f3 	udiv	r3, r2, r3
 8004096:	b29b      	uxth	r3, r3
 8004098:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	2b0f      	cmp	r3, #15
 800409e:	d916      	bls.n	80040ce <UART_SetConfig+0x19e>
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a6:	d212      	bcs.n	80040ce <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	f023 030f 	bic.w	r3, r3, #15
 80040b0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	085b      	lsrs	r3, r3, #1
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	b29a      	uxth	r2, r3
 80040be:	89fb      	ldrh	r3, [r7, #14]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	89fa      	ldrh	r2, [r7, #14]
 80040ca:	60da      	str	r2, [r3, #12]
 80040cc:	e04e      	b.n	800416c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	77bb      	strb	r3, [r7, #30]
 80040d2:	e04b      	b.n	800416c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040d4:	7ffb      	ldrb	r3, [r7, #31]
 80040d6:	2b08      	cmp	r3, #8
 80040d8:	d827      	bhi.n	800412a <UART_SetConfig+0x1fa>
 80040da:	a201      	add	r2, pc, #4	; (adr r2, 80040e0 <UART_SetConfig+0x1b0>)
 80040dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e0:	08004105 	.word	0x08004105
 80040e4:	0800410d 	.word	0x0800410d
 80040e8:	08004115 	.word	0x08004115
 80040ec:	0800412b 	.word	0x0800412b
 80040f0:	0800411b 	.word	0x0800411b
 80040f4:	0800412b 	.word	0x0800412b
 80040f8:	0800412b 	.word	0x0800412b
 80040fc:	0800412b 	.word	0x0800412b
 8004100:	08004123 	.word	0x08004123
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004104:	f7fe fb60 	bl	80027c8 <HAL_RCC_GetPCLK1Freq>
 8004108:	61b8      	str	r0, [r7, #24]
        break;
 800410a:	e013      	b.n	8004134 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800410c:	f7fe fb7e 	bl	800280c <HAL_RCC_GetPCLK2Freq>
 8004110:	61b8      	str	r0, [r7, #24]
        break;
 8004112:	e00f      	b.n	8004134 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004114:	4b20      	ldr	r3, [pc, #128]	; (8004198 <UART_SetConfig+0x268>)
 8004116:	61bb      	str	r3, [r7, #24]
        break;
 8004118:	e00c      	b.n	8004134 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800411a:	f7fe fadf 	bl	80026dc <HAL_RCC_GetSysClockFreq>
 800411e:	61b8      	str	r0, [r7, #24]
        break;
 8004120:	e008      	b.n	8004134 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004126:	61bb      	str	r3, [r7, #24]
        break;
 8004128:	e004      	b.n	8004134 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800412a:	2300      	movs	r3, #0
 800412c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	77bb      	strb	r3, [r7, #30]
        break;
 8004132:	bf00      	nop
    }

    if (pclk != 0U)
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d018      	beq.n	800416c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	085a      	lsrs	r2, r3, #1
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	441a      	add	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	fbb2 f3f3 	udiv	r3, r2, r3
 800414c:	b29b      	uxth	r3, r3
 800414e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	2b0f      	cmp	r3, #15
 8004154:	d908      	bls.n	8004168 <UART_SetConfig+0x238>
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800415c:	d204      	bcs.n	8004168 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	60da      	str	r2, [r3, #12]
 8004166:	e001      	b.n	800416c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004178:	7fbb      	ldrb	r3, [r7, #30]
}
 800417a:	4618      	mov	r0, r3
 800417c:	3720      	adds	r7, #32
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	efff69f3 	.word	0xefff69f3
 8004188:	40013800 	.word	0x40013800
 800418c:	40021000 	.word	0x40021000
 8004190:	40004400 	.word	0x40004400
 8004194:	40004800 	.word	0x40004800
 8004198:	007a1200 	.word	0x007a1200

0800419c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00a      	beq.n	800420a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	f003 0308 	and.w	r3, r3, #8
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	f003 0310 	and.w	r3, r3, #16
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00a      	beq.n	800424e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	f003 0320 	and.w	r3, r3, #32
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	430a      	orrs	r2, r1
 800426e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004278:	2b00      	cmp	r3, #0
 800427a:	d01a      	beq.n	80042b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800429a:	d10a      	bne.n	80042b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00a      	beq.n	80042d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	605a      	str	r2, [r3, #4]
  }
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af02      	add	r7, sp, #8
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042f0:	f7fc fdf2 	bl	8000ed8 <HAL_GetTick>
 80042f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0308 	and.w	r3, r3, #8
 8004300:	2b08      	cmp	r3, #8
 8004302:	d10e      	bne.n	8004322 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004304:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f82d 	bl	8004372 <UART_WaitOnFlagUntilTimeout>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e023      	b.n	800436a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b04      	cmp	r3, #4
 800432e:	d10e      	bne.n	800434e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004330:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f817 	bl	8004372 <UART_WaitOnFlagUntilTimeout>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e00d      	b.n	800436a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2220      	movs	r2, #32
 8004352:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2220      	movs	r2, #32
 8004358:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b084      	sub	sp, #16
 8004376:	af00      	add	r7, sp, #0
 8004378:	60f8      	str	r0, [r7, #12]
 800437a:	60b9      	str	r1, [r7, #8]
 800437c:	603b      	str	r3, [r7, #0]
 800437e:	4613      	mov	r3, r2
 8004380:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004382:	e05e      	b.n	8004442 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438a:	d05a      	beq.n	8004442 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800438c:	f7fc fda4 	bl	8000ed8 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	429a      	cmp	r2, r3
 800439a:	d302      	bcc.n	80043a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d11b      	bne.n	80043da <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043b0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 0201 	bic.w	r2, r2, #1
 80043c0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2220      	movs	r2, #32
 80043c6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2220      	movs	r2, #32
 80043cc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e043      	b.n	8004462 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d02c      	beq.n	8004442 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043f6:	d124      	bne.n	8004442 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004400:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004410:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0201 	bic.w	r2, r2, #1
 8004420:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2220      	movs	r2, #32
 8004426:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2220      	movs	r2, #32
 800442c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2220      	movs	r2, #32
 8004432:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e00f      	b.n	8004462 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	69da      	ldr	r2, [r3, #28]
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	4013      	ands	r3, r2
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	429a      	cmp	r2, r3
 8004450:	bf0c      	ite	eq
 8004452:	2301      	moveq	r3, #1
 8004454:	2300      	movne	r3, #0
 8004456:	b2db      	uxtb	r3, r3
 8004458:	461a      	mov	r2, r3
 800445a:	79fb      	ldrb	r3, [r7, #7]
 800445c:	429a      	cmp	r2, r3
 800445e:	d091      	beq.n	8004384 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
	...

0800446c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	4613      	mov	r3, r2
 8004478:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	88fa      	ldrh	r2, [r7, #6]
 8004484:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	88fa      	ldrh	r2, [r7, #6]
 800448c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800449e:	d10e      	bne.n	80044be <UART_Start_Receive_IT+0x52>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d105      	bne.n	80044b4 <UART_Start_Receive_IT+0x48>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80044ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044b2:	e02d      	b.n	8004510 <UART_Start_Receive_IT+0xa4>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	22ff      	movs	r2, #255	; 0xff
 80044b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044bc:	e028      	b.n	8004510 <UART_Start_Receive_IT+0xa4>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10d      	bne.n	80044e2 <UART_Start_Receive_IT+0x76>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d104      	bne.n	80044d8 <UART_Start_Receive_IT+0x6c>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	22ff      	movs	r2, #255	; 0xff
 80044d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044d6:	e01b      	b.n	8004510 <UART_Start_Receive_IT+0xa4>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	227f      	movs	r2, #127	; 0x7f
 80044dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044e0:	e016      	b.n	8004510 <UART_Start_Receive_IT+0xa4>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044ea:	d10d      	bne.n	8004508 <UART_Start_Receive_IT+0x9c>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d104      	bne.n	80044fe <UART_Start_Receive_IT+0x92>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	227f      	movs	r2, #127	; 0x7f
 80044f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044fc:	e008      	b.n	8004510 <UART_Start_Receive_IT+0xa4>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	223f      	movs	r2, #63	; 0x3f
 8004502:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004506:	e003      	b.n	8004510 <UART_Start_Receive_IT+0xa4>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2222      	movs	r2, #34	; 0x22
 800451c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	689a      	ldr	r2, [r3, #8]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f042 0201 	orr.w	r2, r2, #1
 800452c:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004536:	d107      	bne.n	8004548 <UART_Start_Receive_IT+0xdc>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d103      	bne.n	8004548 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	4a0c      	ldr	r2, [pc, #48]	; (8004574 <UART_Start_Receive_IT+0x108>)
 8004544:	665a      	str	r2, [r3, #100]	; 0x64
 8004546:	e002      	b.n	800454e <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4a0b      	ldr	r2, [pc, #44]	; (8004578 <UART_Start_Receive_IT+0x10c>)
 800454c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004564:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3714      	adds	r7, #20
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	0800470d 	.word	0x0800470d
 8004578:	08004639 	.word	0x08004639

0800457c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004592:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689a      	ldr	r2, [r3, #8]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 0201 	bic.w	r2, r2, #1
 80045a2:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d107      	bne.n	80045bc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 0210 	bic.w	r2, r2, #16
 80045ba:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2220      	movs	r2, #32
 80045c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	665a      	str	r2, [r3, #100]	; 0x64
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b084      	sub	sp, #16
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f7ff fc83 	bl	8003f04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045fe:	bf00      	nop
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b082      	sub	sp, #8
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800461c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2220      	movs	r2, #32
 8004622:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7ff fc60 	bl	8003ef0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004630:	bf00      	nop
 8004632:	3708      	adds	r7, #8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004646:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800464c:	2b22      	cmp	r3, #34	; 0x22
 800464e:	d151      	bne.n	80046f4 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004656:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004658:	89bb      	ldrh	r3, [r7, #12]
 800465a:	b2d9      	uxtb	r1, r3
 800465c:	89fb      	ldrh	r3, [r7, #14]
 800465e:	b2da      	uxtb	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004664:	400a      	ands	r2, r1
 8004666:	b2d2      	uxtb	r2, r2
 8004668:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466e:	1c5a      	adds	r2, r3, #1
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800467a:	b29b      	uxth	r3, r3
 800467c:	3b01      	subs	r3, #1
 800467e:	b29a      	uxth	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800468c:	b29b      	uxth	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d138      	bne.n	8004704 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80046a0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0201 	bic.w	r2, r2, #1
 80046b0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2220      	movs	r2, #32
 80046b6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d10f      	bne.n	80046e6 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 0210 	bic.w	r2, r2, #16
 80046d4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80046dc:	4619      	mov	r1, r3
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7ff fc1a 	bl	8003f18 <HAL_UARTEx_RxEventCallback>
 80046e4:	e002      	b.n	80046ec <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7fb fd7c 	bl	80001e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80046f2:	e007      	b.n	8004704 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	699a      	ldr	r2, [r3, #24]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f042 0208 	orr.w	r2, r2, #8
 8004702:	619a      	str	r2, [r3, #24]
}
 8004704:	bf00      	nop
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800471a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004720:	2b22      	cmp	r3, #34	; 0x22
 8004722:	d151      	bne.n	80047c8 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800472a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004730:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004732:	89ba      	ldrh	r2, [r7, #12]
 8004734:	89fb      	ldrh	r3, [r7, #14]
 8004736:	4013      	ands	r3, r2
 8004738:	b29a      	uxth	r2, r3
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004742:	1c9a      	adds	r2, r3, #2
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800474e:	b29b      	uxth	r3, r3
 8004750:	3b01      	subs	r3, #1
 8004752:	b29a      	uxth	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004760:	b29b      	uxth	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d138      	bne.n	80047d8 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004774:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	689a      	ldr	r2, [r3, #8]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 0201 	bic.w	r2, r2, #1
 8004784:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2220      	movs	r2, #32
 800478a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004796:	2b01      	cmp	r3, #1
 8004798:	d10f      	bne.n	80047ba <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 0210 	bic.w	r2, r2, #16
 80047a8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80047b0:	4619      	mov	r1, r3
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7ff fbb0 	bl	8003f18 <HAL_UARTEx_RxEventCallback>
 80047b8:	e002      	b.n	80047c0 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f7fb fd12 	bl	80001e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80047c6:	e007      	b.n	80047d8 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	699a      	ldr	r2, [r3, #24]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f042 0208 	orr.w	r2, r2, #8
 80047d6:	619a      	str	r2, [r3, #24]
}
 80047d8:	bf00      	nop
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <_ZdlPvj>:
 80047f4:	f000 b811 	b.w	800481a <_ZdlPv>

080047f8 <_Znwj>:
 80047f8:	2801      	cmp	r0, #1
 80047fa:	bf38      	it	cc
 80047fc:	2001      	movcc	r0, #1
 80047fe:	b510      	push	{r4, lr}
 8004800:	4604      	mov	r4, r0
 8004802:	4620      	mov	r0, r4
 8004804:	f000 f846 	bl	8004894 <malloc>
 8004808:	b930      	cbnz	r0, 8004818 <_Znwj+0x20>
 800480a:	f000 f809 	bl	8004820 <_ZSt15get_new_handlerv>
 800480e:	b908      	cbnz	r0, 8004814 <_Znwj+0x1c>
 8004810:	f000 f80e 	bl	8004830 <abort>
 8004814:	4780      	blx	r0
 8004816:	e7f4      	b.n	8004802 <_Znwj+0xa>
 8004818:	bd10      	pop	{r4, pc}

0800481a <_ZdlPv>:
 800481a:	f000 b843 	b.w	80048a4 <free>
	...

08004820 <_ZSt15get_new_handlerv>:
 8004820:	4b02      	ldr	r3, [pc, #8]	; (800482c <_ZSt15get_new_handlerv+0xc>)
 8004822:	6818      	ldr	r0, [r3, #0]
 8004824:	f3bf 8f5b 	dmb	ish
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	200001d4 	.word	0x200001d4

08004830 <abort>:
 8004830:	b508      	push	{r3, lr}
 8004832:	2006      	movs	r0, #6
 8004834:	f000 f928 	bl	8004a88 <raise>
 8004838:	2001      	movs	r0, #1
 800483a:	f7fc fa77 	bl	8000d2c <_exit>
	...

08004840 <__errno>:
 8004840:	4b01      	ldr	r3, [pc, #4]	; (8004848 <__errno+0x8>)
 8004842:	6818      	ldr	r0, [r3, #0]
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	2000000c 	.word	0x2000000c

0800484c <__libc_init_array>:
 800484c:	b570      	push	{r4, r5, r6, lr}
 800484e:	4d0d      	ldr	r5, [pc, #52]	; (8004884 <__libc_init_array+0x38>)
 8004850:	4c0d      	ldr	r4, [pc, #52]	; (8004888 <__libc_init_array+0x3c>)
 8004852:	1b64      	subs	r4, r4, r5
 8004854:	10a4      	asrs	r4, r4, #2
 8004856:	2600      	movs	r6, #0
 8004858:	42a6      	cmp	r6, r4
 800485a:	d109      	bne.n	8004870 <__libc_init_array+0x24>
 800485c:	4d0b      	ldr	r5, [pc, #44]	; (800488c <__libc_init_array+0x40>)
 800485e:	4c0c      	ldr	r4, [pc, #48]	; (8004890 <__libc_init_array+0x44>)
 8004860:	f000 f93c 	bl	8004adc <_init>
 8004864:	1b64      	subs	r4, r4, r5
 8004866:	10a4      	asrs	r4, r4, #2
 8004868:	2600      	movs	r6, #0
 800486a:	42a6      	cmp	r6, r4
 800486c:	d105      	bne.n	800487a <__libc_init_array+0x2e>
 800486e:	bd70      	pop	{r4, r5, r6, pc}
 8004870:	f855 3b04 	ldr.w	r3, [r5], #4
 8004874:	4798      	blx	r3
 8004876:	3601      	adds	r6, #1
 8004878:	e7ee      	b.n	8004858 <__libc_init_array+0xc>
 800487a:	f855 3b04 	ldr.w	r3, [r5], #4
 800487e:	4798      	blx	r3
 8004880:	3601      	adds	r6, #1
 8004882:	e7f2      	b.n	800486a <__libc_init_array+0x1e>
 8004884:	08004b2c 	.word	0x08004b2c
 8004888:	08004b2c 	.word	0x08004b2c
 800488c:	08004b2c 	.word	0x08004b2c
 8004890:	08004b30 	.word	0x08004b30

08004894 <malloc>:
 8004894:	4b02      	ldr	r3, [pc, #8]	; (80048a0 <malloc+0xc>)
 8004896:	4601      	mov	r1, r0
 8004898:	6818      	ldr	r0, [r3, #0]
 800489a:	f000 b863 	b.w	8004964 <_malloc_r>
 800489e:	bf00      	nop
 80048a0:	2000000c 	.word	0x2000000c

080048a4 <free>:
 80048a4:	4b02      	ldr	r3, [pc, #8]	; (80048b0 <free+0xc>)
 80048a6:	4601      	mov	r1, r0
 80048a8:	6818      	ldr	r0, [r3, #0]
 80048aa:	f000 b80b 	b.w	80048c4 <_free_r>
 80048ae:	bf00      	nop
 80048b0:	2000000c 	.word	0x2000000c

080048b4 <memset>:
 80048b4:	4402      	add	r2, r0
 80048b6:	4603      	mov	r3, r0
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d100      	bne.n	80048be <memset+0xa>
 80048bc:	4770      	bx	lr
 80048be:	f803 1b01 	strb.w	r1, [r3], #1
 80048c2:	e7f9      	b.n	80048b8 <memset+0x4>

080048c4 <_free_r>:
 80048c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048c6:	2900      	cmp	r1, #0
 80048c8:	d048      	beq.n	800495c <_free_r+0x98>
 80048ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048ce:	9001      	str	r0, [sp, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f1a1 0404 	sub.w	r4, r1, #4
 80048d6:	bfb8      	it	lt
 80048d8:	18e4      	addlt	r4, r4, r3
 80048da:	f000 f8f1 	bl	8004ac0 <__malloc_lock>
 80048de:	4a20      	ldr	r2, [pc, #128]	; (8004960 <_free_r+0x9c>)
 80048e0:	9801      	ldr	r0, [sp, #4]
 80048e2:	6813      	ldr	r3, [r2, #0]
 80048e4:	4615      	mov	r5, r2
 80048e6:	b933      	cbnz	r3, 80048f6 <_free_r+0x32>
 80048e8:	6063      	str	r3, [r4, #4]
 80048ea:	6014      	str	r4, [r2, #0]
 80048ec:	b003      	add	sp, #12
 80048ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80048f2:	f000 b8eb 	b.w	8004acc <__malloc_unlock>
 80048f6:	42a3      	cmp	r3, r4
 80048f8:	d90b      	bls.n	8004912 <_free_r+0x4e>
 80048fa:	6821      	ldr	r1, [r4, #0]
 80048fc:	1862      	adds	r2, r4, r1
 80048fe:	4293      	cmp	r3, r2
 8004900:	bf04      	itt	eq
 8004902:	681a      	ldreq	r2, [r3, #0]
 8004904:	685b      	ldreq	r3, [r3, #4]
 8004906:	6063      	str	r3, [r4, #4]
 8004908:	bf04      	itt	eq
 800490a:	1852      	addeq	r2, r2, r1
 800490c:	6022      	streq	r2, [r4, #0]
 800490e:	602c      	str	r4, [r5, #0]
 8004910:	e7ec      	b.n	80048ec <_free_r+0x28>
 8004912:	461a      	mov	r2, r3
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	b10b      	cbz	r3, 800491c <_free_r+0x58>
 8004918:	42a3      	cmp	r3, r4
 800491a:	d9fa      	bls.n	8004912 <_free_r+0x4e>
 800491c:	6811      	ldr	r1, [r2, #0]
 800491e:	1855      	adds	r5, r2, r1
 8004920:	42a5      	cmp	r5, r4
 8004922:	d10b      	bne.n	800493c <_free_r+0x78>
 8004924:	6824      	ldr	r4, [r4, #0]
 8004926:	4421      	add	r1, r4
 8004928:	1854      	adds	r4, r2, r1
 800492a:	42a3      	cmp	r3, r4
 800492c:	6011      	str	r1, [r2, #0]
 800492e:	d1dd      	bne.n	80048ec <_free_r+0x28>
 8004930:	681c      	ldr	r4, [r3, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	6053      	str	r3, [r2, #4]
 8004936:	4421      	add	r1, r4
 8004938:	6011      	str	r1, [r2, #0]
 800493a:	e7d7      	b.n	80048ec <_free_r+0x28>
 800493c:	d902      	bls.n	8004944 <_free_r+0x80>
 800493e:	230c      	movs	r3, #12
 8004940:	6003      	str	r3, [r0, #0]
 8004942:	e7d3      	b.n	80048ec <_free_r+0x28>
 8004944:	6825      	ldr	r5, [r4, #0]
 8004946:	1961      	adds	r1, r4, r5
 8004948:	428b      	cmp	r3, r1
 800494a:	bf04      	itt	eq
 800494c:	6819      	ldreq	r1, [r3, #0]
 800494e:	685b      	ldreq	r3, [r3, #4]
 8004950:	6063      	str	r3, [r4, #4]
 8004952:	bf04      	itt	eq
 8004954:	1949      	addeq	r1, r1, r5
 8004956:	6021      	streq	r1, [r4, #0]
 8004958:	6054      	str	r4, [r2, #4]
 800495a:	e7c7      	b.n	80048ec <_free_r+0x28>
 800495c:	b003      	add	sp, #12
 800495e:	bd30      	pop	{r4, r5, pc}
 8004960:	200001d8 	.word	0x200001d8

08004964 <_malloc_r>:
 8004964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004966:	1ccd      	adds	r5, r1, #3
 8004968:	f025 0503 	bic.w	r5, r5, #3
 800496c:	3508      	adds	r5, #8
 800496e:	2d0c      	cmp	r5, #12
 8004970:	bf38      	it	cc
 8004972:	250c      	movcc	r5, #12
 8004974:	2d00      	cmp	r5, #0
 8004976:	4606      	mov	r6, r0
 8004978:	db01      	blt.n	800497e <_malloc_r+0x1a>
 800497a:	42a9      	cmp	r1, r5
 800497c:	d903      	bls.n	8004986 <_malloc_r+0x22>
 800497e:	230c      	movs	r3, #12
 8004980:	6033      	str	r3, [r6, #0]
 8004982:	2000      	movs	r0, #0
 8004984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004986:	f000 f89b 	bl	8004ac0 <__malloc_lock>
 800498a:	4921      	ldr	r1, [pc, #132]	; (8004a10 <_malloc_r+0xac>)
 800498c:	680a      	ldr	r2, [r1, #0]
 800498e:	4614      	mov	r4, r2
 8004990:	b99c      	cbnz	r4, 80049ba <_malloc_r+0x56>
 8004992:	4f20      	ldr	r7, [pc, #128]	; (8004a14 <_malloc_r+0xb0>)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	b923      	cbnz	r3, 80049a2 <_malloc_r+0x3e>
 8004998:	4621      	mov	r1, r4
 800499a:	4630      	mov	r0, r6
 800499c:	f000 f83c 	bl	8004a18 <_sbrk_r>
 80049a0:	6038      	str	r0, [r7, #0]
 80049a2:	4629      	mov	r1, r5
 80049a4:	4630      	mov	r0, r6
 80049a6:	f000 f837 	bl	8004a18 <_sbrk_r>
 80049aa:	1c43      	adds	r3, r0, #1
 80049ac:	d123      	bne.n	80049f6 <_malloc_r+0x92>
 80049ae:	230c      	movs	r3, #12
 80049b0:	6033      	str	r3, [r6, #0]
 80049b2:	4630      	mov	r0, r6
 80049b4:	f000 f88a 	bl	8004acc <__malloc_unlock>
 80049b8:	e7e3      	b.n	8004982 <_malloc_r+0x1e>
 80049ba:	6823      	ldr	r3, [r4, #0]
 80049bc:	1b5b      	subs	r3, r3, r5
 80049be:	d417      	bmi.n	80049f0 <_malloc_r+0x8c>
 80049c0:	2b0b      	cmp	r3, #11
 80049c2:	d903      	bls.n	80049cc <_malloc_r+0x68>
 80049c4:	6023      	str	r3, [r4, #0]
 80049c6:	441c      	add	r4, r3
 80049c8:	6025      	str	r5, [r4, #0]
 80049ca:	e004      	b.n	80049d6 <_malloc_r+0x72>
 80049cc:	6863      	ldr	r3, [r4, #4]
 80049ce:	42a2      	cmp	r2, r4
 80049d0:	bf0c      	ite	eq
 80049d2:	600b      	streq	r3, [r1, #0]
 80049d4:	6053      	strne	r3, [r2, #4]
 80049d6:	4630      	mov	r0, r6
 80049d8:	f000 f878 	bl	8004acc <__malloc_unlock>
 80049dc:	f104 000b 	add.w	r0, r4, #11
 80049e0:	1d23      	adds	r3, r4, #4
 80049e2:	f020 0007 	bic.w	r0, r0, #7
 80049e6:	1ac2      	subs	r2, r0, r3
 80049e8:	d0cc      	beq.n	8004984 <_malloc_r+0x20>
 80049ea:	1a1b      	subs	r3, r3, r0
 80049ec:	50a3      	str	r3, [r4, r2]
 80049ee:	e7c9      	b.n	8004984 <_malloc_r+0x20>
 80049f0:	4622      	mov	r2, r4
 80049f2:	6864      	ldr	r4, [r4, #4]
 80049f4:	e7cc      	b.n	8004990 <_malloc_r+0x2c>
 80049f6:	1cc4      	adds	r4, r0, #3
 80049f8:	f024 0403 	bic.w	r4, r4, #3
 80049fc:	42a0      	cmp	r0, r4
 80049fe:	d0e3      	beq.n	80049c8 <_malloc_r+0x64>
 8004a00:	1a21      	subs	r1, r4, r0
 8004a02:	4630      	mov	r0, r6
 8004a04:	f000 f808 	bl	8004a18 <_sbrk_r>
 8004a08:	3001      	adds	r0, #1
 8004a0a:	d1dd      	bne.n	80049c8 <_malloc_r+0x64>
 8004a0c:	e7cf      	b.n	80049ae <_malloc_r+0x4a>
 8004a0e:	bf00      	nop
 8004a10:	200001d8 	.word	0x200001d8
 8004a14:	200001dc 	.word	0x200001dc

08004a18 <_sbrk_r>:
 8004a18:	b538      	push	{r3, r4, r5, lr}
 8004a1a:	4d06      	ldr	r5, [pc, #24]	; (8004a34 <_sbrk_r+0x1c>)
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	4604      	mov	r4, r0
 8004a20:	4608      	mov	r0, r1
 8004a22:	602b      	str	r3, [r5, #0]
 8004a24:	f7fc f98c 	bl	8000d40 <_sbrk>
 8004a28:	1c43      	adds	r3, r0, #1
 8004a2a:	d102      	bne.n	8004a32 <_sbrk_r+0x1a>
 8004a2c:	682b      	ldr	r3, [r5, #0]
 8004a2e:	b103      	cbz	r3, 8004a32 <_sbrk_r+0x1a>
 8004a30:	6023      	str	r3, [r4, #0]
 8004a32:	bd38      	pop	{r3, r4, r5, pc}
 8004a34:	200001e4 	.word	0x200001e4

08004a38 <_raise_r>:
 8004a38:	291f      	cmp	r1, #31
 8004a3a:	b538      	push	{r3, r4, r5, lr}
 8004a3c:	4604      	mov	r4, r0
 8004a3e:	460d      	mov	r5, r1
 8004a40:	d904      	bls.n	8004a4c <_raise_r+0x14>
 8004a42:	2316      	movs	r3, #22
 8004a44:	6003      	str	r3, [r0, #0]
 8004a46:	f04f 30ff 	mov.w	r0, #4294967295
 8004a4a:	bd38      	pop	{r3, r4, r5, pc}
 8004a4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004a4e:	b112      	cbz	r2, 8004a56 <_raise_r+0x1e>
 8004a50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004a54:	b94b      	cbnz	r3, 8004a6a <_raise_r+0x32>
 8004a56:	4620      	mov	r0, r4
 8004a58:	f000 f830 	bl	8004abc <_getpid_r>
 8004a5c:	462a      	mov	r2, r5
 8004a5e:	4601      	mov	r1, r0
 8004a60:	4620      	mov	r0, r4
 8004a62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a66:	f000 b817 	b.w	8004a98 <_kill_r>
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d00a      	beq.n	8004a84 <_raise_r+0x4c>
 8004a6e:	1c59      	adds	r1, r3, #1
 8004a70:	d103      	bne.n	8004a7a <_raise_r+0x42>
 8004a72:	2316      	movs	r3, #22
 8004a74:	6003      	str	r3, [r0, #0]
 8004a76:	2001      	movs	r0, #1
 8004a78:	e7e7      	b.n	8004a4a <_raise_r+0x12>
 8004a7a:	2400      	movs	r4, #0
 8004a7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004a80:	4628      	mov	r0, r5
 8004a82:	4798      	blx	r3
 8004a84:	2000      	movs	r0, #0
 8004a86:	e7e0      	b.n	8004a4a <_raise_r+0x12>

08004a88 <raise>:
 8004a88:	4b02      	ldr	r3, [pc, #8]	; (8004a94 <raise+0xc>)
 8004a8a:	4601      	mov	r1, r0
 8004a8c:	6818      	ldr	r0, [r3, #0]
 8004a8e:	f7ff bfd3 	b.w	8004a38 <_raise_r>
 8004a92:	bf00      	nop
 8004a94:	2000000c 	.word	0x2000000c

08004a98 <_kill_r>:
 8004a98:	b538      	push	{r3, r4, r5, lr}
 8004a9a:	4d07      	ldr	r5, [pc, #28]	; (8004ab8 <_kill_r+0x20>)
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	4604      	mov	r4, r0
 8004aa0:	4608      	mov	r0, r1
 8004aa2:	4611      	mov	r1, r2
 8004aa4:	602b      	str	r3, [r5, #0]
 8004aa6:	f7fc f931 	bl	8000d0c <_kill>
 8004aaa:	1c43      	adds	r3, r0, #1
 8004aac:	d102      	bne.n	8004ab4 <_kill_r+0x1c>
 8004aae:	682b      	ldr	r3, [r5, #0]
 8004ab0:	b103      	cbz	r3, 8004ab4 <_kill_r+0x1c>
 8004ab2:	6023      	str	r3, [r4, #0]
 8004ab4:	bd38      	pop	{r3, r4, r5, pc}
 8004ab6:	bf00      	nop
 8004ab8:	200001e4 	.word	0x200001e4

08004abc <_getpid_r>:
 8004abc:	f7fc b91e 	b.w	8000cfc <_getpid>

08004ac0 <__malloc_lock>:
 8004ac0:	4801      	ldr	r0, [pc, #4]	; (8004ac8 <__malloc_lock+0x8>)
 8004ac2:	f000 b809 	b.w	8004ad8 <__retarget_lock_acquire_recursive>
 8004ac6:	bf00      	nop
 8004ac8:	200001ec 	.word	0x200001ec

08004acc <__malloc_unlock>:
 8004acc:	4801      	ldr	r0, [pc, #4]	; (8004ad4 <__malloc_unlock+0x8>)
 8004ace:	f000 b804 	b.w	8004ada <__retarget_lock_release_recursive>
 8004ad2:	bf00      	nop
 8004ad4:	200001ec 	.word	0x200001ec

08004ad8 <__retarget_lock_acquire_recursive>:
 8004ad8:	4770      	bx	lr

08004ada <__retarget_lock_release_recursive>:
 8004ada:	4770      	bx	lr

08004adc <_init>:
 8004adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ade:	bf00      	nop
 8004ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ae2:	bc08      	pop	{r3}
 8004ae4:	469e      	mov	lr, r3
 8004ae6:	4770      	bx	lr

08004ae8 <_fini>:
 8004ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aea:	bf00      	nop
 8004aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aee:	bc08      	pop	{r3}
 8004af0:	469e      	mov	lr, r3
 8004af2:	4770      	bx	lr
