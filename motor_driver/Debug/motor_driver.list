
motor_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b48  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003cd0  08003cd0  00013cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d08  08003d08  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003d08  08003d08  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d08  08003d08  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d08  08003d08  00013d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d0c  08003d0c  00013d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003d10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  2000000c  08003d1c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08003d1c  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9e6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c0b  00000000  00000000  0002ca22  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cd0  00000000  00000000  0002e630  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c18  00000000  00000000  0002f300  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000034ca  00000000  00000000  0002ff18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ae85  00000000  00000000  000333e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a09dc  00000000  00000000  0003e267  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dec43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035c0  00000000  00000000  000decc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003cb8 	.word	0x08003cb8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003cb8 	.word	0x08003cb8

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fbf8 	bl	80009c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f816 	bl	8000200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f9c4 	bl	8000560 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001d8:	f000 f992 	bl	8000500 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80001dc:	f000 f864 	bl	80002a8 <MX_TIM1_Init>
  MX_TIM6_Init();
 80001e0:	f000 f956 	bl	8000490 <MX_TIM6_Init>
  MX_TIM3_Init();
 80001e4:	f000 f8fa 	bl	80003dc <MX_TIM3_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(1){
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80001e8:	2108      	movs	r1, #8
 80001ea:	4804      	ldr	r0, [pc, #16]	; (80001fc <main+0x34>)
 80001ec:	f000 ff82 	bl	80010f4 <HAL_GPIO_TogglePin>
		  HAL_Delay(1000);
 80001f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001f4:	f000 fc4a 	bl	8000a8c <HAL_Delay>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80001f8:	e7f6      	b.n	80001e8 <main+0x20>
 80001fa:	bf00      	nop
 80001fc:	48000400 	.word	0x48000400

08000200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b096      	sub	sp, #88	; 0x58
 8000204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000206:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800020a:	2228      	movs	r2, #40	; 0x28
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f003 fd4a 	bl	8003ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000214:	f107 031c 	add.w	r3, r7, #28
 8000218:	2200      	movs	r2, #0
 800021a:	601a      	str	r2, [r3, #0]
 800021c:	605a      	str	r2, [r3, #4]
 800021e:	609a      	str	r2, [r3, #8]
 8000220:	60da      	str	r2, [r3, #12]
 8000222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	60da      	str	r2, [r3, #12]
 8000230:	611a      	str	r2, [r3, #16]
 8000232:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000234:	2302      	movs	r3, #2
 8000236:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000238:	2301      	movs	r3, #1
 800023a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800023c:	2310      	movs	r3, #16
 800023e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000240:	2300      	movs	r3, #0
 8000242:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000244:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000248:	4618      	mov	r0, r3
 800024a:	f000 ff6d 	bl	8001128 <HAL_RCC_OscConfig>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000254:	f000 fa02 	bl	800065c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000258:	230f      	movs	r3, #15
 800025a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800025c:	2300      	movs	r3, #0
 800025e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000260:	2300      	movs	r3, #0
 8000262:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000268:	2300      	movs	r3, #0
 800026a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800026c:	f107 031c 	add.w	r3, r7, #28
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f001 fe60 	bl	8001f38 <HAL_RCC_ClockConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800027e:	f000 f9ed 	bl	800065c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000282:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000286:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000288:	2300      	movs	r3, #0
 800028a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	4618      	mov	r0, r3
 8000290:	f002 f888 	bl	80023a4 <HAL_RCCEx_PeriphCLKConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800029a:	f000 f9df 	bl	800065c <Error_Handler>
  }
}
 800029e:	bf00      	nop
 80002a0:	3758      	adds	r7, #88	; 0x58
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
	...

080002a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b096      	sub	sp, #88	; 0x58
 80002ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
 80002c4:	609a      	str	r2, [r3, #8]
 80002c6:	60da      	str	r2, [r3, #12]
 80002c8:	611a      	str	r2, [r3, #16]
 80002ca:	615a      	str	r2, [r3, #20]
 80002cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	222c      	movs	r2, #44	; 0x2c
 80002d2:	2100      	movs	r1, #0
 80002d4:	4618      	mov	r0, r3
 80002d6:	f003 fce7 	bl	8003ca8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002da:	4b3d      	ldr	r3, [pc, #244]	; (80003d0 <MX_TIM1_Init+0x128>)
 80002dc:	4a3d      	ldr	r2, [pc, #244]	; (80003d4 <MX_TIM1_Init+0x12c>)
 80002de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80002e0:	4b3b      	ldr	r3, [pc, #236]	; (80003d0 <MX_TIM1_Init+0x128>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002e6:	4b3a      	ldr	r3, [pc, #232]	; (80003d0 <MX_TIM1_Init+0x128>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 799;
 80002ec:	4b38      	ldr	r3, [pc, #224]	; (80003d0 <MX_TIM1_Init+0x128>)
 80002ee:	f240 321f 	movw	r2, #799	; 0x31f
 80002f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002f4:	4b36      	ldr	r3, [pc, #216]	; (80003d0 <MX_TIM1_Init+0x128>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80002fa:	4b35      	ldr	r3, [pc, #212]	; (80003d0 <MX_TIM1_Init+0x128>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000300:	4b33      	ldr	r3, [pc, #204]	; (80003d0 <MX_TIM1_Init+0x128>)
 8000302:	2280      	movs	r2, #128	; 0x80
 8000304:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000306:	4832      	ldr	r0, [pc, #200]	; (80003d0 <MX_TIM1_Init+0x128>)
 8000308:	f002 f9c9 	bl	800269e <HAL_TIM_PWM_Init>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000312:	f000 f9a3 	bl	800065c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000316:	2300      	movs	r3, #0
 8000318:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800031a:	2300      	movs	r3, #0
 800031c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800031e:	2300      	movs	r3, #0
 8000320:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000322:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000326:	4619      	mov	r1, r3
 8000328:	4829      	ldr	r0, [pc, #164]	; (80003d0 <MX_TIM1_Init+0x128>)
 800032a:	f002 fe3d 	bl	8002fa8 <HAL_TIMEx_MasterConfigSynchronization>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000334:	f000 f992 	bl	800065c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ASSYMETRIC_PWM2;
 8000338:	4b27      	ldr	r3, [pc, #156]	; (80003d8 <MX_TIM1_Init+0x130>)
 800033a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800033c:	2300      	movs	r3, #0
 800033e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000340:	2300      	movs	r3, #0
 8000342:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000344:	2300      	movs	r3, #0
 8000346:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000348:	2300      	movs	r3, #0
 800034a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800034c:	2300      	movs	r3, #0
 800034e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000350:	2300      	movs	r3, #0
 8000352:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000354:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000358:	2208      	movs	r2, #8
 800035a:	4619      	mov	r1, r3
 800035c:	481c      	ldr	r0, [pc, #112]	; (80003d0 <MX_TIM1_Init+0x128>)
 800035e:	f002 f9f5 	bl	800274c <HAL_TIM_PWM_ConfigChannel>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000368:	f000 f978 	bl	800065c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_3);
 800036c:	4b18      	ldr	r3, [pc, #96]	; (80003d0 <MX_TIM1_Init+0x128>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	69da      	ldr	r2, [r3, #28]
 8000372:	4b17      	ldr	r3, [pc, #92]	; (80003d0 <MX_TIM1_Init+0x128>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	f022 0208 	bic.w	r2, r2, #8
 800037a:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800037c:	2300      	movs	r3, #0
 800037e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000380:	2300      	movs	r3, #0
 8000382:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000384:	2300      	movs	r3, #0
 8000386:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 13;
 8000388:	230d      	movs	r3, #13
 800038a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800038c:	2300      	movs	r3, #0
 800038e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000390:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000394:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000396:	2300      	movs	r3, #0
 8000398:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800039a:	2300      	movs	r3, #0
 800039c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800039e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80003a2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80003a4:	2300      	movs	r3, #0
 80003a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80003a8:	2300      	movs	r3, #0
 80003aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	4619      	mov	r1, r3
 80003b0:	4807      	ldr	r0, [pc, #28]	; (80003d0 <MX_TIM1_Init+0x128>)
 80003b2:	f002 fe67 	bl	8003084 <HAL_TIMEx_ConfigBreakDeadTime>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80003bc:	f000 f94e 	bl	800065c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80003c0:	4803      	ldr	r0, [pc, #12]	; (80003d0 <MX_TIM1_Init+0x128>)
 80003c2:	f000 f9c7 	bl	8000754 <HAL_TIM_MspPostInit>

}
 80003c6:	bf00      	nop
 80003c8:	3758      	adds	r7, #88	; 0x58
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	200000c0 	.word	0x200000c0
 80003d4:	40012c00 	.word	0x40012c00
 80003d8:	00010070 	.word	0x00010070

080003dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b08a      	sub	sp, #40	; 0x28
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003e2:	f107 031c 	add.w	r3, r7, #28
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]
 80003ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003ee:	463b      	mov	r3, r7
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	605a      	str	r2, [r3, #4]
 80003f6:	609a      	str	r2, [r3, #8]
 80003f8:	60da      	str	r2, [r3, #12]
 80003fa:	611a      	str	r2, [r3, #16]
 80003fc:	615a      	str	r2, [r3, #20]
 80003fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000400:	4b21      	ldr	r3, [pc, #132]	; (8000488 <MX_TIM3_Init+0xac>)
 8000402:	4a22      	ldr	r2, [pc, #136]	; (800048c <MX_TIM3_Init+0xb0>)
 8000404:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000406:	4b20      	ldr	r3, [pc, #128]	; (8000488 <MX_TIM3_Init+0xac>)
 8000408:	2200      	movs	r2, #0
 800040a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800040c:	4b1e      	ldr	r3, [pc, #120]	; (8000488 <MX_TIM3_Init+0xac>)
 800040e:	2200      	movs	r2, #0
 8000410:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000412:	4b1d      	ldr	r3, [pc, #116]	; (8000488 <MX_TIM3_Init+0xac>)
 8000414:	2263      	movs	r2, #99	; 0x63
 8000416:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000418:	4b1b      	ldr	r3, [pc, #108]	; (8000488 <MX_TIM3_Init+0xac>)
 800041a:	2200      	movs	r2, #0
 800041c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800041e:	4b1a      	ldr	r3, [pc, #104]	; (8000488 <MX_TIM3_Init+0xac>)
 8000420:	2200      	movs	r2, #0
 8000422:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000424:	4818      	ldr	r0, [pc, #96]	; (8000488 <MX_TIM3_Init+0xac>)
 8000426:	f002 f93a 	bl	800269e <HAL_TIM_PWM_Init>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000430:	f000 f914 	bl	800065c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000434:	2300      	movs	r3, #0
 8000436:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000438:	2300      	movs	r3, #0
 800043a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800043c:	f107 031c 	add.w	r3, r7, #28
 8000440:	4619      	mov	r1, r3
 8000442:	4811      	ldr	r0, [pc, #68]	; (8000488 <MX_TIM3_Init+0xac>)
 8000444:	f002 fdb0 	bl	8002fa8 <HAL_TIMEx_MasterConfigSynchronization>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800044e:	f000 f905 	bl	800065c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000452:	2360      	movs	r3, #96	; 0x60
 8000454:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000456:	2300      	movs	r3, #0
 8000458:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800045a:	2300      	movs	r3, #0
 800045c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800045e:	2300      	movs	r3, #0
 8000460:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000462:	463b      	mov	r3, r7
 8000464:	2204      	movs	r2, #4
 8000466:	4619      	mov	r1, r3
 8000468:	4807      	ldr	r0, [pc, #28]	; (8000488 <MX_TIM3_Init+0xac>)
 800046a:	f002 f96f 	bl	800274c <HAL_TIM_PWM_ConfigChannel>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000474:	f000 f8f2 	bl	800065c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000478:	4803      	ldr	r0, [pc, #12]	; (8000488 <MX_TIM3_Init+0xac>)
 800047a:	f000 f96b 	bl	8000754 <HAL_TIM_MspPostInit>

}
 800047e:	bf00      	nop
 8000480:	3728      	adds	r7, #40	; 0x28
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	20000028 	.word	0x20000028
 800048c:	40000400 	.word	0x40000400

08000490 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	2200      	movs	r2, #0
 800049a:	601a      	str	r2, [r3, #0]
 800049c:	605a      	str	r2, [r3, #4]
 800049e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80004a0:	4b15      	ldr	r3, [pc, #84]	; (80004f8 <MX_TIM6_Init+0x68>)
 80004a2:	4a16      	ldr	r2, [pc, #88]	; (80004fc <MX_TIM6_Init+0x6c>)
 80004a4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 80004a6:	4b14      	ldr	r3, [pc, #80]	; (80004f8 <MX_TIM6_Init+0x68>)
 80004a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004ac:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ae:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <MX_TIM6_Init+0x68>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 800;
 80004b4:	4b10      	ldr	r3, [pc, #64]	; (80004f8 <MX_TIM6_Init+0x68>)
 80004b6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80004ba:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004bc:	4b0e      	ldr	r3, [pc, #56]	; (80004f8 <MX_TIM6_Init+0x68>)
 80004be:	2280      	movs	r2, #128	; 0x80
 80004c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80004c2:	480d      	ldr	r0, [pc, #52]	; (80004f8 <MX_TIM6_Init+0x68>)
 80004c4:	f002 f894 	bl	80025f0 <HAL_TIM_Base_Init>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80004ce:	f000 f8c5 	bl	800065c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004d2:	2300      	movs	r3, #0
 80004d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004d6:	2300      	movs	r3, #0
 80004d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	4619      	mov	r1, r3
 80004de:	4806      	ldr	r0, [pc, #24]	; (80004f8 <MX_TIM6_Init+0x68>)
 80004e0:	f002 fd62 	bl	8002fa8 <HAL_TIMEx_MasterConfigSynchronization>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80004ea:	f000 f8b7 	bl	800065c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80004ee:	bf00      	nop
 80004f0:	3710      	adds	r7, #16
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	20000074 	.word	0x20000074
 80004fc:	40001000 	.word	0x40001000

08000500 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000504:	4b14      	ldr	r3, [pc, #80]	; (8000558 <MX_USART2_UART_Init+0x58>)
 8000506:	4a15      	ldr	r2, [pc, #84]	; (800055c <MX_USART2_UART_Init+0x5c>)
 8000508:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800050a:	4b13      	ldr	r3, [pc, #76]	; (8000558 <MX_USART2_UART_Init+0x58>)
 800050c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000510:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000512:	4b11      	ldr	r3, [pc, #68]	; (8000558 <MX_USART2_UART_Init+0x58>)
 8000514:	2200      	movs	r2, #0
 8000516:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000518:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <MX_USART2_UART_Init+0x58>)
 800051a:	2200      	movs	r2, #0
 800051c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800051e:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <MX_USART2_UART_Init+0x58>)
 8000520:	2200      	movs	r2, #0
 8000522:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000524:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <MX_USART2_UART_Init+0x58>)
 8000526:	220c      	movs	r2, #12
 8000528:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800052a:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <MX_USART2_UART_Init+0x58>)
 800052c:	2200      	movs	r2, #0
 800052e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000530:	4b09      	ldr	r3, [pc, #36]	; (8000558 <MX_USART2_UART_Init+0x58>)
 8000532:	2200      	movs	r2, #0
 8000534:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000536:	4b08      	ldr	r3, [pc, #32]	; (8000558 <MX_USART2_UART_Init+0x58>)
 8000538:	2200      	movs	r2, #0
 800053a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <MX_USART2_UART_Init+0x58>)
 800053e:	2200      	movs	r2, #0
 8000540:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000542:	4805      	ldr	r0, [pc, #20]	; (8000558 <MX_USART2_UART_Init+0x58>)
 8000544:	f002 fe16 	bl	8003174 <HAL_UART_Init>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800054e:	f000 f885 	bl	800065c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	2000010c 	.word	0x2000010c
 800055c:	40004400 	.word	0x40004400

08000560 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b088      	sub	sp, #32
 8000564:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 030c 	add.w	r3, r7, #12
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	4b36      	ldr	r3, [pc, #216]	; (8000650 <MX_GPIO_Init+0xf0>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	4a35      	ldr	r2, [pc, #212]	; (8000650 <MX_GPIO_Init+0xf0>)
 800057c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000580:	6153      	str	r3, [r2, #20]
 8000582:	4b33      	ldr	r3, [pc, #204]	; (8000650 <MX_GPIO_Init+0xf0>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800058e:	4b30      	ldr	r3, [pc, #192]	; (8000650 <MX_GPIO_Init+0xf0>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	4a2f      	ldr	r2, [pc, #188]	; (8000650 <MX_GPIO_Init+0xf0>)
 8000594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000598:	6153      	str	r3, [r2, #20]
 800059a:	4b2d      	ldr	r3, [pc, #180]	; (8000650 <MX_GPIO_Init+0xf0>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|LD_1_Pin, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80005ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b0:	f000 fd88 	bl	80010c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2108      	movs	r1, #8
 80005b8:	4826      	ldr	r0, [pc, #152]	; (8000654 <MX_GPIO_Init+0xf4>)
 80005ba:	f000 fd83 	bl	80010c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EN_A_Pin EN_B_Pin */
  GPIO_InitStruct.Pin = EN_A_Pin|EN_B_Pin;
 80005be:	230a      	movs	r3, #10
 80005c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005c2:	4b25      	ldr	r3, [pc, #148]	; (8000658 <MX_GPIO_Init+0xf8>)
 80005c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	4619      	mov	r1, r3
 80005d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d4:	f000 fc04 	bl	8000de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005d8:	2310      	movs	r3, #16
 80005da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	4619      	mov	r1, r3
 80005ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ee:	f000 fbf7 	bl	8000de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MN_1_Pin MN_2_Pin MN_3_Pin */
  GPIO_InitStruct.Pin = MN_1_Pin|MN_2_Pin|MN_3_Pin;
 80005f2:	23e0      	movs	r3, #224	; 0xe0
 80005f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f6:	2300      	movs	r3, #0
 80005f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005fa:	2301      	movs	r3, #1
 80005fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fe:	f107 030c 	add.w	r3, r7, #12
 8000602:	4619      	mov	r1, r3
 8000604:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000608:	f000 fbea 	bl	8000de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 LD_1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_11|LD_1_Pin;
 800060c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000610:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000612:	2301      	movs	r3, #1
 8000614:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061a:	2300      	movs	r3, #0
 800061c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061e:	f107 030c 	add.w	r3, r7, #12
 8000622:	4619      	mov	r1, r3
 8000624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000628:	f000 fbda 	bl	8000de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800062c:	2308      	movs	r3, #8
 800062e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000630:	2301      	movs	r3, #1
 8000632:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000638:	2300      	movs	r3, #0
 800063a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	4619      	mov	r1, r3
 8000642:	4804      	ldr	r0, [pc, #16]	; (8000654 <MX_GPIO_Init+0xf4>)
 8000644:	f000 fbcc 	bl	8000de0 <HAL_GPIO_Init>

}
 8000648:	bf00      	nop
 800064a:	3720      	adds	r7, #32
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40021000 	.word	0x40021000
 8000654:	48000400 	.word	0x48000400
 8000658:	10110000 	.word	0x10110000

0800065c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000660:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000662:	e7fe      	b.n	8000662 <Error_Handler+0x6>

08000664 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <HAL_MspInit+0x44>)
 800066c:	699b      	ldr	r3, [r3, #24]
 800066e:	4a0e      	ldr	r2, [pc, #56]	; (80006a8 <HAL_MspInit+0x44>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	6193      	str	r3, [r2, #24]
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <HAL_MspInit+0x44>)
 8000678:	699b      	ldr	r3, [r3, #24]
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <HAL_MspInit+0x44>)
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	4a08      	ldr	r2, [pc, #32]	; (80006a8 <HAL_MspInit+0x44>)
 8000688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068c:	61d3      	str	r3, [r2, #28]
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <HAL_MspInit+0x44>)
 8000690:	69db      	ldr	r3, [r3, #28]
 8000692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	40021000 	.word	0x40021000

080006ac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a13      	ldr	r2, [pc, #76]	; (8000708 <HAL_TIM_PWM_MspInit+0x5c>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d10c      	bne.n	80006d8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80006be:	4b13      	ldr	r3, [pc, #76]	; (800070c <HAL_TIM_PWM_MspInit+0x60>)
 80006c0:	699b      	ldr	r3, [r3, #24]
 80006c2:	4a12      	ldr	r2, [pc, #72]	; (800070c <HAL_TIM_PWM_MspInit+0x60>)
 80006c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006c8:	6193      	str	r3, [r2, #24]
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <HAL_TIM_PWM_MspInit+0x60>)
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80006d6:	e010      	b.n	80006fa <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a0c      	ldr	r2, [pc, #48]	; (8000710 <HAL_TIM_PWM_MspInit+0x64>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d10b      	bne.n	80006fa <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80006e2:	4b0a      	ldr	r3, [pc, #40]	; (800070c <HAL_TIM_PWM_MspInit+0x60>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	4a09      	ldr	r2, [pc, #36]	; (800070c <HAL_TIM_PWM_MspInit+0x60>)
 80006e8:	f043 0302 	orr.w	r3, r3, #2
 80006ec:	61d3      	str	r3, [r2, #28]
 80006ee:	4b07      	ldr	r3, [pc, #28]	; (800070c <HAL_TIM_PWM_MspInit+0x60>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	f003 0302 	and.w	r3, r3, #2
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
}
 80006fa:	bf00      	nop
 80006fc:	3714      	adds	r7, #20
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	40012c00 	.word	0x40012c00
 800070c:	40021000 	.word	0x40021000
 8000710:	40000400 	.word	0x40000400

08000714 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a0a      	ldr	r2, [pc, #40]	; (800074c <HAL_TIM_Base_MspInit+0x38>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d10b      	bne.n	800073e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000726:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <HAL_TIM_Base_MspInit+0x3c>)
 8000728:	69db      	ldr	r3, [r3, #28]
 800072a:	4a09      	ldr	r2, [pc, #36]	; (8000750 <HAL_TIM_Base_MspInit+0x3c>)
 800072c:	f043 0310 	orr.w	r3, r3, #16
 8000730:	61d3      	str	r3, [r2, #28]
 8000732:	4b07      	ldr	r3, [pc, #28]	; (8000750 <HAL_TIM_Base_MspInit+0x3c>)
 8000734:	69db      	ldr	r3, [r3, #28]
 8000736:	f003 0310 	and.w	r3, r3, #16
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800073e:	bf00      	nop
 8000740:	3714      	adds	r7, #20
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	40001000 	.word	0x40001000
 8000750:	40021000 	.word	0x40021000

08000754 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	; 0x28
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a31      	ldr	r2, [pc, #196]	; (8000838 <HAL_TIM_MspPostInit+0xe4>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d13a      	bne.n	80007ec <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	4b31      	ldr	r3, [pc, #196]	; (800083c <HAL_TIM_MspPostInit+0xe8>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	4a30      	ldr	r2, [pc, #192]	; (800083c <HAL_TIM_MspPostInit+0xe8>)
 800077c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000780:	6153      	str	r3, [r2, #20]
 8000782:	4b2e      	ldr	r3, [pc, #184]	; (800083c <HAL_TIM_MspPostInit+0xe8>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	4b2b      	ldr	r3, [pc, #172]	; (800083c <HAL_TIM_MspPostInit+0xe8>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	4a2a      	ldr	r2, [pc, #168]	; (800083c <HAL_TIM_MspPostInit+0xe8>)
 8000794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000798:	6153      	str	r3, [r2, #20]
 800079a:	4b28      	ldr	r3, [pc, #160]	; (800083c <HAL_TIM_MspPostInit+0xe8>)
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB1     ------> TIM1_CH3N
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007a6:	2302      	movs	r3, #2
 80007a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007aa:	2302      	movs	r3, #2
 80007ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80007b6:	2306      	movs	r3, #6
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	4619      	mov	r1, r3
 80007c0:	481f      	ldr	r0, [pc, #124]	; (8000840 <HAL_TIM_MspPostInit+0xec>)
 80007c2:	f000 fb0d 	bl	8000de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007cc:	2302      	movs	r3, #2
 80007ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2300      	movs	r3, #0
 80007d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80007d8:	2306      	movs	r3, #6
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4619      	mov	r1, r3
 80007e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e6:	f000 fafb 	bl	8000de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80007ea:	e020      	b.n	800082e <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM3)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a14      	ldr	r2, [pc, #80]	; (8000844 <HAL_TIM_MspPostInit+0xf0>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d11b      	bne.n	800082e <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <HAL_TIM_MspPostInit+0xe8>)
 80007f8:	695b      	ldr	r3, [r3, #20]
 80007fa:	4a10      	ldr	r2, [pc, #64]	; (800083c <HAL_TIM_MspPostInit+0xe8>)
 80007fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000800:	6153      	str	r3, [r2, #20]
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <HAL_TIM_MspPostInit+0xe8>)
 8000804:	695b      	ldr	r3, [r3, #20]
 8000806:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800080e:	2320      	movs	r3, #32
 8000810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000812:	2302      	movs	r3, #2
 8000814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800081e:	2302      	movs	r3, #2
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4619      	mov	r1, r3
 8000828:	4805      	ldr	r0, [pc, #20]	; (8000840 <HAL_TIM_MspPostInit+0xec>)
 800082a:	f000 fad9 	bl	8000de0 <HAL_GPIO_Init>
}
 800082e:	bf00      	nop
 8000830:	3728      	adds	r7, #40	; 0x28
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40012c00 	.word	0x40012c00
 800083c:	40021000 	.word	0x40021000
 8000840:	48000400 	.word	0x48000400
 8000844:	40000400 	.word	0x40000400

08000848 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a1c      	ldr	r2, [pc, #112]	; (80008d8 <HAL_UART_MspInit+0x90>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d131      	bne.n	80008ce <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800086a:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <HAL_UART_MspInit+0x94>)
 800086c:	69db      	ldr	r3, [r3, #28]
 800086e:	4a1b      	ldr	r2, [pc, #108]	; (80008dc <HAL_UART_MspInit+0x94>)
 8000870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000874:	61d3      	str	r3, [r2, #28]
 8000876:	4b19      	ldr	r3, [pc, #100]	; (80008dc <HAL_UART_MspInit+0x94>)
 8000878:	69db      	ldr	r3, [r3, #28]
 800087a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	4b16      	ldr	r3, [pc, #88]	; (80008dc <HAL_UART_MspInit+0x94>)
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	4a15      	ldr	r2, [pc, #84]	; (80008dc <HAL_UART_MspInit+0x94>)
 8000888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800088c:	6153      	str	r3, [r2, #20]
 800088e:	4b13      	ldr	r3, [pc, #76]	; (80008dc <HAL_UART_MspInit+0x94>)
 8000890:	695b      	ldr	r3, [r3, #20]
 8000892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 800089a:	f248 0304 	movw	r3, #32772	; 0x8004
 800089e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a8:	2303      	movs	r3, #3
 80008aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008ac:	2307      	movs	r3, #7
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4619      	mov	r1, r3
 80008b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ba:	f000 fa91 	bl	8000de0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2100      	movs	r1, #0
 80008c2:	2026      	movs	r0, #38	; 0x26
 80008c4:	f000 f9df 	bl	8000c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008c8:	2026      	movs	r0, #38	; 0x26
 80008ca:	f000 f9f8 	bl	8000cbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008ce:	bf00      	nop
 80008d0:	3728      	adds	r7, #40	; 0x28
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40004400 	.word	0x40004400
 80008dc:	40021000 	.word	0x40021000

080008e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <NMI_Handler+0x4>

080008e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <HardFault_Handler+0x4>

080008ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <MemManage_Handler+0x4>

080008f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <BusFault_Handler+0x4>

080008f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <UsageFault_Handler+0x4>

080008fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800092c:	f000 f88e 	bl	8000a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}

08000934 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000938:	4802      	ldr	r0, [pc, #8]	; (8000944 <USART2_IRQHandler+0x10>)
 800093a:	f002 fc69 	bl	8003210 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	2000010c 	.word	0x2000010c

08000948 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <SystemInit+0x20>)
 800094e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000952:	4a05      	ldr	r2, [pc, #20]	; (8000968 <SystemInit+0x20>)
 8000954:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000958:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800096c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009a4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000970:	480d      	ldr	r0, [pc, #52]	; (80009a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000972:	490e      	ldr	r1, [pc, #56]	; (80009ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000974:	4a0e      	ldr	r2, [pc, #56]	; (80009b0 <LoopForever+0xe>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000978:	e002      	b.n	8000980 <LoopCopyDataInit>

0800097a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800097a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800097c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800097e:	3304      	adds	r3, #4

08000980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000984:	d3f9      	bcc.n	800097a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000986:	4a0b      	ldr	r2, [pc, #44]	; (80009b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000988:	4c0b      	ldr	r4, [pc, #44]	; (80009b8 <LoopForever+0x16>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800098c:	e001      	b.n	8000992 <LoopFillZerobss>

0800098e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800098e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000990:	3204      	adds	r2, #4

08000992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000994:	d3fb      	bcc.n	800098e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000996:	f7ff ffd7 	bl	8000948 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800099a:	f003 f961 	bl	8003c60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800099e:	f7ff fc13 	bl	80001c8 <main>

080009a2 <LoopForever>:

LoopForever:
    b LoopForever
 80009a2:	e7fe      	b.n	80009a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009a4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80009a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009b0:	08003d10 	.word	0x08003d10
  ldr r2, =_sbss
 80009b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009b8:	20000194 	.word	0x20000194

080009bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009bc:	e7fe      	b.n	80009bc <ADC1_2_IRQHandler>
	...

080009c0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c4:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <HAL_Init+0x28>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a07      	ldr	r2, [pc, #28]	; (80009e8 <HAL_Init+0x28>)
 80009ca:	f043 0310 	orr.w	r3, r3, #16
 80009ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d0:	2003      	movs	r0, #3
 80009d2:	f000 f94d 	bl	8000c70 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009d6:	2000      	movs	r0, #0
 80009d8:	f000 f808 	bl	80009ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009dc:	f7ff fe42 	bl	8000664 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e0:	2300      	movs	r3, #0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40022000 	.word	0x40022000

080009ec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f4:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <HAL_InitTick+0x54>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <HAL_InitTick+0x58>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	4619      	mov	r1, r3
 80009fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 f965 	bl	8000cda <HAL_SYSTICK_Config>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	e00e      	b.n	8000a38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2b0f      	cmp	r3, #15
 8000a1e:	d80a      	bhi.n	8000a36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a20:	2200      	movs	r2, #0
 8000a22:	6879      	ldr	r1, [r7, #4]
 8000a24:	f04f 30ff 	mov.w	r0, #4294967295
 8000a28:	f000 f92d 	bl	8000c86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a2c:	4a06      	ldr	r2, [pc, #24]	; (8000a48 <HAL_InitTick+0x5c>)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a32:	2300      	movs	r3, #0
 8000a34:	e000      	b.n	8000a38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000000 	.word	0x20000000
 8000a44:	20000008 	.word	0x20000008
 8000a48:	20000004 	.word	0x20000004

08000a4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_IncTick+0x20>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_IncTick+0x24>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	4a04      	ldr	r2, [pc, #16]	; (8000a70 <HAL_IncTick+0x24>)
 8000a5e:	6013      	str	r3, [r2, #0]
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	20000008 	.word	0x20000008
 8000a70:	20000190 	.word	0x20000190

08000a74 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a78:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <HAL_GetTick+0x14>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	20000190 	.word	0x20000190

08000a8c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a94:	f7ff ffee 	bl	8000a74 <HAL_GetTick>
 8000a98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa4:	d005      	beq.n	8000ab2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <HAL_Delay+0x40>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	4413      	add	r3, r2
 8000ab0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ab2:	bf00      	nop
 8000ab4:	f7ff ffde 	bl	8000a74 <HAL_GetTick>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d8f7      	bhi.n	8000ab4 <HAL_Delay+0x28>
  {
  }
}
 8000ac4:	bf00      	nop
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000008 	.word	0x20000008

08000ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f003 0307 	and.w	r3, r3, #7
 8000ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aec:	4013      	ands	r3, r2
 8000aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b02:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <__NVIC_SetPriorityGrouping+0x44>)
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	60d3      	str	r3, [r2, #12]
}
 8000b08:	bf00      	nop
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b1c:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <__NVIC_GetPriorityGrouping+0x18>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	0a1b      	lsrs	r3, r3, #8
 8000b22:	f003 0307 	and.w	r3, r3, #7
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	db0b      	blt.n	8000b5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	f003 021f 	and.w	r2, r3, #31
 8000b4c:	4907      	ldr	r1, [pc, #28]	; (8000b6c <__NVIC_EnableIRQ+0x38>)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	095b      	lsrs	r3, r3, #5
 8000b54:	2001      	movs	r0, #1
 8000b56:	fa00 f202 	lsl.w	r2, r0, r2
 8000b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000e100 	.word	0xe000e100

08000b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	6039      	str	r1, [r7, #0]
 8000b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	db0a      	blt.n	8000b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	490c      	ldr	r1, [pc, #48]	; (8000bbc <__NVIC_SetPriority+0x4c>)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	0112      	lsls	r2, r2, #4
 8000b90:	b2d2      	uxtb	r2, r2
 8000b92:	440b      	add	r3, r1
 8000b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b98:	e00a      	b.n	8000bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4908      	ldr	r1, [pc, #32]	; (8000bc0 <__NVIC_SetPriority+0x50>)
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	f003 030f 	and.w	r3, r3, #15
 8000ba6:	3b04      	subs	r3, #4
 8000ba8:	0112      	lsls	r2, r2, #4
 8000baa:	b2d2      	uxtb	r2, r2
 8000bac:	440b      	add	r3, r1
 8000bae:	761a      	strb	r2, [r3, #24]
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000e100 	.word	0xe000e100
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b089      	sub	sp, #36	; 0x24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	f1c3 0307 	rsb	r3, r3, #7
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	bf28      	it	cs
 8000be2:	2304      	movcs	r3, #4
 8000be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	3304      	adds	r3, #4
 8000bea:	2b06      	cmp	r3, #6
 8000bec:	d902      	bls.n	8000bf4 <NVIC_EncodePriority+0x30>
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3b03      	subs	r3, #3
 8000bf2:	e000      	b.n	8000bf6 <NVIC_EncodePriority+0x32>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43da      	mvns	r2, r3
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	401a      	ands	r2, r3
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	fa01 f303 	lsl.w	r3, r1, r3
 8000c16:	43d9      	mvns	r1, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c1c:	4313      	orrs	r3, r2
         );
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3724      	adds	r7, #36	; 0x24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
	...

08000c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c3c:	d301      	bcc.n	8000c42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e00f      	b.n	8000c62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c42:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <SysTick_Config+0x40>)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c4a:	210f      	movs	r1, #15
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	f7ff ff8e 	bl	8000b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <SysTick_Config+0x40>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c5a:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <SysTick_Config+0x40>)
 8000c5c:	2207      	movs	r2, #7
 8000c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	e000e010 	.word	0xe000e010

08000c70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff ff29 	bl	8000ad0 <__NVIC_SetPriorityGrouping>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b086      	sub	sp, #24
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	60b9      	str	r1, [r7, #8]
 8000c90:	607a      	str	r2, [r7, #4]
 8000c92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c98:	f7ff ff3e 	bl	8000b18 <__NVIC_GetPriorityGrouping>
 8000c9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	68b9      	ldr	r1, [r7, #8]
 8000ca2:	6978      	ldr	r0, [r7, #20]
 8000ca4:	f7ff ff8e 	bl	8000bc4 <NVIC_EncodePriority>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cae:	4611      	mov	r1, r2
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff5d 	bl	8000b70 <__NVIC_SetPriority>
}
 8000cb6:	bf00      	nop
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ff31 	bl	8000b34 <__NVIC_EnableIRQ>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff ffa2 	bl	8000c2c <SysTick_Config>
 8000ce8:	4603      	mov	r3, r0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b083      	sub	sp, #12
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d008      	beq.n	8000d16 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2204      	movs	r2, #4
 8000d08:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e020      	b.n	8000d58 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f022 020e 	bic.w	r2, r2, #14
 8000d24:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f022 0201 	bic.w	r2, r2, #1
 8000d34:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d3e:	2101      	movs	r1, #1
 8000d40:	fa01 f202 	lsl.w	r2, r1, r2
 8000d44:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2201      	movs	r2, #1
 8000d4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2200      	movs	r2, #0
 8000d52:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000d56:	2300      	movs	r3, #0
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d005      	beq.n	8000d86 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2204      	movs	r2, #4
 8000d7e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	73fb      	strb	r3, [r7, #15]
 8000d84:	e027      	b.n	8000dd6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f022 020e 	bic.w	r2, r2, #14
 8000d94:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f022 0201 	bic.w	r2, r2, #1
 8000da4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dae:	2101      	movs	r1, #1
 8000db0:	fa01 f202 	lsl.w	r2, r1, r2
 8000db4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2201      	movs	r2, #1
 8000dba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d003      	beq.n	8000dd6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	4798      	blx	r3
    } 
  }
  return status;
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3710      	adds	r7, #16
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b087      	sub	sp, #28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dee:	e14e      	b.n	800108e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	2101      	movs	r1, #1
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f000 8140 	beq.w	8001088 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d00b      	beq.n	8000e28 <HAL_GPIO_Init+0x48>
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d007      	beq.n	8000e28 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e1c:	2b11      	cmp	r3, #17
 8000e1e:	d003      	beq.n	8000e28 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	2b12      	cmp	r3, #18
 8000e26:	d130      	bne.n	8000e8a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	2203      	movs	r2, #3
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	68da      	ldr	r2, [r3, #12]
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e5e:	2201      	movs	r2, #1
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43db      	mvns	r3, r3
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	091b      	lsrs	r3, r3, #4
 8000e74:	f003 0201 	and.w	r2, r3, #1
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	68db      	ldr	r3, [r3, #12]
 8000e8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	2203      	movs	r2, #3
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	689a      	ldr	r2, [r3, #8]
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d003      	beq.n	8000eca <HAL_GPIO_Init+0xea>
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b12      	cmp	r3, #18
 8000ec8:	d123      	bne.n	8000f12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	08da      	lsrs	r2, r3, #3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	3208      	adds	r2, #8
 8000ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	220f      	movs	r2, #15
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	691a      	ldr	r2, [r3, #16]
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	f003 0307 	and.w	r3, r3, #7
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	08da      	lsrs	r2, r3, #3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3208      	adds	r2, #8
 8000f0c:	6939      	ldr	r1, [r7, #16]
 8000f0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 0203 	and.w	r2, r3, #3
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f000 809a 	beq.w	8001088 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f54:	4b55      	ldr	r3, [pc, #340]	; (80010ac <HAL_GPIO_Init+0x2cc>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	4a54      	ldr	r2, [pc, #336]	; (80010ac <HAL_GPIO_Init+0x2cc>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	6193      	str	r3, [r2, #24]
 8000f60:	4b52      	ldr	r3, [pc, #328]	; (80010ac <HAL_GPIO_Init+0x2cc>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f6c:	4a50      	ldr	r2, [pc, #320]	; (80010b0 <HAL_GPIO_Init+0x2d0>)
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	089b      	lsrs	r3, r3, #2
 8000f72:	3302      	adds	r3, #2
 8000f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	f003 0303 	and.w	r3, r3, #3
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	220f      	movs	r2, #15
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f96:	d013      	beq.n	8000fc0 <HAL_GPIO_Init+0x1e0>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a46      	ldr	r2, [pc, #280]	; (80010b4 <HAL_GPIO_Init+0x2d4>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d00d      	beq.n	8000fbc <HAL_GPIO_Init+0x1dc>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a45      	ldr	r2, [pc, #276]	; (80010b8 <HAL_GPIO_Init+0x2d8>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d007      	beq.n	8000fb8 <HAL_GPIO_Init+0x1d8>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a44      	ldr	r2, [pc, #272]	; (80010bc <HAL_GPIO_Init+0x2dc>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d101      	bne.n	8000fb4 <HAL_GPIO_Init+0x1d4>
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e006      	b.n	8000fc2 <HAL_GPIO_Init+0x1e2>
 8000fb4:	2305      	movs	r3, #5
 8000fb6:	e004      	b.n	8000fc2 <HAL_GPIO_Init+0x1e2>
 8000fb8:	2302      	movs	r3, #2
 8000fba:	e002      	b.n	8000fc2 <HAL_GPIO_Init+0x1e2>
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e000      	b.n	8000fc2 <HAL_GPIO_Init+0x1e2>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	697a      	ldr	r2, [r7, #20]
 8000fc4:	f002 0203 	and.w	r2, r2, #3
 8000fc8:	0092      	lsls	r2, r2, #2
 8000fca:	4093      	lsls	r3, r2
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fd2:	4937      	ldr	r1, [pc, #220]	; (80010b0 <HAL_GPIO_Init+0x2d0>)
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	089b      	lsrs	r3, r3, #2
 8000fd8:	3302      	adds	r3, #2
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fe0:	4b37      	ldr	r3, [pc, #220]	; (80010c0 <HAL_GPIO_Init+0x2e0>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d003      	beq.n	8001004 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001004:	4a2e      	ldr	r2, [pc, #184]	; (80010c0 <HAL_GPIO_Init+0x2e0>)
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800100a:	4b2d      	ldr	r3, [pc, #180]	; (80010c0 <HAL_GPIO_Init+0x2e0>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	43db      	mvns	r3, r3
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4013      	ands	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4313      	orrs	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800102e:	4a24      	ldr	r2, [pc, #144]	; (80010c0 <HAL_GPIO_Init+0x2e0>)
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001034:	4b22      	ldr	r3, [pc, #136]	; (80010c0 <HAL_GPIO_Init+0x2e0>)
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	43db      	mvns	r3, r3
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	4013      	ands	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d003      	beq.n	8001058 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	4313      	orrs	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001058:	4a19      	ldr	r2, [pc, #100]	; (80010c0 <HAL_GPIO_Init+0x2e0>)
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800105e:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <HAL_GPIO_Init+0x2e0>)
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	43db      	mvns	r3, r3
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4013      	ands	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4313      	orrs	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001082:	4a0f      	ldr	r2, [pc, #60]	; (80010c0 <HAL_GPIO_Init+0x2e0>)
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	3301      	adds	r3, #1
 800108c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	fa22 f303 	lsr.w	r3, r2, r3
 8001098:	2b00      	cmp	r3, #0
 800109a:	f47f aea9 	bne.w	8000df0 <HAL_GPIO_Init+0x10>
  }
}
 800109e:	bf00      	nop
 80010a0:	371c      	adds	r7, #28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40010000 	.word	0x40010000
 80010b4:	48000400 	.word	0x48000400
 80010b8:	48000800 	.word	0x48000800
 80010bc:	48000c00 	.word	0x48000c00
 80010c0:	40010400 	.word	0x40010400

080010c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	807b      	strh	r3, [r7, #2]
 80010d0:	4613      	mov	r3, r2
 80010d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010d4:	787b      	ldrb	r3, [r7, #1]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010da:	887a      	ldrh	r2, [r7, #2]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010e0:	e002      	b.n	80010e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010e2:	887a      	ldrh	r2, [r7, #2]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	695b      	ldr	r3, [r3, #20]
 8001104:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001106:	887a      	ldrh	r2, [r7, #2]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4013      	ands	r3, r2
 800110c:	041a      	lsls	r2, r3, #16
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	43d9      	mvns	r1, r3
 8001112:	887b      	ldrh	r3, [r7, #2]
 8001114:	400b      	ands	r3, r1
 8001116:	431a      	orrs	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	619a      	str	r2, [r3, #24]
}
 800111c:	bf00      	nop
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800112e:	af00      	add	r7, sp, #0
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d102      	bne.n	8001142 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	f000 bef4 	b.w	8001f2a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	2b00      	cmp	r3, #0
 800114e:	f000 816a 	beq.w	8001426 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001152:	4bb3      	ldr	r3, [pc, #716]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 030c 	and.w	r3, r3, #12
 800115a:	2b04      	cmp	r3, #4
 800115c:	d00c      	beq.n	8001178 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800115e:	4bb0      	ldr	r3, [pc, #704]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 030c 	and.w	r3, r3, #12
 8001166:	2b08      	cmp	r3, #8
 8001168:	d159      	bne.n	800121e <HAL_RCC_OscConfig+0xf6>
 800116a:	4bad      	ldr	r3, [pc, #692]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001176:	d152      	bne.n	800121e <HAL_RCC_OscConfig+0xf6>
 8001178:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800117c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001180:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001184:	fa93 f3a3 	rbit	r3, r3
 8001188:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800118c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001190:	fab3 f383 	clz	r3, r3
 8001194:	b2db      	uxtb	r3, r3
 8001196:	095b      	lsrs	r3, r3, #5
 8001198:	b2db      	uxtb	r3, r3
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d102      	bne.n	80011aa <HAL_RCC_OscConfig+0x82>
 80011a4:	4b9e      	ldr	r3, [pc, #632]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	e015      	b.n	80011d6 <HAL_RCC_OscConfig+0xae>
 80011aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011ae:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80011b6:	fa93 f3a3 	rbit	r3, r3
 80011ba:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80011be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011c2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80011c6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80011ca:	fa93 f3a3 	rbit	r3, r3
 80011ce:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80011d2:	4b93      	ldr	r3, [pc, #588]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 80011d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011da:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80011de:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80011e2:	fa92 f2a2 	rbit	r2, r2
 80011e6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80011ea:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80011ee:	fab2 f282 	clz	r2, r2
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	f042 0220 	orr.w	r2, r2, #32
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	f002 021f 	and.w	r2, r2, #31
 80011fe:	2101      	movs	r1, #1
 8001200:	fa01 f202 	lsl.w	r2, r1, r2
 8001204:	4013      	ands	r3, r2
 8001206:	2b00      	cmp	r3, #0
 8001208:	f000 810c 	beq.w	8001424 <HAL_RCC_OscConfig+0x2fc>
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	f040 8106 	bne.w	8001424 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	f000 be86 	b.w	8001f2a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001228:	d106      	bne.n	8001238 <HAL_RCC_OscConfig+0x110>
 800122a:	4b7d      	ldr	r3, [pc, #500]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a7c      	ldr	r2, [pc, #496]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	e030      	b.n	800129a <HAL_RCC_OscConfig+0x172>
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d10c      	bne.n	800125c <HAL_RCC_OscConfig+0x134>
 8001242:	4b77      	ldr	r3, [pc, #476]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a76      	ldr	r2, [pc, #472]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	4b74      	ldr	r3, [pc, #464]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a73      	ldr	r2, [pc, #460]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001254:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	e01e      	b.n	800129a <HAL_RCC_OscConfig+0x172>
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001266:	d10c      	bne.n	8001282 <HAL_RCC_OscConfig+0x15a>
 8001268:	4b6d      	ldr	r3, [pc, #436]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a6c      	ldr	r2, [pc, #432]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 800126e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	4b6a      	ldr	r3, [pc, #424]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a69      	ldr	r2, [pc, #420]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 800127a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	e00b      	b.n	800129a <HAL_RCC_OscConfig+0x172>
 8001282:	4b67      	ldr	r3, [pc, #412]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a66      	ldr	r2, [pc, #408]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	4b64      	ldr	r3, [pc, #400]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a63      	ldr	r2, [pc, #396]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001294:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001298:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800129a:	4b61      	ldr	r3, [pc, #388]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 800129c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800129e:	f023 020f 	bic.w	r2, r3, #15
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	495d      	ldr	r1, [pc, #372]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 80012aa:	4313      	orrs	r3, r2
 80012ac:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d059      	beq.n	800136c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b8:	f7ff fbdc 	bl	8000a74 <HAL_GetTick>
 80012bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c0:	e00a      	b.n	80012d8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c2:	f7ff fbd7 	bl	8000a74 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b64      	cmp	r3, #100	; 0x64
 80012d0:	d902      	bls.n	80012d8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	f000 be29 	b.w	8001f2a <HAL_RCC_OscConfig+0xe02>
 80012d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012dc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80012e4:	fa93 f3a3 	rbit	r3, r3
 80012e8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80012ec:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f0:	fab3 f383 	clz	r3, r3
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	095b      	lsrs	r3, r3, #5
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	2b01      	cmp	r3, #1
 8001302:	d102      	bne.n	800130a <HAL_RCC_OscConfig+0x1e2>
 8001304:	4b46      	ldr	r3, [pc, #280]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	e015      	b.n	8001336 <HAL_RCC_OscConfig+0x20e>
 800130a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800130e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001312:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001316:	fa93 f3a3 	rbit	r3, r3
 800131a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800131e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001322:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001326:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800132a:	fa93 f3a3 	rbit	r3, r3
 800132e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001332:	4b3b      	ldr	r3, [pc, #236]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001336:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800133a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800133e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001342:	fa92 f2a2 	rbit	r2, r2
 8001346:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800134a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800134e:	fab2 f282 	clz	r2, r2
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	f042 0220 	orr.w	r2, r2, #32
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	f002 021f 	and.w	r2, r2, #31
 800135e:	2101      	movs	r1, #1
 8001360:	fa01 f202 	lsl.w	r2, r1, r2
 8001364:	4013      	ands	r3, r2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0ab      	beq.n	80012c2 <HAL_RCC_OscConfig+0x19a>
 800136a:	e05c      	b.n	8001426 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136c:	f7ff fb82 	bl	8000a74 <HAL_GetTick>
 8001370:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001374:	e00a      	b.n	800138c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001376:	f7ff fb7d 	bl	8000a74 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b64      	cmp	r3, #100	; 0x64
 8001384:	d902      	bls.n	800138c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	f000 bdcf 	b.w	8001f2a <HAL_RCC_OscConfig+0xe02>
 800138c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001390:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001394:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001398:	fa93 f3a3 	rbit	r3, r3
 800139c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80013a0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a4:	fab3 f383 	clz	r3, r3
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	095b      	lsrs	r3, r3, #5
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d102      	bne.n	80013be <HAL_RCC_OscConfig+0x296>
 80013b8:	4b19      	ldr	r3, [pc, #100]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	e015      	b.n	80013ea <HAL_RCC_OscConfig+0x2c2>
 80013be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013c2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80013ca:	fa93 f3a3 	rbit	r3, r3
 80013ce:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80013d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013d6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80013da:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80013de:	fa93 f3a3 	rbit	r3, r3
 80013e2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80013e6:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 80013e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013ee:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80013f2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80013f6:	fa92 f2a2 	rbit	r2, r2
 80013fa:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80013fe:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001402:	fab2 f282 	clz	r2, r2
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	f042 0220 	orr.w	r2, r2, #32
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	f002 021f 	and.w	r2, r2, #31
 8001412:	2101      	movs	r1, #1
 8001414:	fa01 f202 	lsl.w	r2, r1, r2
 8001418:	4013      	ands	r3, r2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1ab      	bne.n	8001376 <HAL_RCC_OscConfig+0x24e>
 800141e:	e002      	b.n	8001426 <HAL_RCC_OscConfig+0x2fe>
 8001420:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 816f 	beq.w	8001714 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001436:	4bd0      	ldr	r3, [pc, #832]	; (8001778 <HAL_RCC_OscConfig+0x650>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f003 030c 	and.w	r3, r3, #12
 800143e:	2b00      	cmp	r3, #0
 8001440:	d00b      	beq.n	800145a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001442:	4bcd      	ldr	r3, [pc, #820]	; (8001778 <HAL_RCC_OscConfig+0x650>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 030c 	and.w	r3, r3, #12
 800144a:	2b08      	cmp	r3, #8
 800144c:	d16c      	bne.n	8001528 <HAL_RCC_OscConfig+0x400>
 800144e:	4bca      	ldr	r3, [pc, #808]	; (8001778 <HAL_RCC_OscConfig+0x650>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d166      	bne.n	8001528 <HAL_RCC_OscConfig+0x400>
 800145a:	2302      	movs	r3, #2
 800145c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001460:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001464:	fa93 f3a3 	rbit	r3, r3
 8001468:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800146c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001470:	fab3 f383 	clz	r3, r3
 8001474:	b2db      	uxtb	r3, r3
 8001476:	095b      	lsrs	r3, r3, #5
 8001478:	b2db      	uxtb	r3, r3
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b01      	cmp	r3, #1
 8001482:	d102      	bne.n	800148a <HAL_RCC_OscConfig+0x362>
 8001484:	4bbc      	ldr	r3, [pc, #752]	; (8001778 <HAL_RCC_OscConfig+0x650>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	e013      	b.n	80014b2 <HAL_RCC_OscConfig+0x38a>
 800148a:	2302      	movs	r3, #2
 800148c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001490:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001494:	fa93 f3a3 	rbit	r3, r3
 8001498:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800149c:	2302      	movs	r3, #2
 800149e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80014a2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80014a6:	fa93 f3a3 	rbit	r3, r3
 80014aa:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80014ae:	4bb2      	ldr	r3, [pc, #712]	; (8001778 <HAL_RCC_OscConfig+0x650>)
 80014b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b2:	2202      	movs	r2, #2
 80014b4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80014b8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80014bc:	fa92 f2a2 	rbit	r2, r2
 80014c0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80014c4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80014c8:	fab2 f282 	clz	r2, r2
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	f042 0220 	orr.w	r2, r2, #32
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	f002 021f 	and.w	r2, r2, #31
 80014d8:	2101      	movs	r1, #1
 80014da:	fa01 f202 	lsl.w	r2, r1, r2
 80014de:	4013      	ands	r3, r2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d007      	beq.n	80014f4 <HAL_RCC_OscConfig+0x3cc>
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d002      	beq.n	80014f4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	f000 bd1b 	b.w	8001f2a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f4:	4ba0      	ldr	r3, [pc, #640]	; (8001778 <HAL_RCC_OscConfig+0x650>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	21f8      	movs	r1, #248	; 0xf8
 8001504:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001508:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800150c:	fa91 f1a1 	rbit	r1, r1
 8001510:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001514:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001518:	fab1 f181 	clz	r1, r1
 800151c:	b2c9      	uxtb	r1, r1
 800151e:	408b      	lsls	r3, r1
 8001520:	4995      	ldr	r1, [pc, #596]	; (8001778 <HAL_RCC_OscConfig+0x650>)
 8001522:	4313      	orrs	r3, r2
 8001524:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001526:	e0f5      	b.n	8001714 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 8085 	beq.w	800163e <HAL_RCC_OscConfig+0x516>
 8001534:	2301      	movs	r3, #1
 8001536:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800153a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800153e:	fa93 f3a3 	rbit	r3, r3
 8001542:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001546:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800154a:	fab3 f383 	clz	r3, r3
 800154e:	b2db      	uxtb	r3, r3
 8001550:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001554:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	461a      	mov	r2, r3
 800155c:	2301      	movs	r3, #1
 800155e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001560:	f7ff fa88 	bl	8000a74 <HAL_GetTick>
 8001564:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001568:	e00a      	b.n	8001580 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800156a:	f7ff fa83 	bl	8000a74 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d902      	bls.n	8001580 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	f000 bcd5 	b.w	8001f2a <HAL_RCC_OscConfig+0xe02>
 8001580:	2302      	movs	r3, #2
 8001582:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001586:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800158a:	fa93 f3a3 	rbit	r3, r3
 800158e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001592:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001596:	fab3 f383 	clz	r3, r3
 800159a:	b2db      	uxtb	r3, r3
 800159c:	095b      	lsrs	r3, r3, #5
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d102      	bne.n	80015b0 <HAL_RCC_OscConfig+0x488>
 80015aa:	4b73      	ldr	r3, [pc, #460]	; (8001778 <HAL_RCC_OscConfig+0x650>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	e013      	b.n	80015d8 <HAL_RCC_OscConfig+0x4b0>
 80015b0:	2302      	movs	r3, #2
 80015b2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80015ba:	fa93 f3a3 	rbit	r3, r3
 80015be:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80015c2:	2302      	movs	r3, #2
 80015c4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80015c8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80015cc:	fa93 f3a3 	rbit	r3, r3
 80015d0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80015d4:	4b68      	ldr	r3, [pc, #416]	; (8001778 <HAL_RCC_OscConfig+0x650>)
 80015d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d8:	2202      	movs	r2, #2
 80015da:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80015de:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80015e2:	fa92 f2a2 	rbit	r2, r2
 80015e6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80015ea:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80015ee:	fab2 f282 	clz	r2, r2
 80015f2:	b2d2      	uxtb	r2, r2
 80015f4:	f042 0220 	orr.w	r2, r2, #32
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	f002 021f 	and.w	r2, r2, #31
 80015fe:	2101      	movs	r1, #1
 8001600:	fa01 f202 	lsl.w	r2, r1, r2
 8001604:	4013      	ands	r3, r2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0af      	beq.n	800156a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160a:	4b5b      	ldr	r3, [pc, #364]	; (8001778 <HAL_RCC_OscConfig+0x650>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	695b      	ldr	r3, [r3, #20]
 8001618:	21f8      	movs	r1, #248	; 0xf8
 800161a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001622:	fa91 f1a1 	rbit	r1, r1
 8001626:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800162a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800162e:	fab1 f181 	clz	r1, r1
 8001632:	b2c9      	uxtb	r1, r1
 8001634:	408b      	lsls	r3, r1
 8001636:	4950      	ldr	r1, [pc, #320]	; (8001778 <HAL_RCC_OscConfig+0x650>)
 8001638:	4313      	orrs	r3, r2
 800163a:	600b      	str	r3, [r1, #0]
 800163c:	e06a      	b.n	8001714 <HAL_RCC_OscConfig+0x5ec>
 800163e:	2301      	movs	r3, #1
 8001640:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001644:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001648:	fa93 f3a3 	rbit	r3, r3
 800164c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001650:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001654:	fab3 f383 	clz	r3, r3
 8001658:	b2db      	uxtb	r3, r3
 800165a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800165e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	461a      	mov	r2, r3
 8001666:	2300      	movs	r3, #0
 8001668:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166a:	f7ff fa03 	bl	8000a74 <HAL_GetTick>
 800166e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001672:	e00a      	b.n	800168a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001674:	f7ff f9fe 	bl	8000a74 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d902      	bls.n	800168a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	f000 bc50 	b.w	8001f2a <HAL_RCC_OscConfig+0xe02>
 800168a:	2302      	movs	r3, #2
 800168c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001690:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001694:	fa93 f3a3 	rbit	r3, r3
 8001698:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800169c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016a0:	fab3 f383 	clz	r3, r3
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	095b      	lsrs	r3, r3, #5
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d102      	bne.n	80016ba <HAL_RCC_OscConfig+0x592>
 80016b4:	4b30      	ldr	r3, [pc, #192]	; (8001778 <HAL_RCC_OscConfig+0x650>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	e013      	b.n	80016e2 <HAL_RCC_OscConfig+0x5ba>
 80016ba:	2302      	movs	r3, #2
 80016bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80016c4:	fa93 f3a3 	rbit	r3, r3
 80016c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80016cc:	2302      	movs	r3, #2
 80016ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80016d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016d6:	fa93 f3a3 	rbit	r3, r3
 80016da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80016de:	4b26      	ldr	r3, [pc, #152]	; (8001778 <HAL_RCC_OscConfig+0x650>)
 80016e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e2:	2202      	movs	r2, #2
 80016e4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80016e8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80016ec:	fa92 f2a2 	rbit	r2, r2
 80016f0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80016f4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80016f8:	fab2 f282 	clz	r2, r2
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	f042 0220 	orr.w	r2, r2, #32
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	f002 021f 	and.w	r2, r2, #31
 8001708:	2101      	movs	r1, #1
 800170a:	fa01 f202 	lsl.w	r2, r1, r2
 800170e:	4013      	ands	r3, r2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1af      	bne.n	8001674 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 80da 	beq.w	80018d8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001724:	1d3b      	adds	r3, r7, #4
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d069      	beq.n	8001802 <HAL_RCC_OscConfig+0x6da>
 800172e:	2301      	movs	r3, #1
 8001730:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001734:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001738:	fa93 f3a3 	rbit	r3, r3
 800173c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001740:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001744:	fab3 f383 	clz	r3, r3
 8001748:	b2db      	uxtb	r3, r3
 800174a:	461a      	mov	r2, r3
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <HAL_RCC_OscConfig+0x654>)
 800174e:	4413      	add	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	461a      	mov	r2, r3
 8001754:	2301      	movs	r3, #1
 8001756:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001758:	f7ff f98c 	bl	8000a74 <HAL_GetTick>
 800175c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001760:	e00e      	b.n	8001780 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001762:	f7ff f987 	bl	8000a74 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d906      	bls.n	8001780 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e3d9      	b.n	8001f2a <HAL_RCC_OscConfig+0xe02>
 8001776:	bf00      	nop
 8001778:	40021000 	.word	0x40021000
 800177c:	10908120 	.word	0x10908120
 8001780:	2302      	movs	r3, #2
 8001782:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001786:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800178a:	fa93 f3a3 	rbit	r3, r3
 800178e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001792:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001796:	2202      	movs	r2, #2
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	fa93 f2a3 	rbit	r2, r3
 80017a4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80017ae:	2202      	movs	r2, #2
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	fa93 f2a3 	rbit	r2, r3
 80017bc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80017c0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017c2:	4ba5      	ldr	r3, [pc, #660]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 80017c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017c6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80017ca:	2102      	movs	r1, #2
 80017cc:	6019      	str	r1, [r3, #0]
 80017ce:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	fa93 f1a3 	rbit	r1, r3
 80017d8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80017dc:	6019      	str	r1, [r3, #0]
  return result;
 80017de:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	fab3 f383 	clz	r3, r3
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	f003 031f 	and.w	r3, r3, #31
 80017f4:	2101      	movs	r1, #1
 80017f6:	fa01 f303 	lsl.w	r3, r1, r3
 80017fa:	4013      	ands	r3, r2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0b0      	beq.n	8001762 <HAL_RCC_OscConfig+0x63a>
 8001800:	e06a      	b.n	80018d8 <HAL_RCC_OscConfig+0x7b0>
 8001802:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001806:	2201      	movs	r2, #1
 8001808:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	fa93 f2a3 	rbit	r2, r3
 8001814:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001818:	601a      	str	r2, [r3, #0]
  return result;
 800181a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800181e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001820:	fab3 f383 	clz	r3, r3
 8001824:	b2db      	uxtb	r3, r3
 8001826:	461a      	mov	r2, r3
 8001828:	4b8c      	ldr	r3, [pc, #560]	; (8001a5c <HAL_RCC_OscConfig+0x934>)
 800182a:	4413      	add	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	461a      	mov	r2, r3
 8001830:	2300      	movs	r3, #0
 8001832:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001834:	f7ff f91e 	bl	8000a74 <HAL_GetTick>
 8001838:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800183c:	e009      	b.n	8001852 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800183e:	f7ff f919 	bl	8000a74 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e36b      	b.n	8001f2a <HAL_RCC_OscConfig+0xe02>
 8001852:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001856:	2202      	movs	r2, #2
 8001858:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	fa93 f2a3 	rbit	r2, r3
 8001864:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800186e:	2202      	movs	r2, #2
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	fa93 f2a3 	rbit	r2, r3
 800187c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001886:	2202      	movs	r2, #2
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	fa93 f2a3 	rbit	r2, r3
 8001894:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001898:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800189a:	4b6f      	ldr	r3, [pc, #444]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 800189c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800189e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80018a2:	2102      	movs	r1, #2
 80018a4:	6019      	str	r1, [r3, #0]
 80018a6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	fa93 f1a3 	rbit	r1, r3
 80018b0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80018b4:	6019      	str	r1, [r3, #0]
  return result;
 80018b6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	fab3 f383 	clz	r3, r3
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	f003 031f 	and.w	r3, r3, #31
 80018cc:	2101      	movs	r1, #1
 80018ce:	fa01 f303 	lsl.w	r3, r1, r3
 80018d2:	4013      	ands	r3, r2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1b2      	bne.n	800183e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0304 	and.w	r3, r3, #4
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 8158 	beq.w	8001b98 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018e8:	2300      	movs	r3, #0
 80018ea:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ee:	4b5a      	ldr	r3, [pc, #360]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d112      	bne.n	8001920 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018fa:	4b57      	ldr	r3, [pc, #348]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	4a56      	ldr	r2, [pc, #344]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 8001900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001904:	61d3      	str	r3, [r2, #28]
 8001906:	4b54      	ldr	r3, [pc, #336]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800190e:	f107 0308 	add.w	r3, r7, #8
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	f107 0308 	add.w	r3, r7, #8
 8001918:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800191a:	2301      	movs	r3, #1
 800191c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001920:	4b4f      	ldr	r3, [pc, #316]	; (8001a60 <HAL_RCC_OscConfig+0x938>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001928:	2b00      	cmp	r3, #0
 800192a:	d11a      	bne.n	8001962 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800192c:	4b4c      	ldr	r3, [pc, #304]	; (8001a60 <HAL_RCC_OscConfig+0x938>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a4b      	ldr	r2, [pc, #300]	; (8001a60 <HAL_RCC_OscConfig+0x938>)
 8001932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001936:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001938:	f7ff f89c 	bl	8000a74 <HAL_GetTick>
 800193c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001940:	e009      	b.n	8001956 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001942:	f7ff f897 	bl	8000a74 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b64      	cmp	r3, #100	; 0x64
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e2e9      	b.n	8001f2a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001956:	4b42      	ldr	r3, [pc, #264]	; (8001a60 <HAL_RCC_OscConfig+0x938>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0ef      	beq.n	8001942 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d106      	bne.n	800197a <HAL_RCC_OscConfig+0x852>
 800196c:	4b3a      	ldr	r3, [pc, #232]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	4a39      	ldr	r2, [pc, #228]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	6213      	str	r3, [r2, #32]
 8001978:	e02f      	b.n	80019da <HAL_RCC_OscConfig+0x8b2>
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d10c      	bne.n	800199e <HAL_RCC_OscConfig+0x876>
 8001984:	4b34      	ldr	r3, [pc, #208]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	4a33      	ldr	r2, [pc, #204]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 800198a:	f023 0301 	bic.w	r3, r3, #1
 800198e:	6213      	str	r3, [r2, #32]
 8001990:	4b31      	ldr	r3, [pc, #196]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	4a30      	ldr	r2, [pc, #192]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 8001996:	f023 0304 	bic.w	r3, r3, #4
 800199a:	6213      	str	r3, [r2, #32]
 800199c:	e01d      	b.n	80019da <HAL_RCC_OscConfig+0x8b2>
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	2b05      	cmp	r3, #5
 80019a6:	d10c      	bne.n	80019c2 <HAL_RCC_OscConfig+0x89a>
 80019a8:	4b2b      	ldr	r3, [pc, #172]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	4a2a      	ldr	r2, [pc, #168]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 80019ae:	f043 0304 	orr.w	r3, r3, #4
 80019b2:	6213      	str	r3, [r2, #32]
 80019b4:	4b28      	ldr	r3, [pc, #160]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	4a27      	ldr	r2, [pc, #156]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	6213      	str	r3, [r2, #32]
 80019c0:	e00b      	b.n	80019da <HAL_RCC_OscConfig+0x8b2>
 80019c2:	4b25      	ldr	r3, [pc, #148]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 80019c4:	6a1b      	ldr	r3, [r3, #32]
 80019c6:	4a24      	ldr	r2, [pc, #144]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 80019c8:	f023 0301 	bic.w	r3, r3, #1
 80019cc:	6213      	str	r3, [r2, #32]
 80019ce:	4b22      	ldr	r3, [pc, #136]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 80019d0:	6a1b      	ldr	r3, [r3, #32]
 80019d2:	4a21      	ldr	r2, [pc, #132]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 80019d4:	f023 0304 	bic.w	r3, r3, #4
 80019d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d06b      	beq.n	8001abc <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e4:	f7ff f846 	bl	8000a74 <HAL_GetTick>
 80019e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ec:	e00b      	b.n	8001a06 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ee:	f7ff f841 	bl	8000a74 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e291      	b.n	8001f2a <HAL_RCC_OscConfig+0xe02>
 8001a06:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	fa93 f2a3 	rbit	r2, r3
 8001a18:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001a22:	2202      	movs	r2, #2
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	fa93 f2a3 	rbit	r2, r3
 8001a30:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a34:	601a      	str	r2, [r3, #0]
  return result;
 8001a36:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a3a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a3c:	fab3 f383 	clz	r3, r3
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	095b      	lsrs	r3, r3, #5
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	f043 0302 	orr.w	r3, r3, #2
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d109      	bne.n	8001a64 <HAL_RCC_OscConfig+0x93c>
 8001a50:	4b01      	ldr	r3, [pc, #4]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	e014      	b.n	8001a80 <HAL_RCC_OscConfig+0x958>
 8001a56:	bf00      	nop
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	10908120 	.word	0x10908120
 8001a60:	40007000 	.word	0x40007000
 8001a64:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001a68:	2202      	movs	r2, #2
 8001a6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	fa93 f2a3 	rbit	r2, r3
 8001a76:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	4bbb      	ldr	r3, [pc, #748]	; (8001d6c <HAL_RCC_OscConfig+0xc44>)
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a80:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001a84:	2102      	movs	r1, #2
 8001a86:	6011      	str	r1, [r2, #0]
 8001a88:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001a8c:	6812      	ldr	r2, [r2, #0]
 8001a8e:	fa92 f1a2 	rbit	r1, r2
 8001a92:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001a96:	6011      	str	r1, [r2, #0]
  return result;
 8001a98:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001a9c:	6812      	ldr	r2, [r2, #0]
 8001a9e:	fab2 f282 	clz	r2, r2
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	f002 021f 	and.w	r2, r2, #31
 8001aae:	2101      	movs	r1, #1
 8001ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d099      	beq.n	80019ee <HAL_RCC_OscConfig+0x8c6>
 8001aba:	e063      	b.n	8001b84 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001abc:	f7fe ffda 	bl	8000a74 <HAL_GetTick>
 8001ac0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac4:	e00b      	b.n	8001ade <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ac6:	f7fe ffd5 	bl	8000a74 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e225      	b.n	8001f2a <HAL_RCC_OscConfig+0xe02>
 8001ade:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	fa93 f2a3 	rbit	r2, r3
 8001af0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001afa:	2202      	movs	r2, #2
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	fa93 f2a3 	rbit	r2, r3
 8001b08:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b0c:	601a      	str	r2, [r3, #0]
  return result;
 8001b0e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b12:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b14:	fab3 f383 	clz	r3, r3
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	095b      	lsrs	r3, r3, #5
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	f043 0302 	orr.w	r3, r3, #2
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d102      	bne.n	8001b2e <HAL_RCC_OscConfig+0xa06>
 8001b28:	4b90      	ldr	r3, [pc, #576]	; (8001d6c <HAL_RCC_OscConfig+0xc44>)
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	e00d      	b.n	8001b4a <HAL_RCC_OscConfig+0xa22>
 8001b2e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b32:	2202      	movs	r2, #2
 8001b34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b36:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	fa93 f2a3 	rbit	r2, r3
 8001b40:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	4b89      	ldr	r3, [pc, #548]	; (8001d6c <HAL_RCC_OscConfig+0xc44>)
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b4e:	2102      	movs	r1, #2
 8001b50:	6011      	str	r1, [r2, #0]
 8001b52:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	fa92 f1a2 	rbit	r1, r2
 8001b5c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001b60:	6011      	str	r1, [r2, #0]
  return result;
 8001b62:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	fab2 f282 	clz	r2, r2
 8001b6c:	b2d2      	uxtb	r2, r2
 8001b6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	f002 021f 	and.w	r2, r2, #31
 8001b78:	2101      	movs	r1, #1
 8001b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b7e:	4013      	ands	r3, r2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1a0      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b84:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d105      	bne.n	8001b98 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b8c:	4b77      	ldr	r3, [pc, #476]	; (8001d6c <HAL_RCC_OscConfig+0xc44>)
 8001b8e:	69db      	ldr	r3, [r3, #28]
 8001b90:	4a76      	ldr	r2, [pc, #472]	; (8001d6c <HAL_RCC_OscConfig+0xc44>)
 8001b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b96:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b98:	1d3b      	adds	r3, r7, #4
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 81c2 	beq.w	8001f28 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ba4:	4b71      	ldr	r3, [pc, #452]	; (8001d6c <HAL_RCC_OscConfig+0xc44>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 030c 	and.w	r3, r3, #12
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	f000 819c 	beq.w	8001eea <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	f040 8114 	bne.w	8001de6 <HAL_RCC_OscConfig+0xcbe>
 8001bbe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001bc2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	fa93 f2a3 	rbit	r2, r3
 8001bd2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001bd6:	601a      	str	r2, [r3, #0]
  return result;
 8001bd8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001bdc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bde:	fab3 f383 	clz	r3, r3
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001be8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	461a      	mov	r2, r3
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf4:	f7fe ff3e 	bl	8000a74 <HAL_GetTick>
 8001bf8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bfc:	e009      	b.n	8001c12 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bfe:	f7fe ff39 	bl	8000a74 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e18b      	b.n	8001f2a <HAL_RCC_OscConfig+0xe02>
 8001c12:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	fa93 f2a3 	rbit	r2, r3
 8001c26:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c2a:	601a      	str	r2, [r3, #0]
  return result;
 8001c2c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c30:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c32:	fab3 f383 	clz	r3, r3
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	095b      	lsrs	r3, r3, #5
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d102      	bne.n	8001c4c <HAL_RCC_OscConfig+0xb24>
 8001c46:	4b49      	ldr	r3, [pc, #292]	; (8001d6c <HAL_RCC_OscConfig+0xc44>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	e01b      	b.n	8001c84 <HAL_RCC_OscConfig+0xb5c>
 8001c4c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c56:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	fa93 f2a3 	rbit	r2, r3
 8001c60:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	fa93 f2a3 	rbit	r2, r3
 8001c7a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	4b3a      	ldr	r3, [pc, #232]	; (8001d6c <HAL_RCC_OscConfig+0xc44>)
 8001c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c84:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001c88:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c8c:	6011      	str	r1, [r2, #0]
 8001c8e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	fa92 f1a2 	rbit	r1, r2
 8001c98:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001c9c:	6011      	str	r1, [r2, #0]
  return result;
 8001c9e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	fab2 f282 	clz	r2, r2
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	f042 0220 	orr.w	r2, r2, #32
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	f002 021f 	and.w	r2, r2, #31
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cba:	4013      	ands	r3, r2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d19e      	bne.n	8001bfe <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cc0:	4b2a      	ldr	r3, [pc, #168]	; (8001d6c <HAL_RCC_OscConfig+0xc44>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001cce:	1d3b      	adds	r3, r7, #4
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	430b      	orrs	r3, r1
 8001cd6:	4925      	ldr	r1, [pc, #148]	; (8001d6c <HAL_RCC_OscConfig+0xc44>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	604b      	str	r3, [r1, #4]
 8001cdc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ce0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ce4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	fa93 f2a3 	rbit	r2, r3
 8001cf0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cf4:	601a      	str	r2, [r3, #0]
  return result;
 8001cf6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cfa:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cfc:	fab3 f383 	clz	r3, r3
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d06:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	2301      	movs	r3, #1
 8001d10:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d12:	f7fe feaf 	bl	8000a74 <HAL_GetTick>
 8001d16:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d1a:	e009      	b.n	8001d30 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d1c:	f7fe feaa 	bl	8000a74 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e0fc      	b.n	8001f2a <HAL_RCC_OscConfig+0xe02>
 8001d30:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	fa93 f2a3 	rbit	r2, r3
 8001d44:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d48:	601a      	str	r2, [r3, #0]
  return result;
 8001d4a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d4e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d50:	fab3 f383 	clz	r3, r3
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	095b      	lsrs	r3, r3, #5
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d105      	bne.n	8001d70 <HAL_RCC_OscConfig+0xc48>
 8001d64:	4b01      	ldr	r3, [pc, #4]	; (8001d6c <HAL_RCC_OscConfig+0xc44>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	e01e      	b.n	8001da8 <HAL_RCC_OscConfig+0xc80>
 8001d6a:	bf00      	nop
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	fa93 f2a3 	rbit	r2, r3
 8001d84:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	fa93 f2a3 	rbit	r2, r3
 8001d9e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	4b63      	ldr	r3, [pc, #396]	; (8001f34 <HAL_RCC_OscConfig+0xe0c>)
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001dac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001db0:	6011      	str	r1, [r2, #0]
 8001db2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001db6:	6812      	ldr	r2, [r2, #0]
 8001db8:	fa92 f1a2 	rbit	r1, r2
 8001dbc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001dc0:	6011      	str	r1, [r2, #0]
  return result;
 8001dc2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001dc6:	6812      	ldr	r2, [r2, #0]
 8001dc8:	fab2 f282 	clz	r2, r2
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	f042 0220 	orr.w	r2, r2, #32
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	f002 021f 	and.w	r2, r2, #31
 8001dd8:	2101      	movs	r1, #1
 8001dda:	fa01 f202 	lsl.w	r2, r1, r2
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d09b      	beq.n	8001d1c <HAL_RCC_OscConfig+0xbf4>
 8001de4:	e0a0      	b.n	8001f28 <HAL_RCC_OscConfig+0xe00>
 8001de6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001dee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	fa93 f2a3 	rbit	r2, r3
 8001dfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dfe:	601a      	str	r2, [r3, #0]
  return result;
 8001e00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e04:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e06:	fab3 f383 	clz	r3, r3
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	461a      	mov	r2, r3
 8001e18:	2300      	movs	r3, #0
 8001e1a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1c:	f7fe fe2a 	bl	8000a74 <HAL_GetTick>
 8001e20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e24:	e009      	b.n	8001e3a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e26:	f7fe fe25 	bl	8000a74 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e077      	b.n	8001f2a <HAL_RCC_OscConfig+0xe02>
 8001e3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	fa93 f2a3 	rbit	r2, r3
 8001e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e52:	601a      	str	r2, [r3, #0]
  return result;
 8001e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e58:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e5a:	fab3 f383 	clz	r3, r3
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	095b      	lsrs	r3, r3, #5
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d102      	bne.n	8001e74 <HAL_RCC_OscConfig+0xd4c>
 8001e6e:	4b31      	ldr	r3, [pc, #196]	; (8001f34 <HAL_RCC_OscConfig+0xe0c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	e01b      	b.n	8001eac <HAL_RCC_OscConfig+0xd84>
 8001e74:	f107 0320 	add.w	r3, r7, #32
 8001e78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7e:	f107 0320 	add.w	r3, r7, #32
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	fa93 f2a3 	rbit	r2, r3
 8001e88:	f107 031c 	add.w	r3, r7, #28
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	f107 0318 	add.w	r3, r7, #24
 8001e92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	f107 0318 	add.w	r3, r7, #24
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	fa93 f2a3 	rbit	r2, r3
 8001ea2:	f107 0314 	add.w	r3, r7, #20
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	4b22      	ldr	r3, [pc, #136]	; (8001f34 <HAL_RCC_OscConfig+0xe0c>)
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eac:	f107 0210 	add.w	r2, r7, #16
 8001eb0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001eb4:	6011      	str	r1, [r2, #0]
 8001eb6:	f107 0210 	add.w	r2, r7, #16
 8001eba:	6812      	ldr	r2, [r2, #0]
 8001ebc:	fa92 f1a2 	rbit	r1, r2
 8001ec0:	f107 020c 	add.w	r2, r7, #12
 8001ec4:	6011      	str	r1, [r2, #0]
  return result;
 8001ec6:	f107 020c 	add.w	r2, r7, #12
 8001eca:	6812      	ldr	r2, [r2, #0]
 8001ecc:	fab2 f282 	clz	r2, r2
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	f042 0220 	orr.w	r2, r2, #32
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	f002 021f 	and.w	r2, r2, #31
 8001edc:	2101      	movs	r1, #1
 8001ede:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d19e      	bne.n	8001e26 <HAL_RCC_OscConfig+0xcfe>
 8001ee8:	e01e      	b.n	8001f28 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eea:	1d3b      	adds	r3, r7, #4
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d101      	bne.n	8001ef8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e018      	b.n	8001f2a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ef8:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <HAL_RCC_OscConfig+0xe0c>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f00:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f08:	1d3b      	adds	r3, r7, #4
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d108      	bne.n	8001f24 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001f12:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f1a:	1d3b      	adds	r3, r7, #4
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d001      	beq.n	8001f28 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e000      	b.n	8001f2a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40021000 	.word	0x40021000

08001f38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b09e      	sub	sp, #120	; 0x78
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e162      	b.n	8002216 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f50:	4b90      	ldr	r3, [pc, #576]	; (8002194 <HAL_RCC_ClockConfig+0x25c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d910      	bls.n	8001f80 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5e:	4b8d      	ldr	r3, [pc, #564]	; (8002194 <HAL_RCC_ClockConfig+0x25c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f023 0207 	bic.w	r2, r3, #7
 8001f66:	498b      	ldr	r1, [pc, #556]	; (8002194 <HAL_RCC_ClockConfig+0x25c>)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6e:	4b89      	ldr	r3, [pc, #548]	; (8002194 <HAL_RCC_ClockConfig+0x25c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d001      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e14a      	b.n	8002216 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d008      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f8c:	4b82      	ldr	r3, [pc, #520]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	497f      	ldr	r1, [pc, #508]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 80dc 	beq.w	8002164 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d13c      	bne.n	800202e <HAL_RCC_ClockConfig+0xf6>
 8001fb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fb8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fbc:	fa93 f3a3 	rbit	r3, r3
 8001fc0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc4:	fab3 f383 	clz	r3, r3
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	095b      	lsrs	r3, r3, #5
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d102      	bne.n	8001fde <HAL_RCC_ClockConfig+0xa6>
 8001fd8:	4b6f      	ldr	r3, [pc, #444]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	e00f      	b.n	8001ffe <HAL_RCC_ClockConfig+0xc6>
 8001fde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fe2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fe6:	fa93 f3a3 	rbit	r3, r3
 8001fea:	667b      	str	r3, [r7, #100]	; 0x64
 8001fec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ff0:	663b      	str	r3, [r7, #96]	; 0x60
 8001ff2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ff4:	fa93 f3a3 	rbit	r3, r3
 8001ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ffa:	4b67      	ldr	r3, [pc, #412]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002002:	65ba      	str	r2, [r7, #88]	; 0x58
 8002004:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002006:	fa92 f2a2 	rbit	r2, r2
 800200a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800200c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800200e:	fab2 f282 	clz	r2, r2
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	f042 0220 	orr.w	r2, r2, #32
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	f002 021f 	and.w	r2, r2, #31
 800201e:	2101      	movs	r1, #1
 8002020:	fa01 f202 	lsl.w	r2, r1, r2
 8002024:	4013      	ands	r3, r2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d17b      	bne.n	8002122 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e0f3      	b.n	8002216 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b02      	cmp	r3, #2
 8002034:	d13c      	bne.n	80020b0 <HAL_RCC_ClockConfig+0x178>
 8002036:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800203a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800203e:	fa93 f3a3 	rbit	r3, r3
 8002042:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002046:	fab3 f383 	clz	r3, r3
 800204a:	b2db      	uxtb	r3, r3
 800204c:	095b      	lsrs	r3, r3, #5
 800204e:	b2db      	uxtb	r3, r3
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b01      	cmp	r3, #1
 8002058:	d102      	bne.n	8002060 <HAL_RCC_ClockConfig+0x128>
 800205a:	4b4f      	ldr	r3, [pc, #316]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	e00f      	b.n	8002080 <HAL_RCC_ClockConfig+0x148>
 8002060:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002064:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002068:	fa93 f3a3 	rbit	r3, r3
 800206c:	647b      	str	r3, [r7, #68]	; 0x44
 800206e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002072:	643b      	str	r3, [r7, #64]	; 0x40
 8002074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002076:	fa93 f3a3 	rbit	r3, r3
 800207a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800207c:	4b46      	ldr	r3, [pc, #280]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002084:	63ba      	str	r2, [r7, #56]	; 0x38
 8002086:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002088:	fa92 f2a2 	rbit	r2, r2
 800208c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800208e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002090:	fab2 f282 	clz	r2, r2
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	f042 0220 	orr.w	r2, r2, #32
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	f002 021f 	and.w	r2, r2, #31
 80020a0:	2101      	movs	r1, #1
 80020a2:	fa01 f202 	lsl.w	r2, r1, r2
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d13a      	bne.n	8002122 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e0b2      	b.n	8002216 <HAL_RCC_ClockConfig+0x2de>
 80020b0:	2302      	movs	r3, #2
 80020b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b6:	fa93 f3a3 	rbit	r3, r3
 80020ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80020bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020be:	fab3 f383 	clz	r3, r3
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	095b      	lsrs	r3, r3, #5
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d102      	bne.n	80020d8 <HAL_RCC_ClockConfig+0x1a0>
 80020d2:	4b31      	ldr	r3, [pc, #196]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	e00d      	b.n	80020f4 <HAL_RCC_ClockConfig+0x1bc>
 80020d8:	2302      	movs	r3, #2
 80020da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020de:	fa93 f3a3 	rbit	r3, r3
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24
 80020e4:	2302      	movs	r3, #2
 80020e6:	623b      	str	r3, [r7, #32]
 80020e8:	6a3b      	ldr	r3, [r7, #32]
 80020ea:	fa93 f3a3 	rbit	r3, r3
 80020ee:	61fb      	str	r3, [r7, #28]
 80020f0:	4b29      	ldr	r3, [pc, #164]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 80020f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f4:	2202      	movs	r2, #2
 80020f6:	61ba      	str	r2, [r7, #24]
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	fa92 f2a2 	rbit	r2, r2
 80020fe:	617a      	str	r2, [r7, #20]
  return result;
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	fab2 f282 	clz	r2, r2
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	f042 0220 	orr.w	r2, r2, #32
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	f002 021f 	and.w	r2, r2, #31
 8002112:	2101      	movs	r1, #1
 8002114:	fa01 f202 	lsl.w	r2, r1, r2
 8002118:	4013      	ands	r3, r2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e079      	b.n	8002216 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002122:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f023 0203 	bic.w	r2, r3, #3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	491a      	ldr	r1, [pc, #104]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 8002130:	4313      	orrs	r3, r2
 8002132:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002134:	f7fe fc9e 	bl	8000a74 <HAL_GetTick>
 8002138:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213a:	e00a      	b.n	8002152 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800213c:	f7fe fc9a 	bl	8000a74 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	f241 3288 	movw	r2, #5000	; 0x1388
 800214a:	4293      	cmp	r3, r2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e061      	b.n	8002216 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002152:	4b11      	ldr	r3, [pc, #68]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 020c 	and.w	r2, r3, #12
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	429a      	cmp	r2, r3
 8002162:	d1eb      	bne.n	800213c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <HAL_RCC_ClockConfig+0x25c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	429a      	cmp	r2, r3
 8002170:	d214      	bcs.n	800219c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002172:	4b08      	ldr	r3, [pc, #32]	; (8002194 <HAL_RCC_ClockConfig+0x25c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f023 0207 	bic.w	r2, r3, #7
 800217a:	4906      	ldr	r1, [pc, #24]	; (8002194 <HAL_RCC_ClockConfig+0x25c>)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	4313      	orrs	r3, r2
 8002180:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002182:	4b04      	ldr	r3, [pc, #16]	; (8002194 <HAL_RCC_ClockConfig+0x25c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	d005      	beq.n	800219c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e040      	b.n	8002216 <HAL_RCC_ClockConfig+0x2de>
 8002194:	40022000 	.word	0x40022000
 8002198:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d008      	beq.n	80021ba <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021a8:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <HAL_RCC_ClockConfig+0x2e8>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	491a      	ldr	r1, [pc, #104]	; (8002220 <HAL_RCC_ClockConfig+0x2e8>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d009      	beq.n	80021da <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021c6:	4b16      	ldr	r3, [pc, #88]	; (8002220 <HAL_RCC_ClockConfig+0x2e8>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	4912      	ldr	r1, [pc, #72]	; (8002220 <HAL_RCC_ClockConfig+0x2e8>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021da:	f000 f829 	bl	8002230 <HAL_RCC_GetSysClockFreq>
 80021de:	4601      	mov	r1, r0
 80021e0:	4b0f      	ldr	r3, [pc, #60]	; (8002220 <HAL_RCC_ClockConfig+0x2e8>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021e8:	22f0      	movs	r2, #240	; 0xf0
 80021ea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	fa92 f2a2 	rbit	r2, r2
 80021f2:	60fa      	str	r2, [r7, #12]
  return result;
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	fab2 f282 	clz	r2, r2
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	40d3      	lsrs	r3, r2
 80021fe:	4a09      	ldr	r2, [pc, #36]	; (8002224 <HAL_RCC_ClockConfig+0x2ec>)
 8002200:	5cd3      	ldrb	r3, [r2, r3]
 8002202:	fa21 f303 	lsr.w	r3, r1, r3
 8002206:	4a08      	ldr	r2, [pc, #32]	; (8002228 <HAL_RCC_ClockConfig+0x2f0>)
 8002208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800220a:	4b08      	ldr	r3, [pc, #32]	; (800222c <HAL_RCC_ClockConfig+0x2f4>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe fbec 	bl	80009ec <HAL_InitTick>
  
  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3778      	adds	r7, #120	; 0x78
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40021000 	.word	0x40021000
 8002224:	08003cd0 	.word	0x08003cd0
 8002228:	20000000 	.word	0x20000000
 800222c:	20000004 	.word	0x20000004

08002230 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002230:	b480      	push	{r7}
 8002232:	b08b      	sub	sp, #44	; 0x2c
 8002234:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
 800223a:	2300      	movs	r3, #0
 800223c:	61bb      	str	r3, [r7, #24]
 800223e:	2300      	movs	r3, #0
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002246:	2300      	movs	r3, #0
 8002248:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800224a:	4b29      	ldr	r3, [pc, #164]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f003 030c 	and.w	r3, r3, #12
 8002256:	2b04      	cmp	r3, #4
 8002258:	d002      	beq.n	8002260 <HAL_RCC_GetSysClockFreq+0x30>
 800225a:	2b08      	cmp	r3, #8
 800225c:	d003      	beq.n	8002266 <HAL_RCC_GetSysClockFreq+0x36>
 800225e:	e03c      	b.n	80022da <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002260:	4b24      	ldr	r3, [pc, #144]	; (80022f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002262:	623b      	str	r3, [r7, #32]
      break;
 8002264:	e03c      	b.n	80022e0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800226c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002270:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	fa92 f2a2 	rbit	r2, r2
 8002278:	607a      	str	r2, [r7, #4]
  return result;
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	fab2 f282 	clz	r2, r2
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	40d3      	lsrs	r3, r2
 8002284:	4a1c      	ldr	r2, [pc, #112]	; (80022f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002286:	5cd3      	ldrb	r3, [r2, r3]
 8002288:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800228a:	4b19      	ldr	r3, [pc, #100]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800228c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228e:	f003 030f 	and.w	r3, r3, #15
 8002292:	220f      	movs	r2, #15
 8002294:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	fa92 f2a2 	rbit	r2, r2
 800229c:	60fa      	str	r2, [r7, #12]
  return result;
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	fab2 f282 	clz	r2, r2
 80022a4:	b2d2      	uxtb	r2, r2
 80022a6:	40d3      	lsrs	r3, r2
 80022a8:	4a14      	ldr	r2, [pc, #80]	; (80022fc <HAL_RCC_GetSysClockFreq+0xcc>)
 80022aa:	5cd3      	ldrb	r3, [r2, r3]
 80022ac:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d008      	beq.n	80022ca <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022b8:	4a0e      	ldr	r2, [pc, #56]	; (80022f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	fb02 f303 	mul.w	r3, r2, r3
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24
 80022c8:	e004      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	4a0c      	ldr	r2, [pc, #48]	; (8002300 <HAL_RCC_GetSysClockFreq+0xd0>)
 80022ce:	fb02 f303 	mul.w	r3, r2, r3
 80022d2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	623b      	str	r3, [r7, #32]
      break;
 80022d8:	e002      	b.n	80022e0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022dc:	623b      	str	r3, [r7, #32]
      break;
 80022de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022e0:	6a3b      	ldr	r3, [r7, #32]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	372c      	adds	r7, #44	; 0x2c
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	40021000 	.word	0x40021000
 80022f4:	007a1200 	.word	0x007a1200
 80022f8:	08003ce8 	.word	0x08003ce8
 80022fc:	08003cf8 	.word	0x08003cf8
 8002300:	003d0900 	.word	0x003d0900

08002304 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002308:	4b03      	ldr	r3, [pc, #12]	; (8002318 <HAL_RCC_GetHCLKFreq+0x14>)
 800230a:	681b      	ldr	r3, [r3, #0]
}
 800230c:	4618      	mov	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	20000000 	.word	0x20000000

0800231c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002322:	f7ff ffef 	bl	8002304 <HAL_RCC_GetHCLKFreq>
 8002326:	4601      	mov	r1, r0
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002330:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002334:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	fa92 f2a2 	rbit	r2, r2
 800233c:	603a      	str	r2, [r7, #0]
  return result;
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	fab2 f282 	clz	r2, r2
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	40d3      	lsrs	r3, r2
 8002348:	4a04      	ldr	r2, [pc, #16]	; (800235c <HAL_RCC_GetPCLK1Freq+0x40>)
 800234a:	5cd3      	ldrb	r3, [r2, r3]
 800234c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002350:	4618      	mov	r0, r3
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40021000 	.word	0x40021000
 800235c:	08003ce0 	.word	0x08003ce0

08002360 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002366:	f7ff ffcd 	bl	8002304 <HAL_RCC_GetHCLKFreq>
 800236a:	4601      	mov	r1, r0
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002374:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002378:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	fa92 f2a2 	rbit	r2, r2
 8002380:	603a      	str	r2, [r7, #0]
  return result;
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	fab2 f282 	clz	r2, r2
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	40d3      	lsrs	r3, r2
 800238c:	4a04      	ldr	r2, [pc, #16]	; (80023a0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800238e:	5cd3      	ldrb	r3, [r2, r3]
 8002390:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40021000 	.word	0x40021000
 80023a0:	08003ce0 	.word	0x08003ce0

080023a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b092      	sub	sp, #72	; 0x48
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023ac:	2300      	movs	r3, #0
 80023ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80023b4:	2300      	movs	r3, #0
 80023b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 80cd 	beq.w	8002562 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023c8:	4b86      	ldr	r3, [pc, #536]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10e      	bne.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d4:	4b83      	ldr	r3, [pc, #524]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023d6:	69db      	ldr	r3, [r3, #28]
 80023d8:	4a82      	ldr	r2, [pc, #520]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023de:	61d3      	str	r3, [r2, #28]
 80023e0:	4b80      	ldr	r3, [pc, #512]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023e2:	69db      	ldr	r3, [r3, #28]
 80023e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ec:	2301      	movs	r3, #1
 80023ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f2:	4b7d      	ldr	r3, [pc, #500]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d118      	bne.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023fe:	4b7a      	ldr	r3, [pc, #488]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a79      	ldr	r2, [pc, #484]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002408:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800240a:	f7fe fb33 	bl	8000a74 <HAL_GetTick>
 800240e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002410:	e008      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002412:	f7fe fb2f 	bl	8000a74 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b64      	cmp	r3, #100	; 0x64
 800241e:	d901      	bls.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e0db      	b.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002424:	4b70      	ldr	r3, [pc, #448]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0f0      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002430:	4b6c      	ldr	r3, [pc, #432]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002438:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800243a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800243c:	2b00      	cmp	r3, #0
 800243e:	d07d      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002448:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800244a:	429a      	cmp	r2, r3
 800244c:	d076      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800244e:	4b65      	ldr	r3, [pc, #404]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002456:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002458:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800245c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002460:	fa93 f3a3 	rbit	r3, r3
 8002464:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002468:	fab3 f383 	clz	r3, r3
 800246c:	b2db      	uxtb	r3, r3
 800246e:	461a      	mov	r2, r3
 8002470:	4b5e      	ldr	r3, [pc, #376]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002472:	4413      	add	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	461a      	mov	r2, r3
 8002478:	2301      	movs	r3, #1
 800247a:	6013      	str	r3, [r2, #0]
 800247c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002480:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002484:	fa93 f3a3 	rbit	r3, r3
 8002488:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800248a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800248c:	fab3 f383 	clz	r3, r3
 8002490:	b2db      	uxtb	r3, r3
 8002492:	461a      	mov	r2, r3
 8002494:	4b55      	ldr	r3, [pc, #340]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	461a      	mov	r2, r3
 800249c:	2300      	movs	r3, #0
 800249e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80024a0:	4a50      	ldr	r2, [pc, #320]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024a4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d045      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b0:	f7fe fae0 	bl	8000a74 <HAL_GetTick>
 80024b4:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b6:	e00a      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b8:	f7fe fadc 	bl	8000a74 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d901      	bls.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e086      	b.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x238>
 80024ce:	2302      	movs	r3, #2
 80024d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d4:	fa93 f3a3 	rbit	r3, r3
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
 80024da:	2302      	movs	r3, #2
 80024dc:	623b      	str	r3, [r7, #32]
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	fa93 f3a3 	rbit	r3, r3
 80024e4:	61fb      	str	r3, [r7, #28]
  return result;
 80024e6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e8:	fab3 f383 	clz	r3, r3
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	095b      	lsrs	r3, r3, #5
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	f043 0302 	orr.w	r3, r3, #2
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d102      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80024fc:	4b39      	ldr	r3, [pc, #228]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	e007      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002502:	2302      	movs	r3, #2
 8002504:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	fa93 f3a3 	rbit	r3, r3
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	4b35      	ldr	r3, [pc, #212]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	2202      	movs	r2, #2
 8002514:	613a      	str	r2, [r7, #16]
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	fa92 f2a2 	rbit	r2, r2
 800251c:	60fa      	str	r2, [r7, #12]
  return result;
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	fab2 f282 	clz	r2, r2
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	f002 021f 	and.w	r2, r2, #31
 8002530:	2101      	movs	r1, #1
 8002532:	fa01 f202 	lsl.w	r2, r1, r2
 8002536:	4013      	ands	r3, r2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0bd      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800253c:	4b29      	ldr	r3, [pc, #164]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	4926      	ldr	r1, [pc, #152]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800254a:	4313      	orrs	r3, r2
 800254c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800254e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002552:	2b01      	cmp	r3, #1
 8002554:	d105      	bne.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002556:	4b23      	ldr	r3, [pc, #140]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	4a22      	ldr	r2, [pc, #136]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800255c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002560:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d008      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800256e:	4b1d      	ldr	r3, [pc, #116]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	f023 0203 	bic.w	r2, r3, #3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	491a      	ldr	r1, [pc, #104]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800257c:	4313      	orrs	r3, r2
 800257e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0320 	and.w	r3, r3, #32
 8002588:	2b00      	cmp	r3, #0
 800258a:	d008      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800258c:	4b15      	ldr	r3, [pc, #84]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800258e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002590:	f023 0210 	bic.w	r2, r3, #16
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	4912      	ldr	r1, [pc, #72]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800259a:	4313      	orrs	r3, r2
 800259c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d008      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80025aa:	4b0e      	ldr	r3, [pc, #56]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ae:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	490b      	ldr	r1, [pc, #44]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d008      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80025c8:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	4903      	ldr	r1, [pc, #12]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3748      	adds	r7, #72	; 0x48
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40021000 	.word	0x40021000
 80025e8:	40007000 	.word	0x40007000
 80025ec:	10908100 	.word	0x10908100

080025f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e049      	b.n	8002696 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d106      	bne.n	800261c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7fe f87c 	bl	8000714 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2202      	movs	r2, #2
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3304      	adds	r3, #4
 800262c:	4619      	mov	r1, r3
 800262e:	4610      	mov	r0, r2
 8002630:	f000 f99c 	bl	800296c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e049      	b.n	8002744 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d106      	bne.n	80026ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f7fd fff1 	bl	80006ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2202      	movs	r2, #2
 80026ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	3304      	adds	r3, #4
 80026da:	4619      	mov	r1, r3
 80026dc:	4610      	mov	r0, r2
 80026de:	f000 f945 	bl	800296c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800275e:	2b01      	cmp	r3, #1
 8002760:	d101      	bne.n	8002766 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002762:	2302      	movs	r3, #2
 8002764:	e0fd      	b.n	8002962 <HAL_TIM_PWM_ConfigChannel+0x216>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b14      	cmp	r3, #20
 8002772:	f200 80f0 	bhi.w	8002956 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8002776:	a201      	add	r2, pc, #4	; (adr r2, 800277c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800277c:	080027d1 	.word	0x080027d1
 8002780:	08002957 	.word	0x08002957
 8002784:	08002957 	.word	0x08002957
 8002788:	08002957 	.word	0x08002957
 800278c:	08002811 	.word	0x08002811
 8002790:	08002957 	.word	0x08002957
 8002794:	08002957 	.word	0x08002957
 8002798:	08002957 	.word	0x08002957
 800279c:	08002853 	.word	0x08002853
 80027a0:	08002957 	.word	0x08002957
 80027a4:	08002957 	.word	0x08002957
 80027a8:	08002957 	.word	0x08002957
 80027ac:	08002893 	.word	0x08002893
 80027b0:	08002957 	.word	0x08002957
 80027b4:	08002957 	.word	0x08002957
 80027b8:	08002957 	.word	0x08002957
 80027bc:	080028d5 	.word	0x080028d5
 80027c0:	08002957 	.word	0x08002957
 80027c4:	08002957 	.word	0x08002957
 80027c8:	08002957 	.word	0x08002957
 80027cc:	08002915 	.word	0x08002915
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68b9      	ldr	r1, [r7, #8]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 f940 	bl	8002a5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	699a      	ldr	r2, [r3, #24]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f042 0208 	orr.w	r2, r2, #8
 80027ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	699a      	ldr	r2, [r3, #24]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 0204 	bic.w	r2, r2, #4
 80027fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6999      	ldr	r1, [r3, #24]
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	691a      	ldr	r2, [r3, #16]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	619a      	str	r2, [r3, #24]
      break;
 800280e:	e0a3      	b.n	8002958 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68b9      	ldr	r1, [r7, #8]
 8002816:	4618      	mov	r0, r3
 8002818:	f000 f9a6 	bl	8002b68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	699a      	ldr	r2, [r3, #24]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800282a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	699a      	ldr	r2, [r3, #24]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800283a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6999      	ldr	r1, [r3, #24]
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	021a      	lsls	r2, r3, #8
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	619a      	str	r2, [r3, #24]
      break;
 8002850:	e082      	b.n	8002958 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68b9      	ldr	r1, [r7, #8]
 8002858:	4618      	mov	r0, r3
 800285a:	f000 fa05 	bl	8002c68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	69da      	ldr	r2, [r3, #28]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f042 0208 	orr.w	r2, r2, #8
 800286c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	69da      	ldr	r2, [r3, #28]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 0204 	bic.w	r2, r2, #4
 800287c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	69d9      	ldr	r1, [r3, #28]
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	691a      	ldr	r2, [r3, #16]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	61da      	str	r2, [r3, #28]
      break;
 8002890:	e062      	b.n	8002958 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68b9      	ldr	r1, [r7, #8]
 8002898:	4618      	mov	r0, r3
 800289a:	f000 fa63 	bl	8002d64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	69da      	ldr	r2, [r3, #28]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	69da      	ldr	r2, [r3, #28]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	69d9      	ldr	r1, [r3, #28]
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	021a      	lsls	r2, r3, #8
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	61da      	str	r2, [r3, #28]
      break;
 80028d2:	e041      	b.n	8002958 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68b9      	ldr	r1, [r7, #8]
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 faa6 	bl	8002e2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0208 	orr.w	r2, r2, #8
 80028ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0204 	bic.w	r2, r2, #4
 80028fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	691a      	ldr	r2, [r3, #16]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	430a      	orrs	r2, r1
 8002910:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002912:	e021      	b.n	8002958 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68b9      	ldr	r1, [r7, #8]
 800291a:	4618      	mov	r0, r3
 800291c:	f000 fae4 	bl	8002ee8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800292e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800293e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	021a      	lsls	r2, r3, #8
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002954:	e000      	b.n	8002958 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8002956:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop

0800296c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a32      	ldr	r2, [pc, #200]	; (8002a48 <TIM_Base_SetConfig+0xdc>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d007      	beq.n	8002994 <TIM_Base_SetConfig+0x28>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800298a:	d003      	beq.n	8002994 <TIM_Base_SetConfig+0x28>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a2f      	ldr	r2, [pc, #188]	; (8002a4c <TIM_Base_SetConfig+0xe0>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d108      	bne.n	80029a6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800299a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a27      	ldr	r2, [pc, #156]	; (8002a48 <TIM_Base_SetConfig+0xdc>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d013      	beq.n	80029d6 <TIM_Base_SetConfig+0x6a>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b4:	d00f      	beq.n	80029d6 <TIM_Base_SetConfig+0x6a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a24      	ldr	r2, [pc, #144]	; (8002a4c <TIM_Base_SetConfig+0xe0>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d00b      	beq.n	80029d6 <TIM_Base_SetConfig+0x6a>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a23      	ldr	r2, [pc, #140]	; (8002a50 <TIM_Base_SetConfig+0xe4>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d007      	beq.n	80029d6 <TIM_Base_SetConfig+0x6a>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a22      	ldr	r2, [pc, #136]	; (8002a54 <TIM_Base_SetConfig+0xe8>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d003      	beq.n	80029d6 <TIM_Base_SetConfig+0x6a>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a21      	ldr	r2, [pc, #132]	; (8002a58 <TIM_Base_SetConfig+0xec>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d108      	bne.n	80029e8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a0e      	ldr	r2, [pc, #56]	; (8002a48 <TIM_Base_SetConfig+0xdc>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d00b      	beq.n	8002a2c <TIM_Base_SetConfig+0xc0>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a0e      	ldr	r2, [pc, #56]	; (8002a50 <TIM_Base_SetConfig+0xe4>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d007      	beq.n	8002a2c <TIM_Base_SetConfig+0xc0>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a0d      	ldr	r2, [pc, #52]	; (8002a54 <TIM_Base_SetConfig+0xe8>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d003      	beq.n	8002a2c <TIM_Base_SetConfig+0xc0>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a0c      	ldr	r2, [pc, #48]	; (8002a58 <TIM_Base_SetConfig+0xec>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d103      	bne.n	8002a34 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	615a      	str	r2, [r3, #20]
}
 8002a3a:	bf00      	nop
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	40012c00 	.word	0x40012c00
 8002a4c:	40000400 	.word	0x40000400
 8002a50:	40014000 	.word	0x40014000
 8002a54:	40014400 	.word	0x40014400
 8002a58:	40014800 	.word	0x40014800

08002a5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b087      	sub	sp, #28
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	f023 0201 	bic.w	r2, r3, #1
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f023 0303 	bic.w	r3, r3, #3
 8002a96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f023 0302 	bic.w	r3, r3, #2
 8002aa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a28      	ldr	r2, [pc, #160]	; (8002b58 <TIM_OC1_SetConfig+0xfc>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d00b      	beq.n	8002ad4 <TIM_OC1_SetConfig+0x78>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a27      	ldr	r2, [pc, #156]	; (8002b5c <TIM_OC1_SetConfig+0x100>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d007      	beq.n	8002ad4 <TIM_OC1_SetConfig+0x78>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a26      	ldr	r2, [pc, #152]	; (8002b60 <TIM_OC1_SetConfig+0x104>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d003      	beq.n	8002ad4 <TIM_OC1_SetConfig+0x78>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a25      	ldr	r2, [pc, #148]	; (8002b64 <TIM_OC1_SetConfig+0x108>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d10c      	bne.n	8002aee <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	f023 0308 	bic.w	r3, r3, #8
 8002ada:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f023 0304 	bic.w	r3, r3, #4
 8002aec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a19      	ldr	r2, [pc, #100]	; (8002b58 <TIM_OC1_SetConfig+0xfc>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d00b      	beq.n	8002b0e <TIM_OC1_SetConfig+0xb2>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a18      	ldr	r2, [pc, #96]	; (8002b5c <TIM_OC1_SetConfig+0x100>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d007      	beq.n	8002b0e <TIM_OC1_SetConfig+0xb2>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a17      	ldr	r2, [pc, #92]	; (8002b60 <TIM_OC1_SetConfig+0x104>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d003      	beq.n	8002b0e <TIM_OC1_SetConfig+0xb2>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a16      	ldr	r2, [pc, #88]	; (8002b64 <TIM_OC1_SetConfig+0x108>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d111      	bne.n	8002b32 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	621a      	str	r2, [r3, #32]
}
 8002b4c:	bf00      	nop
 8002b4e:	371c      	adds	r7, #28
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	40012c00 	.word	0x40012c00
 8002b5c:	40014000 	.word	0x40014000
 8002b60:	40014400 	.word	0x40014400
 8002b64:	40014800 	.word	0x40014800

08002b68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b087      	sub	sp, #28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	f023 0210 	bic.w	r2, r3, #16
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	021b      	lsls	r3, r3, #8
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f023 0320 	bic.w	r3, r3, #32
 8002bb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	011b      	lsls	r3, r3, #4
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a24      	ldr	r2, [pc, #144]	; (8002c58 <TIM_OC2_SetConfig+0xf0>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d10d      	bne.n	8002be8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	011b      	lsls	r3, r3, #4
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002be6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a1b      	ldr	r2, [pc, #108]	; (8002c58 <TIM_OC2_SetConfig+0xf0>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d00b      	beq.n	8002c08 <TIM_OC2_SetConfig+0xa0>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a1a      	ldr	r2, [pc, #104]	; (8002c5c <TIM_OC2_SetConfig+0xf4>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d007      	beq.n	8002c08 <TIM_OC2_SetConfig+0xa0>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a19      	ldr	r2, [pc, #100]	; (8002c60 <TIM_OC2_SetConfig+0xf8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d003      	beq.n	8002c08 <TIM_OC2_SetConfig+0xa0>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a18      	ldr	r2, [pc, #96]	; (8002c64 <TIM_OC2_SetConfig+0xfc>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d113      	bne.n	8002c30 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c0e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c16:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	621a      	str	r2, [r3, #32]
}
 8002c4a:	bf00      	nop
 8002c4c:	371c      	adds	r7, #28
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	40012c00 	.word	0x40012c00
 8002c5c:	40014000 	.word	0x40014000
 8002c60:	40014400 	.word	0x40014400
 8002c64:	40014800 	.word	0x40014800

08002c68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b087      	sub	sp, #28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f023 0303 	bic.w	r3, r3, #3
 8002ca2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002cb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	021b      	lsls	r3, r3, #8
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a23      	ldr	r2, [pc, #140]	; (8002d54 <TIM_OC3_SetConfig+0xec>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d10d      	bne.n	8002ce6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	021b      	lsls	r3, r3, #8
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ce4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a1a      	ldr	r2, [pc, #104]	; (8002d54 <TIM_OC3_SetConfig+0xec>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d00b      	beq.n	8002d06 <TIM_OC3_SetConfig+0x9e>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a19      	ldr	r2, [pc, #100]	; (8002d58 <TIM_OC3_SetConfig+0xf0>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d007      	beq.n	8002d06 <TIM_OC3_SetConfig+0x9e>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a18      	ldr	r2, [pc, #96]	; (8002d5c <TIM_OC3_SetConfig+0xf4>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d003      	beq.n	8002d06 <TIM_OC3_SetConfig+0x9e>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a17      	ldr	r2, [pc, #92]	; (8002d60 <TIM_OC3_SetConfig+0xf8>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d113      	bne.n	8002d2e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	011b      	lsls	r3, r3, #4
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	011b      	lsls	r3, r3, #4
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	621a      	str	r2, [r3, #32]
}
 8002d48:	bf00      	nop
 8002d4a:	371c      	adds	r7, #28
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	40012c00 	.word	0x40012c00
 8002d58:	40014000 	.word	0x40014000
 8002d5c:	40014400 	.word	0x40014400
 8002d60:	40014800 	.word	0x40014800

08002d64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	021b      	lsls	r3, r3, #8
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002db2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	031b      	lsls	r3, r3, #12
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a16      	ldr	r2, [pc, #88]	; (8002e1c <TIM_OC4_SetConfig+0xb8>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d00b      	beq.n	8002de0 <TIM_OC4_SetConfig+0x7c>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a15      	ldr	r2, [pc, #84]	; (8002e20 <TIM_OC4_SetConfig+0xbc>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d007      	beq.n	8002de0 <TIM_OC4_SetConfig+0x7c>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a14      	ldr	r2, [pc, #80]	; (8002e24 <TIM_OC4_SetConfig+0xc0>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d003      	beq.n	8002de0 <TIM_OC4_SetConfig+0x7c>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a13      	ldr	r2, [pc, #76]	; (8002e28 <TIM_OC4_SetConfig+0xc4>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d109      	bne.n	8002df4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002de6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	019b      	lsls	r3, r3, #6
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	621a      	str	r2, [r3, #32]
}
 8002e0e:	bf00      	nop
 8002e10:	371c      	adds	r7, #28
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	40012c00 	.word	0x40012c00
 8002e20:	40014000 	.word	0x40014000
 8002e24:	40014400 	.word	0x40014400
 8002e28:	40014800 	.word	0x40014800

08002e2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b087      	sub	sp, #28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002e70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	041b      	lsls	r3, r3, #16
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a15      	ldr	r2, [pc, #84]	; (8002ed8 <TIM_OC5_SetConfig+0xac>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d00b      	beq.n	8002e9e <TIM_OC5_SetConfig+0x72>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a14      	ldr	r2, [pc, #80]	; (8002edc <TIM_OC5_SetConfig+0xb0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d007      	beq.n	8002e9e <TIM_OC5_SetConfig+0x72>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a13      	ldr	r2, [pc, #76]	; (8002ee0 <TIM_OC5_SetConfig+0xb4>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d003      	beq.n	8002e9e <TIM_OC5_SetConfig+0x72>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a12      	ldr	r2, [pc, #72]	; (8002ee4 <TIM_OC5_SetConfig+0xb8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d109      	bne.n	8002eb2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ea4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	021b      	lsls	r3, r3, #8
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	621a      	str	r2, [r3, #32]
}
 8002ecc:	bf00      	nop
 8002ece:	371c      	adds	r7, #28
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	40012c00 	.word	0x40012c00
 8002edc:	40014000 	.word	0x40014000
 8002ee0:	40014400 	.word	0x40014400
 8002ee4:	40014800 	.word	0x40014800

08002ee8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b087      	sub	sp, #28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	021b      	lsls	r3, r3, #8
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	051b      	lsls	r3, r3, #20
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a16      	ldr	r2, [pc, #88]	; (8002f98 <TIM_OC6_SetConfig+0xb0>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d00b      	beq.n	8002f5c <TIM_OC6_SetConfig+0x74>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a15      	ldr	r2, [pc, #84]	; (8002f9c <TIM_OC6_SetConfig+0xb4>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d007      	beq.n	8002f5c <TIM_OC6_SetConfig+0x74>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a14      	ldr	r2, [pc, #80]	; (8002fa0 <TIM_OC6_SetConfig+0xb8>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d003      	beq.n	8002f5c <TIM_OC6_SetConfig+0x74>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a13      	ldr	r2, [pc, #76]	; (8002fa4 <TIM_OC6_SetConfig+0xbc>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d109      	bne.n	8002f70 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	029b      	lsls	r3, r3, #10
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	621a      	str	r2, [r3, #32]
}
 8002f8a:	bf00      	nop
 8002f8c:	371c      	adds	r7, #28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	40012c00 	.word	0x40012c00
 8002f9c:	40014000 	.word	0x40014000
 8002fa0:	40014400 	.word	0x40014400
 8002fa4:	40014800 	.word	0x40014800

08002fa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d101      	bne.n	8002fc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	e054      	b.n	800306a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2202      	movs	r2, #2
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a24      	ldr	r2, [pc, #144]	; (8003078 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d108      	bne.n	8002ffc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002ff0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003002:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	4313      	orrs	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a17      	ldr	r2, [pc, #92]	; (8003078 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d00e      	beq.n	800303e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003028:	d009      	beq.n	800303e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a13      	ldr	r2, [pc, #76]	; (800307c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d004      	beq.n	800303e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a11      	ldr	r2, [pc, #68]	; (8003080 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d10c      	bne.n	8003058 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003044:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	4313      	orrs	r3, r2
 800304e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68ba      	ldr	r2, [r7, #8]
 8003056:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	40012c00 	.word	0x40012c00
 800307c:	40000400 	.word	0x40000400
 8003080:	40014000 	.word	0x40014000

08003084 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800308e:	2300      	movs	r3, #0
 8003090:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800309c:	2302      	movs	r3, #2
 800309e:	e060      	b.n	8003162 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4313      	orrs	r3, r2
 80030de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003106:	4313      	orrs	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	041b      	lsls	r3, r3, #16
 8003116:	4313      	orrs	r3, r2
 8003118:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a14      	ldr	r2, [pc, #80]	; (8003170 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d115      	bne.n	8003150 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	051b      	lsls	r3, r3, #20
 8003130:	4313      	orrs	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	4313      	orrs	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	4313      	orrs	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	40012c00 	.word	0x40012c00

08003174 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e040      	b.n	8003208 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800318a:	2b00      	cmp	r3, #0
 800318c:	d106      	bne.n	800319c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7fd fb56 	bl	8000848 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2224      	movs	r2, #36	; 0x24
 80031a0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0201 	bic.w	r2, r2, #1
 80031b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 fa4c 	bl	8003650 <UART_SetConfig>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e022      	b.n	8003208 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d002      	beq.n	80031d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 fb78 	bl	80038c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0201 	orr.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 fbff 	bl	8003a04 <UART_CheckIdleState>
 8003206:	4603      	mov	r3, r0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b088      	sub	sp, #32
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003230:	69fa      	ldr	r2, [r7, #28]
 8003232:	f640 030f 	movw	r3, #2063	; 0x80f
 8003236:	4013      	ands	r3, r2
 8003238:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d113      	bne.n	8003268 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	f003 0320 	and.w	r3, r3, #32
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00e      	beq.n	8003268 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	f003 0320 	and.w	r3, r3, #32
 8003250:	2b00      	cmp	r3, #0
 8003252:	d009      	beq.n	8003268 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003258:	2b00      	cmp	r3, #0
 800325a:	f000 81cd 	beq.w	80035f8 <HAL_UART_IRQHandler+0x3e8>
      {
        huart->RxISR(huart);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	4798      	blx	r3
      }
      return;
 8003266:	e1c7      	b.n	80035f8 <HAL_UART_IRQHandler+0x3e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 80e3 	beq.w	8003436 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d105      	bne.n	8003286 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4ba5      	ldr	r3, [pc, #660]	; (8003514 <HAL_UART_IRQHandler+0x304>)
 800327e:	4013      	ands	r3, r2
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 80d8 	beq.w	8003436 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b00      	cmp	r3, #0
 800328e:	d010      	beq.n	80032b2 <HAL_UART_IRQHandler+0xa2>
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00b      	beq.n	80032b2 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2201      	movs	r2, #1
 80032a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032a8:	f043 0201 	orr.w	r2, r3, #1
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d010      	beq.n	80032de <HAL_UART_IRQHandler+0xce>
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00b      	beq.n	80032de <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2202      	movs	r2, #2
 80032cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032d4:	f043 0204 	orr.w	r2, r3, #4
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d010      	beq.n	800330a <HAL_UART_IRQHandler+0xfa>
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00b      	beq.n	800330a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2204      	movs	r2, #4
 80032f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003300:	f043 0202 	orr.w	r2, r3, #2
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	f003 0308 	and.w	r3, r3, #8
 8003310:	2b00      	cmp	r3, #0
 8003312:	d015      	beq.n	8003340 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	f003 0320 	and.w	r3, r3, #32
 800331a:	2b00      	cmp	r3, #0
 800331c:	d104      	bne.n	8003328 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00b      	beq.n	8003340 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2208      	movs	r2, #8
 800332e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003336:	f043 0208 	orr.w	r2, r3, #8
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003346:	2b00      	cmp	r3, #0
 8003348:	d011      	beq.n	800336e <HAL_UART_IRQHandler+0x15e>
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00c      	beq.n	800336e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800335c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003364:	f043 0220 	orr.w	r2, r3, #32
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 8141 	beq.w	80035fc <HAL_UART_IRQHandler+0x3ec>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	f003 0320 	and.w	r3, r3, #32
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00c      	beq.n	800339e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	f003 0320 	and.w	r3, r3, #32
 800338a:	2b00      	cmp	r3, #0
 800338c:	d007      	beq.n	800339e <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033a4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b0:	2b40      	cmp	r3, #64	; 0x40
 80033b2:	d004      	beq.n	80033be <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d031      	beq.n	8003422 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 fbe5 	bl	8003b8e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ce:	2b40      	cmp	r3, #64	; 0x40
 80033d0:	d123      	bne.n	800341a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033e0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d013      	beq.n	8003412 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ee:	4a4a      	ldr	r2, [pc, #296]	; (8003518 <HAL_UART_IRQHandler+0x308>)
 80033f0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fd fcb4 	bl	8000d64 <HAL_DMA_Abort_IT>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d017      	beq.n	8003432 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800340c:	4610      	mov	r0, r2
 800340e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003410:	e00f      	b.n	8003432 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f906 	bl	8003624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003418:	e00b      	b.n	8003432 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f902 	bl	8003624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003420:	e007      	b.n	8003432 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f8fe 	bl	8003624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003430:	e0e4      	b.n	80035fc <HAL_UART_IRQHandler+0x3ec>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003432:	bf00      	nop
    return;
 8003434:	e0e2      	b.n	80035fc <HAL_UART_IRQHandler+0x3ec>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800343a:	2b01      	cmp	r3, #1
 800343c:	f040 80a7 	bne.w	800358e <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	f003 0310 	and.w	r3, r3, #16
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 80a1 	beq.w	800358e <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	f003 0310 	and.w	r3, r3, #16
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 809b 	beq.w	800358e <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2210      	movs	r2, #16
 800345e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346a:	2b40      	cmp	r3, #64	; 0x40
 800346c:	d156      	bne.n	800351c <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003478:	893b      	ldrh	r3, [r7, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 80c0 	beq.w	8003600 <HAL_UART_IRQHandler+0x3f0>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003486:	893a      	ldrh	r2, [r7, #8]
 8003488:	429a      	cmp	r2, r3
 800348a:	f080 80b9 	bcs.w	8003600 <HAL_UART_IRQHandler+0x3f0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	893a      	ldrh	r2, [r7, #8]
 8003492:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	2b20      	cmp	r3, #32
 800349e:	d02a      	beq.n	80034f6 <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034ae:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0201 	bic.w	r2, r2, #1
 80034be:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034ce:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2220      	movs	r2, #32
 80034d4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 0210 	bic.w	r2, r2, #16
 80034ea:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7fd fbfe 	bl	8000cf2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003502:	b29b      	uxth	r3, r3
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	b29b      	uxth	r3, r3
 8003508:	4619      	mov	r1, r3
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f894 	bl	8003638 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003510:	e076      	b.n	8003600 <HAL_UART_IRQHandler+0x3f0>
 8003512:	bf00      	nop
 8003514:	04000120 	.word	0x04000120
 8003518:	08003bed 	.word	0x08003bed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003528:	b29b      	uxth	r3, r3
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003534:	b29b      	uxth	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d064      	beq.n	8003604 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_rx_data > 0U) )
 800353a:	897b      	ldrh	r3, [r7, #10]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d061      	beq.n	8003604 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800354e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689a      	ldr	r2, [r3, #8]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0201 	bic.w	r2, r2, #1
 800355e:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2220      	movs	r2, #32
 8003564:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 0210 	bic.w	r2, r2, #16
 8003580:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003582:	897b      	ldrh	r3, [r7, #10]
 8003584:	4619      	mov	r1, r3
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f856 	bl	8003638 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800358c:	e03a      	b.n	8003604 <HAL_UART_IRQHandler+0x3f4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00d      	beq.n	80035b4 <HAL_UART_IRQHandler+0x3a4>
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d008      	beq.n	80035b4 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80035aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 fb4c 	bl	8003c4a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80035b2:	e02a      	b.n	800360a <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00d      	beq.n	80035da <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d008      	beq.n	80035da <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d01b      	beq.n	8003608 <HAL_UART_IRQHandler+0x3f8>
    {
      huart->TxISR(huart);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	4798      	blx	r3
    }
    return;
 80035d8:	e016      	b.n	8003608 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d012      	beq.n	800360a <HAL_UART_IRQHandler+0x3fa>
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00d      	beq.n	800360a <HAL_UART_IRQHandler+0x3fa>
  {
    UART_EndTransmit_IT(huart);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 fb12 	bl	8003c18 <UART_EndTransmit_IT>
    return;
 80035f4:	bf00      	nop
 80035f6:	e008      	b.n	800360a <HAL_UART_IRQHandler+0x3fa>
      return;
 80035f8:	bf00      	nop
 80035fa:	e006      	b.n	800360a <HAL_UART_IRQHandler+0x3fa>
    return;
 80035fc:	bf00      	nop
 80035fe:	e004      	b.n	800360a <HAL_UART_IRQHandler+0x3fa>
      return;
 8003600:	bf00      	nop
 8003602:	e002      	b.n	800360a <HAL_UART_IRQHandler+0x3fa>
      return;
 8003604:	bf00      	nop
 8003606:	e000      	b.n	800360a <HAL_UART_IRQHandler+0x3fa>
    return;
 8003608:	bf00      	nop
  }

}
 800360a:	3720      	adds	r7, #32
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	460b      	mov	r3, r1
 8003642:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b088      	sub	sp, #32
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003658:	2300      	movs	r3, #0
 800365a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	431a      	orrs	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	431a      	orrs	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	4313      	orrs	r3, r2
 8003672:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	4b8b      	ldr	r3, [pc, #556]	; (80038a8 <UART_SetConfig+0x258>)
 800367c:	4013      	ands	r3, r2
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6812      	ldr	r2, [r2, #0]
 8003682:	6979      	ldr	r1, [r7, #20]
 8003684:	430b      	orrs	r3, r1
 8003686:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68da      	ldr	r2, [r3, #12]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	430a      	orrs	r2, r1
 80036c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a79      	ldr	r2, [pc, #484]	; (80038ac <UART_SetConfig+0x25c>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d121      	bne.n	8003710 <UART_SetConfig+0xc0>
 80036cc:	4b78      	ldr	r3, [pc, #480]	; (80038b0 <UART_SetConfig+0x260>)
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d0:	f003 0303 	and.w	r3, r3, #3
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d817      	bhi.n	8003708 <UART_SetConfig+0xb8>
 80036d8:	a201      	add	r2, pc, #4	; (adr r2, 80036e0 <UART_SetConfig+0x90>)
 80036da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036de:	bf00      	nop
 80036e0:	080036f1 	.word	0x080036f1
 80036e4:	080036fd 	.word	0x080036fd
 80036e8:	08003703 	.word	0x08003703
 80036ec:	080036f7 	.word	0x080036f7
 80036f0:	2300      	movs	r3, #0
 80036f2:	77fb      	strb	r3, [r7, #31]
 80036f4:	e01e      	b.n	8003734 <UART_SetConfig+0xe4>
 80036f6:	2302      	movs	r3, #2
 80036f8:	77fb      	strb	r3, [r7, #31]
 80036fa:	e01b      	b.n	8003734 <UART_SetConfig+0xe4>
 80036fc:	2304      	movs	r3, #4
 80036fe:	77fb      	strb	r3, [r7, #31]
 8003700:	e018      	b.n	8003734 <UART_SetConfig+0xe4>
 8003702:	2308      	movs	r3, #8
 8003704:	77fb      	strb	r3, [r7, #31]
 8003706:	e015      	b.n	8003734 <UART_SetConfig+0xe4>
 8003708:	2310      	movs	r3, #16
 800370a:	77fb      	strb	r3, [r7, #31]
 800370c:	bf00      	nop
 800370e:	e011      	b.n	8003734 <UART_SetConfig+0xe4>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a67      	ldr	r2, [pc, #412]	; (80038b4 <UART_SetConfig+0x264>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d102      	bne.n	8003720 <UART_SetConfig+0xd0>
 800371a:	2300      	movs	r3, #0
 800371c:	77fb      	strb	r3, [r7, #31]
 800371e:	e009      	b.n	8003734 <UART_SetConfig+0xe4>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a64      	ldr	r2, [pc, #400]	; (80038b8 <UART_SetConfig+0x268>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d102      	bne.n	8003730 <UART_SetConfig+0xe0>
 800372a:	2300      	movs	r3, #0
 800372c:	77fb      	strb	r3, [r7, #31]
 800372e:	e001      	b.n	8003734 <UART_SetConfig+0xe4>
 8003730:	2310      	movs	r3, #16
 8003732:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800373c:	d15c      	bne.n	80037f8 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 800373e:	7ffb      	ldrb	r3, [r7, #31]
 8003740:	2b08      	cmp	r3, #8
 8003742:	d828      	bhi.n	8003796 <UART_SetConfig+0x146>
 8003744:	a201      	add	r2, pc, #4	; (adr r2, 800374c <UART_SetConfig+0xfc>)
 8003746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374a:	bf00      	nop
 800374c:	08003771 	.word	0x08003771
 8003750:	08003779 	.word	0x08003779
 8003754:	08003781 	.word	0x08003781
 8003758:	08003797 	.word	0x08003797
 800375c:	08003787 	.word	0x08003787
 8003760:	08003797 	.word	0x08003797
 8003764:	08003797 	.word	0x08003797
 8003768:	08003797 	.word	0x08003797
 800376c:	0800378f 	.word	0x0800378f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003770:	f7fe fdd4 	bl	800231c <HAL_RCC_GetPCLK1Freq>
 8003774:	61b8      	str	r0, [r7, #24]
        break;
 8003776:	e013      	b.n	80037a0 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003778:	f7fe fdf2 	bl	8002360 <HAL_RCC_GetPCLK2Freq>
 800377c:	61b8      	str	r0, [r7, #24]
        break;
 800377e:	e00f      	b.n	80037a0 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003780:	4b4e      	ldr	r3, [pc, #312]	; (80038bc <UART_SetConfig+0x26c>)
 8003782:	61bb      	str	r3, [r7, #24]
        break;
 8003784:	e00c      	b.n	80037a0 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003786:	f7fe fd53 	bl	8002230 <HAL_RCC_GetSysClockFreq>
 800378a:	61b8      	str	r0, [r7, #24]
        break;
 800378c:	e008      	b.n	80037a0 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800378e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003792:	61bb      	str	r3, [r7, #24]
        break;
 8003794:	e004      	b.n	80037a0 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 8003796:	2300      	movs	r3, #0
 8003798:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	77bb      	strb	r3, [r7, #30]
        break;
 800379e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d074      	beq.n	8003890 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	005a      	lsls	r2, r3, #1
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	085b      	lsrs	r3, r3, #1
 80037b0:	441a      	add	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	2b0f      	cmp	r3, #15
 80037c2:	d916      	bls.n	80037f2 <UART_SetConfig+0x1a2>
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ca:	d212      	bcs.n	80037f2 <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	f023 030f 	bic.w	r3, r3, #15
 80037d4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	085b      	lsrs	r3, r3, #1
 80037da:	b29b      	uxth	r3, r3
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	89fb      	ldrh	r3, [r7, #14]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	89fa      	ldrh	r2, [r7, #14]
 80037ee:	60da      	str	r2, [r3, #12]
 80037f0:	e04e      	b.n	8003890 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	77bb      	strb	r3, [r7, #30]
 80037f6:	e04b      	b.n	8003890 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037f8:	7ffb      	ldrb	r3, [r7, #31]
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	d827      	bhi.n	800384e <UART_SetConfig+0x1fe>
 80037fe:	a201      	add	r2, pc, #4	; (adr r2, 8003804 <UART_SetConfig+0x1b4>)
 8003800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003804:	08003829 	.word	0x08003829
 8003808:	08003831 	.word	0x08003831
 800380c:	08003839 	.word	0x08003839
 8003810:	0800384f 	.word	0x0800384f
 8003814:	0800383f 	.word	0x0800383f
 8003818:	0800384f 	.word	0x0800384f
 800381c:	0800384f 	.word	0x0800384f
 8003820:	0800384f 	.word	0x0800384f
 8003824:	08003847 	.word	0x08003847
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003828:	f7fe fd78 	bl	800231c <HAL_RCC_GetPCLK1Freq>
 800382c:	61b8      	str	r0, [r7, #24]
        break;
 800382e:	e013      	b.n	8003858 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003830:	f7fe fd96 	bl	8002360 <HAL_RCC_GetPCLK2Freq>
 8003834:	61b8      	str	r0, [r7, #24]
        break;
 8003836:	e00f      	b.n	8003858 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003838:	4b20      	ldr	r3, [pc, #128]	; (80038bc <UART_SetConfig+0x26c>)
 800383a:	61bb      	str	r3, [r7, #24]
        break;
 800383c:	e00c      	b.n	8003858 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800383e:	f7fe fcf7 	bl	8002230 <HAL_RCC_GetSysClockFreq>
 8003842:	61b8      	str	r0, [r7, #24]
        break;
 8003844:	e008      	b.n	8003858 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800384a:	61bb      	str	r3, [r7, #24]
        break;
 800384c:	e004      	b.n	8003858 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 800384e:	2300      	movs	r3, #0
 8003850:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	77bb      	strb	r3, [r7, #30]
        break;
 8003856:	bf00      	nop
    }

    if (pclk != 0U)
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d018      	beq.n	8003890 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	085a      	lsrs	r2, r3, #1
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	441a      	add	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003870:	b29b      	uxth	r3, r3
 8003872:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	2b0f      	cmp	r3, #15
 8003878:	d908      	bls.n	800388c <UART_SetConfig+0x23c>
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003880:	d204      	bcs.n	800388c <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	60da      	str	r2, [r3, #12]
 800388a:	e001      	b.n	8003890 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800389c:	7fbb      	ldrb	r3, [r7, #30]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3720      	adds	r7, #32
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	efff69f3 	.word	0xefff69f3
 80038ac:	40013800 	.word	0x40013800
 80038b0:	40021000 	.word	0x40021000
 80038b4:	40004400 	.word	0x40004400
 80038b8:	40004800 	.word	0x40004800
 80038bc:	007a1200 	.word	0x007a1200

080038c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00a      	beq.n	80038ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00a      	beq.n	800390c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00a      	beq.n	800392e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003932:	f003 0308 	and.w	r3, r3, #8
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00a      	beq.n	8003950 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	430a      	orrs	r2, r1
 800394e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	f003 0310 	and.w	r3, r3, #16
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00a      	beq.n	8003972 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	f003 0320 	and.w	r3, r3, #32
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00a      	beq.n	8003994 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	430a      	orrs	r2, r1
 8003992:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399c:	2b00      	cmp	r3, #0
 800399e:	d01a      	beq.n	80039d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039be:	d10a      	bne.n	80039d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00a      	beq.n	80039f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	605a      	str	r2, [r3, #4]
  }
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af02      	add	r7, sp, #8
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a14:	f7fd f82e 	bl	8000a74 <HAL_GetTick>
 8003a18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0308 	and.w	r3, r3, #8
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	d10e      	bne.n	8003a46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f82d 	bl	8003a96 <UART_WaitOnFlagUntilTimeout>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e023      	b.n	8003a8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b04      	cmp	r3, #4
 8003a52:	d10e      	bne.n	8003a72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f817 	bl	8003a96 <UART_WaitOnFlagUntilTimeout>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e00d      	b.n	8003a8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2220      	movs	r2, #32
 8003a76:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b084      	sub	sp, #16
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	60f8      	str	r0, [r7, #12]
 8003a9e:	60b9      	str	r1, [r7, #8]
 8003aa0:	603b      	str	r3, [r7, #0]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aa6:	e05e      	b.n	8003b66 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aae:	d05a      	beq.n	8003b66 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab0:	f7fc ffe0 	bl	8000a74 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d302      	bcc.n	8003ac6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d11b      	bne.n	8003afe <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ad4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 0201 	bic.w	r2, r2, #1
 8003ae4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2220      	movs	r2, #32
 8003af0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e043      	b.n	8003b86 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d02c      	beq.n	8003b66 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b1a:	d124      	bne.n	8003b66 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b24:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b34:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 0201 	bic.w	r2, r2, #1
 8003b44:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2220      	movs	r2, #32
 8003b56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e00f      	b.n	8003b86 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	69da      	ldr	r2, [r3, #28]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	bf0c      	ite	eq
 8003b76:	2301      	moveq	r3, #1
 8003b78:	2300      	movne	r3, #0
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	79fb      	ldrb	r3, [r7, #7]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d091      	beq.n	8003aa8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ba4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0201 	bic.w	r2, r2, #1
 8003bb4:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d107      	bne.n	8003bce <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 0210 	bic.w	r2, r2, #16
 8003bcc:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2220      	movs	r2, #32
 8003bd2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f7ff fd0a 	bl	8003624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c10:	bf00      	nop
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c2e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2220      	movs	r2, #32
 8003c34:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f7ff fce7 	bl	8003610 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c42:	bf00      	nop
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
	...

08003c60 <__libc_init_array>:
 8003c60:	b570      	push	{r4, r5, r6, lr}
 8003c62:	4e0d      	ldr	r6, [pc, #52]	; (8003c98 <__libc_init_array+0x38>)
 8003c64:	4c0d      	ldr	r4, [pc, #52]	; (8003c9c <__libc_init_array+0x3c>)
 8003c66:	1ba4      	subs	r4, r4, r6
 8003c68:	10a4      	asrs	r4, r4, #2
 8003c6a:	2500      	movs	r5, #0
 8003c6c:	42a5      	cmp	r5, r4
 8003c6e:	d109      	bne.n	8003c84 <__libc_init_array+0x24>
 8003c70:	4e0b      	ldr	r6, [pc, #44]	; (8003ca0 <__libc_init_array+0x40>)
 8003c72:	4c0c      	ldr	r4, [pc, #48]	; (8003ca4 <__libc_init_array+0x44>)
 8003c74:	f000 f820 	bl	8003cb8 <_init>
 8003c78:	1ba4      	subs	r4, r4, r6
 8003c7a:	10a4      	asrs	r4, r4, #2
 8003c7c:	2500      	movs	r5, #0
 8003c7e:	42a5      	cmp	r5, r4
 8003c80:	d105      	bne.n	8003c8e <__libc_init_array+0x2e>
 8003c82:	bd70      	pop	{r4, r5, r6, pc}
 8003c84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c88:	4798      	blx	r3
 8003c8a:	3501      	adds	r5, #1
 8003c8c:	e7ee      	b.n	8003c6c <__libc_init_array+0xc>
 8003c8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c92:	4798      	blx	r3
 8003c94:	3501      	adds	r5, #1
 8003c96:	e7f2      	b.n	8003c7e <__libc_init_array+0x1e>
 8003c98:	08003d08 	.word	0x08003d08
 8003c9c:	08003d08 	.word	0x08003d08
 8003ca0:	08003d08 	.word	0x08003d08
 8003ca4:	08003d0c 	.word	0x08003d0c

08003ca8 <memset>:
 8003ca8:	4402      	add	r2, r0
 8003caa:	4603      	mov	r3, r0
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d100      	bne.n	8003cb2 <memset+0xa>
 8003cb0:	4770      	bx	lr
 8003cb2:	f803 1b01 	strb.w	r1, [r3], #1
 8003cb6:	e7f9      	b.n	8003cac <memset+0x4>

08003cb8 <_init>:
 8003cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cba:	bf00      	nop
 8003cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cbe:	bc08      	pop	{r3}
 8003cc0:	469e      	mov	lr, r3
 8003cc2:	4770      	bx	lr

08003cc4 <_fini>:
 8003cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc6:	bf00      	nop
 8003cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cca:	bc08      	pop	{r3}
 8003ccc:	469e      	mov	lr, r3
 8003cce:	4770      	bx	lr
