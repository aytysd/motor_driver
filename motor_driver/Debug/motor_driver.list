
motor_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d50  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005ed8  08005ed8  00015ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f10  08005f10  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005f10  08005f10  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f10  08005f10  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005f10  08005f10  00015f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f18  08005f18  00015f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005f1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000070  08005f8c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  08005f8c  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad12  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000340d  00000000  00000000  0003adb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  0003e1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc0  00000000  00000000  0003f098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000daba  00000000  00000000  0003fe58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000054ed  00000000  00000000  0004d912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00052dff  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004240  00000000  00000000  00052e54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005ec0 	.word	0x08005ec0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08005ec0 	.word	0x08005ec0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr
 80009f4:	0000      	movs	r0, r0
	...

080009f8 <_ZN8Feedback18current_speed_calcEv>:
int Feedback::PID_pwm  = 0;
int Feedback::current_pwm = 0;
int Feedback::prp_pwm = 0;

uint16_t Feedback::current_speed_calc()
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	uint16_t current_speed = RADIUS * 2 * M_PI * abs( Encoder::pulse_cnt ) / ( PPR * DT );
 8000a00:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <_ZN8Feedback18current_speed_calcEv+0x68>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	bfb8      	it	lt
 8000a08:	425b      	neglt	r3, r3
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff fd2e 	bl	800046c <__aeabi_i2d>
 8000a10:	a30f      	add	r3, pc, #60	; (adr r3, 8000a50 <_ZN8Feedback18current_speed_calcEv+0x58>)
 8000a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a16:	f7ff fd93 	bl	8000540 <__aeabi_dmul>
 8000a1a:	4602      	mov	r2, r0
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	a30d      	add	r3, pc, #52	; (adr r3, 8000a58 <_ZN8Feedback18current_speed_calcEv+0x60>)
 8000a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a28:	f7ff feb4 	bl	8000794 <__aeabi_ddiv>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	460b      	mov	r3, r1
 8000a30:	4610      	mov	r0, r2
 8000a32:	4619      	mov	r1, r3
 8000a34:	f7ff ffbe 	bl	80009b4 <__aeabi_d2uiz>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	81fb      	strh	r3, [r7, #14]
	Encoder::pulse_cnt = 0;
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <_ZN8Feedback18current_speed_calcEv+0x68>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
	return current_speed;
 8000a42:	89fb      	ldrh	r3, [r7, #14]


}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	f3af 8000 	nop.w
 8000a50:	1870fdb2 	.word	0x1870fdb2
 8000a54:	40750268 	.word	0x40750268
 8000a58:	9999999a 	.word	0x9999999a
 8000a5c:	40699999 	.word	0x40699999
 8000a60:	200000a8 	.word	0x200000a8

08000a64 <_ZN8Feedback15speed_diff_calcEtt>:


int Feedback::speed_diff_calc(uint16_t target_speed, uint16_t current_speed )
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	460b      	mov	r3, r1
 8000a6e:	807b      	strh	r3, [r7, #2]
 8000a70:	4613      	mov	r3, r2
 8000a72:	803b      	strh	r3, [r7, #0]


	if( target_speed == 0 )
 8000a74:	887b      	ldrh	r3, [r7, #2]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d102      	bne.n	8000a80 <_ZN8Feedback15speed_diff_calcEtt+0x1c>
	{
		target_speed++;
 8000a7a:	887b      	ldrh	r3, [r7, #2]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	807b      	strh	r3, [r7, #2]
	}

	int diff_percent = 100 * (int)(current_speed - target_speed) / (int)target_speed;
 8000a80:	883a      	ldrh	r2, [r7, #0]
 8000a82:	887b      	ldrh	r3, [r7, #2]
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	2264      	movs	r2, #100	; 0x64
 8000a88:	fb02 f203 	mul.w	r2, r2, r3
 8000a8c:	887b      	ldrh	r3, [r7, #2]
 8000a8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a92:	60fb      	str	r3, [r7, #12]


	return diff_percent;
 8000a94:	68fb      	ldr	r3, [r7, #12]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3714      	adds	r7, #20
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
	...

08000aa4 <_ZN8Feedback9reset_PIDEv>:


void Feedback::reset_PID()
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]

	this -> integral_diff = 0;
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <_ZN8Feedback9reset_PIDEv+0x20>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
	this -> PID_pwm = 0;
 8000ab2:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <_ZN8Feedback9reset_PIDEv+0x24>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]

	return;
 8000ab8:	bf00      	nop

}
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	2000008c 	.word	0x2000008c
 8000ac8:	20000090 	.word	0x20000090

08000acc <_ZN8Feedback11PID_controlEt>:


int Feedback::PID_control(uint16_t current_speed)
{
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	807b      	strh	r3, [r7, #2]

	uint16_t target_speed = (uint16_t)(( Rxdata[2] << 8 ) | ( Rxdata[3] ));
 8000ad8:	4b22      	ldr	r3, [pc, #136]	; (8000b64 <_ZN8Feedback11PID_controlEt+0x98>)
 8000ada:	789b      	ldrb	r3, [r3, #2]
 8000adc:	021b      	lsls	r3, r3, #8
 8000ade:	b21a      	sxth	r2, r3
 8000ae0:	4b20      	ldr	r3, [pc, #128]	; (8000b64 <_ZN8Feedback11PID_controlEt+0x98>)
 8000ae2:	78db      	ldrb	r3, [r3, #3]
 8000ae4:	b21b      	sxth	r3, r3
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	b21b      	sxth	r3, r3
 8000aea:	81fb      	strh	r3, [r7, #14]

	if( 3 > this -> speed_diff_calc( target_speed, current_speed ) && -3 < this -> speed_diff_calc( target_speed, current_speed ))
 8000aec:	887a      	ldrh	r2, [r7, #2]
 8000aee:	89fb      	ldrh	r3, [r7, #14]
 8000af0:	4619      	mov	r1, r3
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f7ff ffb6 	bl	8000a64 <_ZN8Feedback15speed_diff_calcEtt>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b02      	cmp	r3, #2
 8000afc:	dc0b      	bgt.n	8000b16 <_ZN8Feedback11PID_controlEt+0x4a>
 8000afe:	887a      	ldrh	r2, [r7, #2]
 8000b00:	89fb      	ldrh	r3, [r7, #14]
 8000b02:	4619      	mov	r1, r3
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f7ff ffad 	bl	8000a64 <_ZN8Feedback15speed_diff_calcEtt>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	f113 0f02 	cmn.w	r3, #2
 8000b10:	db01      	blt.n	8000b16 <_ZN8Feedback11PID_controlEt+0x4a>
 8000b12:	2301      	movs	r3, #1
 8000b14:	e000      	b.n	8000b18 <_ZN8Feedback11PID_controlEt+0x4c>
 8000b16:	2300      	movs	r3, #0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d004      	beq.n	8000b26 <_ZN8Feedback11PID_controlEt+0x5a>
	{
		this -> prp_pwm = this -> PID_pwm;
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <_ZN8Feedback11PID_controlEt+0x9c>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a12      	ldr	r2, [pc, #72]	; (8000b6c <_ZN8Feedback11PID_controlEt+0xa0>)
 8000b22:	6013      	str	r3, [r2, #0]
 8000b24:	e017      	b.n	8000b56 <_ZN8Feedback11PID_controlEt+0x8a>
	}
	else
	{
		Feedback::PID_pwm = this -> P_control(target_speed, current_speed) - this -> D_control(current_speed) + this -> I_control(target_speed, current_speed);
 8000b26:	887a      	ldrh	r2, [r7, #2]
 8000b28:	89fb      	ldrh	r3, [r7, #14]
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f000 f81f 	bl	8000b70 <_ZN8Feedback9P_controlEtt>
 8000b32:	4604      	mov	r4, r0
 8000b34:	887b      	ldrh	r3, [r7, #2]
 8000b36:	4619      	mov	r1, r3
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f000 f871 	bl	8000c20 <_ZN8Feedback9D_controlEt>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	1ae4      	subs	r4, r4, r3
 8000b42:	887a      	ldrh	r2, [r7, #2]
 8000b44:	89fb      	ldrh	r3, [r7, #14]
 8000b46:	4619      	mov	r1, r3
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f000 f839 	bl	8000bc0 <_ZN8Feedback9I_controlEtt>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	4423      	add	r3, r4
 8000b52:	4a05      	ldr	r2, [pc, #20]	; (8000b68 <_ZN8Feedback11PID_controlEt+0x9c>)
 8000b54:	6013      	str	r3, [r2, #0]
	}



	return this -> PID_pwm;
 8000b56:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <_ZN8Feedback11PID_controlEt+0x9c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3714      	adds	r7, #20
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd90      	pop	{r4, r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200001c8 	.word	0x200001c8
 8000b68:	20000090 	.word	0x20000090
 8000b6c:	20000098 	.word	0x20000098

08000b70 <_ZN8Feedback9P_controlEtt>:



int Feedback::P_control(uint16_t target_speed, uint16_t current_speed )
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	460b      	mov	r3, r1
 8000b7a:	807b      	strh	r3, [r7, #2]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	803b      	strh	r3, [r7, #0]

	int speed_diff = target_speed - current_speed;
 8000b80:	887a      	ldrh	r2, [r7, #2]
 8000b82:	883b      	ldrh	r3, [r7, #0]
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	60fb      	str	r3, [r7, #12]

	int add_pwm = speed_diff * Kp;
 8000b88:	68f8      	ldr	r0, [r7, #12]
 8000b8a:	f7ff fc6f 	bl	800046c <__aeabi_i2d>
 8000b8e:	a30a      	add	r3, pc, #40	; (adr r3, 8000bb8 <_ZN8Feedback9P_controlEtt+0x48>)
 8000b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b94:	f7ff fdfe 	bl	8000794 <__aeabi_ddiv>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	460b      	mov	r3, r1
 8000b9c:	4610      	mov	r0, r2
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	f7ff fee0 	bl	8000964 <__aeabi_d2iz>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	60bb      	str	r3, [r7, #8]

	return add_pwm;
 8000ba8:	68bb      	ldr	r3, [r7, #8]

}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	f3af 8000 	nop.w
 8000bb8:	40b78034 	.word	0x40b78034
 8000bbc:	403b3a82 	.word	0x403b3a82

08000bc0 <_ZN8Feedback9I_controlEtt>:

int Feedback::I_control(uint16_t target_speed, uint16_t current_speed)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	460b      	mov	r3, r1
 8000bca:	807b      	strh	r3, [r7, #2]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	803b      	strh	r3, [r7, #0]


	this -> integral_diff += ( target_speed - current_speed );
 8000bd0:	887a      	ldrh	r2, [r7, #2]
 8000bd2:	883b      	ldrh	r3, [r7, #0]
 8000bd4:	1ad2      	subs	r2, r2, r3
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <_ZN8Feedback9I_controlEtt+0x58>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4413      	add	r3, r2
 8000bdc:	4a0e      	ldr	r2, [pc, #56]	; (8000c18 <_ZN8Feedback9I_controlEtt+0x58>)
 8000bde:	6013      	str	r3, [r2, #0]

	return this -> integral_diff / Ki;
 8000be0:	4b0d      	ldr	r3, [pc, #52]	; (8000c18 <_ZN8Feedback9I_controlEtt+0x58>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fc41 	bl	800046c <__aeabi_i2d>
 8000bea:	a309      	add	r3, pc, #36	; (adr r3, 8000c10 <_ZN8Feedback9I_controlEtt+0x50>)
 8000bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf0:	f7ff fdd0 	bl	8000794 <__aeabi_ddiv>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	f7ff feb2 	bl	8000964 <__aeabi_d2iz>
 8000c00:	4603      	mov	r3, r0

}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	f3af 8000 	nop.w
 8000c10:	f7ca8000 	.word	0xf7ca8000
 8000c14:	42eaeae9 	.word	0x42eaeae9
 8000c18:	2000008c 	.word	0x2000008c
 8000c1c:	00000000 	.word	0x00000000

08000c20 <_ZN8Feedback9D_controlEt>:



int Feedback::D_control(uint16_t current_speed)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	807b      	strh	r3, [r7, #2]

	static uint16_t old_speed = current_speed;
 8000c2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <_ZN8Feedback9D_controlEt+0x88>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	f3bf 8f5b 	dmb	ish
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	bf0c      	ite	eq
 8000c3e:	2301      	moveq	r3, #1
 8000c40:	2300      	movne	r3, #0
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d010      	beq.n	8000c6a <_ZN8Feedback9D_controlEt+0x4a>
 8000c48:	4817      	ldr	r0, [pc, #92]	; (8000ca8 <_ZN8Feedback9D_controlEt+0x88>)
 8000c4a:	f004 ffb9 	bl	8005bc0 <__cxa_guard_acquire>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	bf14      	ite	ne
 8000c54:	2301      	movne	r3, #1
 8000c56:	2300      	moveq	r3, #0
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d005      	beq.n	8000c6a <_ZN8Feedback9D_controlEt+0x4a>
 8000c5e:	4a13      	ldr	r2, [pc, #76]	; (8000cac <_ZN8Feedback9D_controlEt+0x8c>)
 8000c60:	887b      	ldrh	r3, [r7, #2]
 8000c62:	8013      	strh	r3, [r2, #0]
 8000c64:	4810      	ldr	r0, [pc, #64]	; (8000ca8 <_ZN8Feedback9D_controlEt+0x88>)
 8000c66:	f004 ffb7 	bl	8005bd8 <__cxa_guard_release>
	int diff = current_speed - old_speed;
 8000c6a:	887b      	ldrh	r3, [r7, #2]
 8000c6c:	4a0f      	ldr	r2, [pc, #60]	; (8000cac <_ZN8Feedback9D_controlEt+0x8c>)
 8000c6e:	8812      	ldrh	r2, [r2, #0]
 8000c70:	1a9b      	subs	r3, r3, r2
 8000c72:	60fb      	str	r3, [r7, #12]

	old_speed = current_speed;
 8000c74:	4a0d      	ldr	r2, [pc, #52]	; (8000cac <_ZN8Feedback9D_controlEt+0x8c>)
 8000c76:	887b      	ldrh	r3, [r7, #2]
 8000c78:	8013      	strh	r3, [r2, #0]

	return diff * Kd;
 8000c7a:	68f8      	ldr	r0, [r7, #12]
 8000c7c:	f7ff fbf6 	bl	800046c <__aeabi_i2d>
 8000c80:	a307      	add	r3, pc, #28	; (adr r3, 8000ca0 <_ZN8Feedback9D_controlEt+0x80>)
 8000c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c86:	f7ff fd85 	bl	8000794 <__aeabi_ddiv>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	4610      	mov	r0, r2
 8000c90:	4619      	mov	r1, r3
 8000c92:	f7ff fe67 	bl	8000964 <__aeabi_d2iz>
 8000c96:	4603      	mov	r3, r0
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	d70a3d70 	.word	0xd70a3d70
 8000ca4:	406d98a3 	.word	0x406d98a3
 8000ca8:	200000a0 	.word	0x200000a0
 8000cac:	2000009c 	.word	0x2000009c

08000cb0 <_ZN8Feedback15get_current_pwmEv>:

	return;
}

int Feedback::get_current_pwm()
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	return this -> current_pwm;
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <_ZN8Feedback15get_current_pwmEv+0x18>)
 8000cba:	681b      	ldr	r3, [r3, #0]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	20000094 	.word	0x20000094

08000ccc <_ZN8Function10outputPWM0Eh>:
#include "main.h"
#include "Function.hpp"
#include "PWM.hpp"

void Function::outputPWM0(uint8_t pwm)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	; 0x28
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	70fb      	strb	r3, [r7, #3]
	static uint8_t old_pwm = 0;

	if( old_pwm != pwm )
 8000cd8:	4b1b      	ldr	r3, [pc, #108]	; (8000d48 <_ZN8Function10outputPWM0Eh+0x7c>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	78fa      	ldrb	r2, [r7, #3]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d02a      	beq.n	8000d38 <_ZN8Function10outputPWM0Eh+0x6c>
	{

		TIM_OC_InitTypeDef sConfigOC;
		sConfigOC.Pulse = (uint32_t)((8)*pwm);
 8000ce2:	78fb      	ldrb	r3, [r7, #3]
 8000ce4:	00db      	lsls	r3, r3, #3
 8000ce6:	613b      	str	r3, [r7, #16]

		if( sConfigOC.Pulse >= 799 )
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	f240 321e 	movw	r2, #798	; 0x31e
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d902      	bls.n	8000cf8 <_ZN8Function10outputPWM0Eh+0x2c>
		{
			sConfigOC.Pulse = 799;
 8000cf2:	f240 331f 	movw	r3, #799	; 0x31f
 8000cf6:	613b      	str	r3, [r7, #16]
		}

		if ( sConfigOC.Pulse <= 0 )
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d101      	bne.n	8000d02 <_ZN8Function10outputPWM0Eh+0x36>
		{
			sConfigOC.Pulse = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
		}



		sConfigOC.OCMode = TIM_OCMODE_ASSYMETRIC_PWM1;
 8000d02:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <_ZN8Function10outputPWM0Eh+0x80>)
 8000d04:	60fb      	str	r3, [r7, #12]
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
		sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61bb      	str	r3, [r7, #24]
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
		sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d12:	2300      	movs	r3, #0
 8000d14:	623b      	str	r3, [r7, #32]
		sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d16:	2300      	movs	r3, #0
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24

		HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 8000d1a:	f107 030c 	add.w	r3, r7, #12
 8000d1e:	2204      	movs	r2, #4
 8000d20:	4619      	mov	r1, r3
 8000d22:	480b      	ldr	r0, [pc, #44]	; (8000d50 <_ZN8Function10outputPWM0Eh+0x84>)
 8000d24:	f003 f9e8 	bl	80040f8 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000d28:	2104      	movs	r1, #4
 8000d2a:	4809      	ldr	r0, [pc, #36]	; (8000d50 <_ZN8Function10outputPWM0Eh+0x84>)
 8000d2c:	f002 ffd8 	bl	8003ce0 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 8000d30:	2104      	movs	r1, #4
 8000d32:	4807      	ldr	r0, [pc, #28]	; (8000d50 <_ZN8Function10outputPWM0Eh+0x84>)
 8000d34:	f003 fe66 	bl	8004a04 <HAL_TIMEx_PWMN_Start>

	}

	old_pwm = pwm;
 8000d38:	4a03      	ldr	r2, [pc, #12]	; (8000d48 <_ZN8Function10outputPWM0Eh+0x7c>)
 8000d3a:	78fb      	ldrb	r3, [r7, #3]
 8000d3c:	7013      	strb	r3, [r2, #0]




}
 8000d3e:	bf00      	nop
 8000d40:	3728      	adds	r7, #40	; 0x28
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	200000a4 	.word	0x200000a4
 8000d4c:	00010060 	.word	0x00010060
 8000d50:	200000ac 	.word	0x200000ac

08000d54 <_ZN8Function10outputPWM1Eh>:



void Function::outputPWM1(uint8_t pwm)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	70fb      	strb	r3, [r7, #3]

	static uint8_t old_pwm = 0;

	if( old_pwm != pwm )
 8000d60:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <_ZN8Function10outputPWM1Eh+0x7c>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	78fa      	ldrb	r2, [r7, #3]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d02a      	beq.n	8000dc0 <_ZN8Function10outputPWM1Eh+0x6c>
	{
		TIM_OC_InitTypeDef sConfigOC;

		sConfigOC.Pulse = (uint32_t)((8)*pwm);
 8000d6a:	78fb      	ldrb	r3, [r7, #3]
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	613b      	str	r3, [r7, #16]

		if( sConfigOC.Pulse >= 799 )
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	f240 321e 	movw	r2, #798	; 0x31e
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d902      	bls.n	8000d80 <_ZN8Function10outputPWM1Eh+0x2c>
		{
			sConfigOC.Pulse = 799;
 8000d7a:	f240 331f 	movw	r3, #799	; 0x31f
 8000d7e:	613b      	str	r3, [r7, #16]
		}

		if ( sConfigOC.Pulse <= 0 )
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d101      	bne.n	8000d8a <_ZN8Function10outputPWM1Eh+0x36>
		{
			sConfigOC.Pulse = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
		}



		sConfigOC.OCMode = TIM_OCMODE_ASSYMETRIC_PWM2;
 8000d8a:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <_ZN8Function10outputPWM1Eh+0x80>)
 8000d8c:	60fb      	str	r3, [r7, #12]
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
		sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61bb      	str	r3, [r7, #24]
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
		sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	623b      	str	r3, [r7, #32]
		sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24

		HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	2208      	movs	r2, #8
 8000da8:	4619      	mov	r1, r3
 8000daa:	480b      	ldr	r0, [pc, #44]	; (8000dd8 <_ZN8Function10outputPWM1Eh+0x84>)
 8000dac:	f003 f9a4 	bl	80040f8 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000db0:	2108      	movs	r1, #8
 8000db2:	4809      	ldr	r0, [pc, #36]	; (8000dd8 <_ZN8Function10outputPWM1Eh+0x84>)
 8000db4:	f002 ff94 	bl	8003ce0 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3);
 8000db8:	2108      	movs	r1, #8
 8000dba:	4807      	ldr	r0, [pc, #28]	; (8000dd8 <_ZN8Function10outputPWM1Eh+0x84>)
 8000dbc:	f003 fe22 	bl	8004a04 <HAL_TIMEx_PWMN_Start>

	}


	old_pwm = pwm;
 8000dc0:	4a03      	ldr	r2, [pc, #12]	; (8000dd0 <_ZN8Function10outputPWM1Eh+0x7c>)
 8000dc2:	78fb      	ldrb	r3, [r7, #3]
 8000dc4:	7013      	strb	r3, [r2, #0]
}
 8000dc6:	bf00      	nop
 8000dc8:	3728      	adds	r7, #40	; 0x28
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200000a5 	.word	0x200000a5
 8000dd4:	00010070 	.word	0x00010070
 8000dd8:	200000ac 	.word	0x200000ac

08000ddc <_ZN3PWM16set_motor_numberEv>:
#include "Feedback.hpp"
#include "Function.hpp"


uint8_t PWM::set_motor_number()
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	uint8_t motor_number = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	73fb      	strb	r3, [r7, #15]

	if (HAL_GPIO_ReadPin(MN_0_GPIO_Port, MN_0_Pin) == 0) motor_number = motor_number|0b1;
 8000de8:	2110      	movs	r1, #16
 8000dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dee:	f001 fbb3 	bl	8002558 <HAL_GPIO_ReadPin>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	bf0c      	ite	eq
 8000df8:	2301      	moveq	r3, #1
 8000dfa:	2300      	movne	r3, #0
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d003      	beq.n	8000e0a <_ZN3PWM16set_motor_numberEv+0x2e>
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	73fb      	strb	r3, [r7, #15]
	if (HAL_GPIO_ReadPin(MN_1_GPIO_Port, MN_1_Pin) == 0) motor_number = motor_number|(0b1<<1);
 8000e0a:	2120      	movs	r1, #32
 8000e0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e10:	f001 fba2 	bl	8002558 <HAL_GPIO_ReadPin>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	bf0c      	ite	eq
 8000e1a:	2301      	moveq	r3, #1
 8000e1c:	2300      	movne	r3, #0
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d003      	beq.n	8000e2c <_ZN3PWM16set_motor_numberEv+0x50>
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	f043 0302 	orr.w	r3, r3, #2
 8000e2a:	73fb      	strb	r3, [r7, #15]
	if (HAL_GPIO_ReadPin(MN_2_GPIO_Port, MN_2_Pin) == 0) motor_number = motor_number|(0b1<<2);
 8000e2c:	2140      	movs	r1, #64	; 0x40
 8000e2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e32:	f001 fb91 	bl	8002558 <HAL_GPIO_ReadPin>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	bf0c      	ite	eq
 8000e3c:	2301      	moveq	r3, #1
 8000e3e:	2300      	movne	r3, #0
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d003      	beq.n	8000e4e <_ZN3PWM16set_motor_numberEv+0x72>
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	f043 0304 	orr.w	r3, r3, #4
 8000e4c:	73fb      	strb	r3, [r7, #15]
	if (HAL_GPIO_ReadPin(MN_3_GPIO_Port, MN_3_Pin) == 0) motor_number = motor_number|(0b1<<3);
 8000e4e:	2180      	movs	r1, #128	; 0x80
 8000e50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e54:	f001 fb80 	bl	8002558 <HAL_GPIO_ReadPin>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	bf0c      	ite	eq
 8000e5e:	2301      	moveq	r3, #1
 8000e60:	2300      	movne	r3, #0
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d003      	beq.n	8000e70 <_ZN3PWM16set_motor_numberEv+0x94>
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	f043 0308 	orr.w	r3, r3, #8
 8000e6e:	73fb      	strb	r3, [r7, #15]

	return motor_number;
 8000e70:	7bfb      	ldrb	r3, [r7, #15]


}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <_ZN3PWM11control_PWMEv>:

void PWM::control_PWM(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]


	this -> direction = 0b00000011&Rxdata[0];
 8000e84:	4b38      	ldr	r3, [pc, #224]	; (8000f68 <_ZN3PWM11control_PWMEv+0xec>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	f003 0303 	and.w	r3, r3, #3
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	721a      	strb	r2, [r3, #8]
	this -> PID_Enabled = Rxdata[0]>>6;
 8000e92:	4b35      	ldr	r3, [pc, #212]	; (8000f68 <_ZN3PWM11control_PWMEv+0xec>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	119b      	asrs	r3, r3, #6
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	bf14      	ite	ne
 8000e9c:	2301      	movne	r3, #1
 8000e9e:	2300      	moveq	r3, #0
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	725a      	strb	r2, [r3, #9]

	switch(this -> direction)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	7a1b      	ldrb	r3, [r3, #8]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d002      	beq.n	8000eb4 <_ZN3PWM11control_PWMEv+0x38>
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d006      	beq.n	8000ec0 <_ZN3PWM11control_PWMEv+0x44>
		break;
	case CCW:
		this -> target = (-1) * (int)Rxdata[1];
		break;
	default:
		break;
 8000eb2:	e00b      	b.n	8000ecc <_ZN3PWM11control_PWMEv+0x50>
		this -> target = (int)Rxdata[1];
 8000eb4:	4b2c      	ldr	r3, [pc, #176]	; (8000f68 <_ZN3PWM11control_PWMEv+0xec>)
 8000eb6:	785b      	ldrb	r3, [r3, #1]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	605a      	str	r2, [r3, #4]
		break;
 8000ebe:	e005      	b.n	8000ecc <_ZN3PWM11control_PWMEv+0x50>
		this -> target = (-1) * (int)Rxdata[1];
 8000ec0:	4b29      	ldr	r3, [pc, #164]	; (8000f68 <_ZN3PWM11control_PWMEv+0xec>)
 8000ec2:	785b      	ldrb	r3, [r3, #1]
 8000ec4:	425a      	negs	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	605a      	str	r2, [r3, #4]
		break;
 8000eca:	bf00      	nop
	}


    uint8_t pwm = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	73fb      	strb	r3, [r7, #15]

	pwm = this -> trapezoid_control(PERIOD, this -> target);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	2132      	movs	r1, #50	; 0x32
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f000 f846 	bl	8000f6c <_ZN3PWM17trapezoid_controlEhh>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	73fb      	strb	r3, [r7, #15]

	if (this -> direction == CW)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	7a1b      	ldrb	r3, [r3, #8]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d108      	bne.n	8000efe <_ZN3PWM11control_PWMEv+0x82>
	{
		this -> cw(pwm);
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
 8000eee:	4619      	mov	r1, r3
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f000 f8a5 	bl	8001040 <_ZN3PWM2cwEh>
		this -> old_pwm = pwm;
 8000ef6:	7bfa      	ldrb	r2, [r7, #15]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	601a      	str	r2, [r3, #0]
		Feedback* feedback = new Feedback();
		this -> old_pwm = feedback -> get_current_pwm();
		delete feedback;
	}

}
 8000efc:	e030      	b.n	8000f60 <_ZN3PWM11control_PWMEv+0xe4>
	else if (this -> direction == CCW)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	7a1b      	ldrb	r3, [r3, #8]
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d108      	bne.n	8000f18 <_ZN3PWM11control_PWMEv+0x9c>
		this -> ccw(pwm);
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	4619      	mov	r1, r3
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f000 f8ee 	bl	80010ec <_ZN3PWM3ccwEh>
		this -> old_pwm = pwm;
 8000f10:	7bfa      	ldrb	r2, [r7, #15]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	601a      	str	r2, [r3, #0]
}
 8000f16:	e023      	b.n	8000f60 <_ZN3PWM11control_PWMEv+0xe4>
	else if (this -> direction == BRAKE)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	7a1b      	ldrb	r3, [r3, #8]
 8000f1c:	2b03      	cmp	r3, #3
 8000f1e:	d106      	bne.n	8000f2e <_ZN3PWM11control_PWMEv+0xb2>
		this -> brake();
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f000 f93b 	bl	800119c <_ZN3PWM5brakeEv>
		this -> old_pwm = 0;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
}
 8000f2c:	e018      	b.n	8000f60 <_ZN3PWM11control_PWMEv+0xe4>
	else if (this -> direction == FREE)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	7a1b      	ldrb	r3, [r3, #8]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d114      	bne.n	8000f60 <_ZN3PWM11control_PWMEv+0xe4>
		this -> free();
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f000 f968 	bl	800120c <_ZN3PWM4freeEv>
		Feedback* feedback = new Feedback();
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	f004 fe4e 	bl	8005bde <_Znwj>
 8000f42:	4603      	mov	r3, r0
 8000f44:	60bb      	str	r3, [r7, #8]
		this -> old_pwm = feedback -> get_current_pwm();
 8000f46:	68b8      	ldr	r0, [r7, #8]
 8000f48:	f7ff feb2 	bl	8000cb0 <_ZN8Feedback15get_current_pwmEv>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	601a      	str	r2, [r3, #0]
		delete feedback;
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d003      	beq.n	8000f60 <_ZN3PWM11control_PWMEv+0xe4>
 8000f58:	2101      	movs	r1, #1
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f004 fe2e 	bl	8005bbc <_ZdlPvj>
}
 8000f60:	bf00      	nop
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	200001c8 	.word	0x200001c8

08000f6c <_ZN3PWM17trapezoid_controlEhh>:

uint8_t PWM::trapezoid_control(uint8_t period, uint8_t target)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	460b      	mov	r3, r1
 8000f76:	70fb      	strb	r3, [r7, #3]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	70bb      	strb	r3, [r7, #2]
	switch(this -> direction)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	7a1b      	ldrb	r3, [r3, #8]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d002      	beq.n	8000f8a <_ZN3PWM17trapezoid_controlEhh+0x1e>
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d027      	beq.n	8000fd8 <_ZN3PWM17trapezoid_controlEhh+0x6c>
 8000f88:	e053      	b.n	8001032 <_ZN3PWM17trapezoid_controlEhh+0xc6>
	{
	case CW:

		if(this -> old_pwm < 0)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	da05      	bge.n	8000f9e <_ZN3PWM17trapezoid_controlEhh+0x32>
		{
			this -> free();
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f000 f93a 	bl	800120c <_ZN3PWM4freeEv>
			this -> old_pwm = 0;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
		}

		if(this -> old_pwm >= this -> target)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	db06      	blt.n	8000fb8 <_ZN3PWM17trapezoid_controlEhh+0x4c>
		{

			this -> Is_reached = true;
 8000faa:	4b24      	ldr	r3, [pc, #144]	; (800103c <_ZN3PWM17trapezoid_controlEhh+0xd0>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	701a      	strb	r2, [r3, #0]
			return this -> target;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	e03d      	b.n	8001034 <_ZN3PWM17trapezoid_controlEhh+0xc8>

		}
		else
		{

			this -> Is_reached = false;
 8000fb8:	4b20      	ldr	r3, [pc, #128]	; (800103c <_ZN3PWM17trapezoid_controlEhh+0xd0>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]

		}
		this -> old_pwm++;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	1c5a      	adds	r2, r3, #1
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	601a      	str	r2, [r3, #0]
		HAL_Delay(period);
 8000fc8:	78fb      	ldrb	r3, [r7, #3]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 ffa6 	bl	8001f1c <HAL_Delay>

		return (uint8_t)this -> old_pwm;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	e02d      	b.n	8001034 <_ZN3PWM17trapezoid_controlEhh+0xc8>


		break;
	case CCW:

		if(this -> old_pwm > 0)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	dd05      	ble.n	8000fec <_ZN3PWM17trapezoid_controlEhh+0x80>
		{
			this -> free();
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f000 f913 	bl	800120c <_ZN3PWM4freeEv>
			this -> old_pwm = 0;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
		}

		if(this -> old_pwm <= this -> target)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	dc09      	bgt.n	800100c <_ZN3PWM17trapezoid_controlEhh+0xa0>
		{

			this -> Is_reached = true;
 8000ff8:	4b10      	ldr	r3, [pc, #64]	; (800103c <_ZN3PWM17trapezoid_controlEhh+0xd0>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	701a      	strb	r2, [r3, #0]
			return (uint8_t)abs( this -> target );
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	bfb8      	it	lt
 8001006:	425b      	neglt	r3, r3
 8001008:	b2db      	uxtb	r3, r3
 800100a:	e013      	b.n	8001034 <_ZN3PWM17trapezoid_controlEhh+0xc8>

		}
		else
		{

			this -> Is_reached = false;
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <_ZN3PWM17trapezoid_controlEhh+0xd0>)
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]

		}
		this -> old_pwm--;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	1e5a      	subs	r2, r3, #1
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	601a      	str	r2, [r3, #0]
		HAL_Delay(period);
 800101c:	78fb      	ldrb	r3, [r7, #3]
 800101e:	4618      	mov	r0, r3
 8001020:	f000 ff7c 	bl	8001f1c <HAL_Delay>

		return (uint8_t)abs(this -> old_pwm);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	bfb8      	it	lt
 800102c:	425b      	neglt	r3, r3
 800102e:	b2db      	uxtb	r3, r3
 8001030:	e000      	b.n	8001034 <_ZN3PWM17trapezoid_controlEhh+0xc8>


		break;
	default:

		return 0;
 8001032:	2300      	movs	r3, #0

		break;

	}
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	200000a6 	.word	0x200000a6

08001040 <_ZN3PWM2cwEh>:


void PWM::cw(uint8_t pwm)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	70fb      	strb	r3, [r7, #3]

	Function* function = new Function();
 800104c:	2001      	movs	r0, #1
 800104e:	f004 fdc6 	bl	8005bde <_Znwj>
 8001052:	4603      	mov	r3, r0
 8001054:	60fb      	str	r3, [r7, #12]
	Feedback* feedback = new Feedback();
 8001056:	2001      	movs	r0, #1
 8001058:	f004 fdc1 	bl	8005bde <_Znwj>
 800105c:	4603      	mov	r3, r0
 800105e:	60bb      	str	r3, [r7, #8]

    if( this -> get_Is_reached() == true && this -> PID_Enabled == true )
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 f90b 	bl	800127c <_ZN3PWM14get_Is_reachedEv>
 8001066:	4603      	mov	r3, r0
 8001068:	2b01      	cmp	r3, #1
 800106a:	d105      	bne.n	8001078 <_ZN3PWM2cwEh+0x38>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	7a5b      	ldrb	r3, [r3, #9]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d101      	bne.n	8001078 <_ZN3PWM2cwEh+0x38>
 8001074:	2301      	movs	r3, #1
 8001076:	e000      	b.n	800107a <_ZN3PWM2cwEh+0x3a>
 8001078:	2300      	movs	r3, #0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d005      	beq.n	800108a <_ZN3PWM2cwEh+0x4a>
    {
    	pwm += Feedback::PID_pwm;
 800107e:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <_ZN3PWM2cwEh+0xa4>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	b2da      	uxtb	r2, r3
 8001084:	78fb      	ldrb	r3, [r7, #3]
 8001086:	4413      	add	r3, r2
 8001088:	70fb      	strb	r3, [r7, #3]
    }


	function -> outputPWM0(pwm);
 800108a:	78fb      	ldrb	r3, [r7, #3]
 800108c:	4619      	mov	r1, r3
 800108e:	68f8      	ldr	r0, [r7, #12]
 8001090:	f7ff fe1c 	bl	8000ccc <_ZN8Function10outputPWM0Eh>
	function -> outputPWM1(99);
 8001094:	2163      	movs	r1, #99	; 0x63
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	f7ff fe5c 	bl	8000d54 <_ZN8Function10outputPWM1Eh>

	HAL_TIM_PWM_Init(&htim1);
 800109c:	4812      	ldr	r0, [pc, #72]	; (80010e8 <_ZN3PWM2cwEh+0xa8>)
 800109e:	f002 fdc7 	bl	8003c30 <HAL_TIM_PWM_Init>


	HAL_GPIO_WritePin(LD_0_GPIO_Port, LD_0_Pin, GPIO_PIN_SET);
 80010a2:	2201      	movs	r2, #1
 80010a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ac:	f001 fa6c 	bl	8002588 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD_1_GPIO_Port, LD_1_Pin, GPIO_PIN_RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ba:	f001 fa65 	bl	8002588 <HAL_GPIO_WritePin>

	delete function;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <_ZN3PWM2cwEh+0x8c>
 80010c4:	2101      	movs	r1, #1
 80010c6:	4618      	mov	r0, r3
 80010c8:	f004 fd78 	bl	8005bbc <_ZdlPvj>
	delete feedback;
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <_ZN3PWM2cwEh+0x9a>
 80010d2:	2101      	movs	r1, #1
 80010d4:	4618      	mov	r0, r3
 80010d6:	f004 fd71 	bl	8005bbc <_ZdlPvj>

}
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000090 	.word	0x20000090
 80010e8:	200000ac 	.word	0x200000ac

080010ec <_ZN3PWM3ccwEh>:
void PWM::ccw(uint8_t pwm)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	70fb      	strb	r3, [r7, #3]

	Function* function = new Function();
 80010f8:	2001      	movs	r0, #1
 80010fa:	f004 fd70 	bl	8005bde <_Znwj>
 80010fe:	4603      	mov	r3, r0
 8001100:	60fb      	str	r3, [r7, #12]
	Feedback* feedback = new Feedback();
 8001102:	2001      	movs	r0, #1
 8001104:	f004 fd6b 	bl	8005bde <_Znwj>
 8001108:	4603      	mov	r3, r0
 800110a:	60bb      	str	r3, [r7, #8]

    if( this -> get_Is_reached() == true && this -> PID_Enabled == true )
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f000 f8b5 	bl	800127c <_ZN3PWM14get_Is_reachedEv>
 8001112:	4603      	mov	r3, r0
 8001114:	2b01      	cmp	r3, #1
 8001116:	d105      	bne.n	8001124 <_ZN3PWM3ccwEh+0x38>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	7a5b      	ldrb	r3, [r3, #9]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d101      	bne.n	8001124 <_ZN3PWM3ccwEh+0x38>
 8001120:	2301      	movs	r3, #1
 8001122:	e000      	b.n	8001126 <_ZN3PWM3ccwEh+0x3a>
 8001124:	2300      	movs	r3, #0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d005      	beq.n	8001136 <_ZN3PWM3ccwEh+0x4a>
    {
    	pwm += Feedback::PID_pwm;
 800112a:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <_ZN3PWM3ccwEh+0xa8>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	b2da      	uxtb	r2, r3
 8001130:	78fb      	ldrb	r3, [r7, #3]
 8001132:	4413      	add	r3, r2
 8001134:	70fb      	strb	r3, [r7, #3]
    }


	function -> outputPWM0(1);
 8001136:	2101      	movs	r1, #1
 8001138:	68f8      	ldr	r0, [r7, #12]
 800113a:	f7ff fdc7 	bl	8000ccc <_ZN8Function10outputPWM0Eh>
	function -> outputPWM1(100-pwm);
 800113e:	78fb      	ldrb	r3, [r7, #3]
 8001140:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8001144:	b2db      	uxtb	r3, r3
 8001146:	4619      	mov	r1, r3
 8001148:	68f8      	ldr	r0, [r7, #12]
 800114a:	f7ff fe03 	bl	8000d54 <_ZN8Function10outputPWM1Eh>

	HAL_TIM_PWM_Init(&htim1);
 800114e:	4812      	ldr	r0, [pc, #72]	; (8001198 <_ZN3PWM3ccwEh+0xac>)
 8001150:	f002 fd6e 	bl	8003c30 <HAL_TIM_PWM_Init>

	HAL_GPIO_WritePin(LD_0_GPIO_Port, LD_0_Pin, GPIO_PIN_RESET);
 8001154:	2200      	movs	r2, #0
 8001156:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800115a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115e:	f001 fa13 	bl	8002588 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD_1_GPIO_Port, LD_1_Pin, GPIO_PIN_SET);
 8001162:	2201      	movs	r2, #1
 8001164:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116c:	f001 fa0c 	bl	8002588 <HAL_GPIO_WritePin>

	delete function;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <_ZN3PWM3ccwEh+0x92>
 8001176:	2101      	movs	r1, #1
 8001178:	4618      	mov	r0, r3
 800117a:	f004 fd1f 	bl	8005bbc <_ZdlPvj>
	delete feedback;
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <_ZN3PWM3ccwEh+0xa0>
 8001184:	2101      	movs	r1, #1
 8001186:	4618      	mov	r0, r3
 8001188:	f004 fd18 	bl	8005bbc <_ZdlPvj>

}
 800118c:	bf00      	nop
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000090 	.word	0x20000090
 8001198:	200000ac 	.word	0x200000ac

0800119c <_ZN3PWM5brakeEv>:
void PWM::brake(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]

	Function* function = new Function();
 80011a4:	2001      	movs	r0, #1
 80011a6:	f004 fd1a 	bl	8005bde <_Znwj>
 80011aa:	4603      	mov	r3, r0
 80011ac:	60fb      	str	r3, [r7, #12]

	this -> free();
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f000 f82c 	bl	800120c <_ZN3PWM4freeEv>

	function -> outputPWM0(0);
 80011b4:	2100      	movs	r1, #0
 80011b6:	68f8      	ldr	r0, [r7, #12]
 80011b8:	f7ff fd88 	bl	8000ccc <_ZN8Function10outputPWM0Eh>
	function -> outputPWM1(100);
 80011bc:	2164      	movs	r1, #100	; 0x64
 80011be:	68f8      	ldr	r0, [r7, #12]
 80011c0:	f7ff fdc8 	bl	8000d54 <_ZN8Function10outputPWM1Eh>

	HAL_TIM_PWM_Init(&htim1);
 80011c4:	480f      	ldr	r0, [pc, #60]	; (8001204 <_ZN3PWM5brakeEv+0x68>)
 80011c6:	f002 fd33 	bl	8003c30 <HAL_TIM_PWM_Init>

	HAL_GPIO_WritePin(LD_0_GPIO_Port, LD_0_Pin, GPIO_PIN_SET);
 80011ca:	2201      	movs	r2, #1
 80011cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d4:	f001 f9d8 	bl	8002588 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD_1_GPIO_Port, LD_1_Pin, GPIO_PIN_SET);
 80011d8:	2201      	movs	r2, #1
 80011da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e2:	f001 f9d1 	bl	8002588 <HAL_GPIO_WritePin>

	this -> Is_reached = false;
 80011e6:	4b08      	ldr	r3, [pc, #32]	; (8001208 <_ZN3PWM5brakeEv+0x6c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]

	delete function;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <_ZN3PWM5brakeEv+0x5e>
 80011f2:	2101      	movs	r1, #1
 80011f4:	4618      	mov	r0, r3
 80011f6:	f004 fce1 	bl	8005bbc <_ZdlPvj>

}
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200000ac 	.word	0x200000ac
 8001208:	200000a6 	.word	0x200000a6

0800120c <_ZN3PWM4freeEv>:

void PWM::free(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

	Function* function = new Function();
 8001214:	2001      	movs	r0, #1
 8001216:	f004 fce2 	bl	8005bde <_Znwj>
 800121a:	4603      	mov	r3, r0
 800121c:	60fb      	str	r3, [r7, #12]

	function -> outputPWM0(0);
 800121e:	2100      	movs	r1, #0
 8001220:	68f8      	ldr	r0, [r7, #12]
 8001222:	f7ff fd53 	bl	8000ccc <_ZN8Function10outputPWM0Eh>
	function -> outputPWM1(0);
 8001226:	2100      	movs	r1, #0
 8001228:	68f8      	ldr	r0, [r7, #12]
 800122a:	f7ff fd93 	bl	8000d54 <_ZN8Function10outputPWM1Eh>

	HAL_TIM_PWM_Init(&htim1);
 800122e:	4811      	ldr	r0, [pc, #68]	; (8001274 <_ZN3PWM4freeEv+0x68>)
 8001230:	f002 fcfe 	bl	8003c30 <HAL_TIM_PWM_Init>

	HAL_GPIO_WritePin(LD_0_GPIO_Port, LD_0_Pin, GPIO_PIN_RESET);
 8001234:	2200      	movs	r2, #0
 8001236:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800123a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800123e:	f001 f9a3 	bl	8002588 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD_1_GPIO_Port, LD_1_Pin, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001248:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800124c:	f001 f99c 	bl	8002588 <HAL_GPIO_WritePin>

	this -> Is_reached = false;
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <_ZN3PWM4freeEv+0x6c>)
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]

	HAL_Delay(500);
 8001256:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800125a:	f000 fe5f 	bl	8001f1c <HAL_Delay>

	delete function;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d003      	beq.n	800126c <_ZN3PWM4freeEv+0x60>
 8001264:	2101      	movs	r1, #1
 8001266:	4618      	mov	r0, r3
 8001268:	f004 fca8 	bl	8005bbc <_ZdlPvj>
}
 800126c:	bf00      	nop
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	200000ac 	.word	0x200000ac
 8001278:	200000a6 	.word	0x200000a6

0800127c <_ZN3PWM14get_Is_reachedEv>:

bool PWM::get_Is_reached()
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	return this -> Is_reached;
 8001284:	4b03      	ldr	r3, [pc, #12]	; (8001294 <_ZN3PWM14get_Is_reachedEv+0x18>)
 8001286:	781b      	ldrb	r3, [r3, #0]
}
 8001288:	4618      	mov	r0, r3
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	200000a6 	.word	0x200000a6

08001298 <_ZN7Encoder4EN_3Ev>:

#include "main.h"
#include "Encoder.hpp"

void Encoder::EN_3(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]



	if(HAL_GPIO_ReadPin(EN_B_GPIO_Port,EN_B_Pin))
 80012a0:	2108      	movs	r1, #8
 80012a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a6:	f001 f957 	bl	8002558 <HAL_GPIO_ReadPin>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	bf14      	ite	ne
 80012b0:	2301      	movne	r3, #1
 80012b2:	2300      	moveq	r3, #0
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d018      	beq.n	80012ec <_ZN7Encoder4EN_3Ev+0x54>
	{
		  if(HAL_GPIO_ReadPin(EN_A_GPIO_Port,EN_A_Pin))
 80012ba:	2102      	movs	r1, #2
 80012bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c0:	f001 f94a 	bl	8002558 <HAL_GPIO_ReadPin>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	bf14      	ite	ne
 80012ca:	2301      	movne	r3, #1
 80012cc:	2300      	moveq	r3, #0
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d005      	beq.n	80012e0 <_ZN7Encoder4EN_3Ev+0x48>
		  {
			  this -> pulse_cnt++;
 80012d4:	4b13      	ldr	r3, [pc, #76]	; (8001324 <_ZN7Encoder4EN_3Ev+0x8c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	3301      	adds	r3, #1
 80012da:	4a12      	ldr	r2, [pc, #72]	; (8001324 <_ZN7Encoder4EN_3Ev+0x8c>)
 80012dc:	6013      	str	r3, [r2, #0]
			  this -> pulse_cnt++;
	  	  }
	  }


}
 80012de:	e01d      	b.n	800131c <_ZN7Encoder4EN_3Ev+0x84>
			  this -> pulse_cnt--;
 80012e0:	4b10      	ldr	r3, [pc, #64]	; (8001324 <_ZN7Encoder4EN_3Ev+0x8c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	3b01      	subs	r3, #1
 80012e6:	4a0f      	ldr	r2, [pc, #60]	; (8001324 <_ZN7Encoder4EN_3Ev+0x8c>)
 80012e8:	6013      	str	r3, [r2, #0]
}
 80012ea:	e017      	b.n	800131c <_ZN7Encoder4EN_3Ev+0x84>
		  if(HAL_GPIO_ReadPin(EN_A_GPIO_Port,EN_A_Pin))
 80012ec:	2102      	movs	r1, #2
 80012ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f2:	f001 f931 	bl	8002558 <HAL_GPIO_ReadPin>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	bf14      	ite	ne
 80012fc:	2301      	movne	r3, #1
 80012fe:	2300      	moveq	r3, #0
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d005      	beq.n	8001312 <_ZN7Encoder4EN_3Ev+0x7a>
			  this -> pulse_cnt--;
 8001306:	4b07      	ldr	r3, [pc, #28]	; (8001324 <_ZN7Encoder4EN_3Ev+0x8c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	3b01      	subs	r3, #1
 800130c:	4a05      	ldr	r2, [pc, #20]	; (8001324 <_ZN7Encoder4EN_3Ev+0x8c>)
 800130e:	6013      	str	r3, [r2, #0]
}
 8001310:	e004      	b.n	800131c <_ZN7Encoder4EN_3Ev+0x84>
			  this -> pulse_cnt++;
 8001312:	4b04      	ldr	r3, [pc, #16]	; (8001324 <_ZN7Encoder4EN_3Ev+0x8c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	3301      	adds	r3, #1
 8001318:	4a02      	ldr	r2, [pc, #8]	; (8001324 <_ZN7Encoder4EN_3Ev+0x8c>)
 800131a:	6013      	str	r3, [r2, #0]
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	200000a8 	.word	0x200000a8

08001328 <_ZN7Encoder4EN_1Ev>:


void Encoder::EN_1(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]



	if(HAL_GPIO_ReadPin(EN_A_GPIO_Port,EN_A_Pin))
 8001330:	2102      	movs	r1, #2
 8001332:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001336:	f001 f90f 	bl	8002558 <HAL_GPIO_ReadPin>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	bf14      	ite	ne
 8001340:	2301      	movne	r3, #1
 8001342:	2300      	moveq	r3, #0
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d018      	beq.n	800137c <_ZN7Encoder4EN_1Ev+0x54>
	{
		  if(HAL_GPIO_ReadPin(EN_B_GPIO_Port,EN_B_Pin))
 800134a:	2108      	movs	r1, #8
 800134c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001350:	f001 f902 	bl	8002558 <HAL_GPIO_ReadPin>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	bf14      	ite	ne
 800135a:	2301      	movne	r3, #1
 800135c:	2300      	moveq	r3, #0
 800135e:	b2db      	uxtb	r3, r3
 8001360:	2b00      	cmp	r3, #0
 8001362:	d005      	beq.n	8001370 <_ZN7Encoder4EN_1Ev+0x48>
		  {
			  this -> pulse_cnt--;
 8001364:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <_ZN7Encoder4EN_1Ev+0x8c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	3b01      	subs	r3, #1
 800136a:	4a12      	ldr	r2, [pc, #72]	; (80013b4 <_ZN7Encoder4EN_1Ev+0x8c>)
 800136c:	6013      	str	r3, [r2, #0]
			  this -> pulse_cnt--;
		  }
	  }


}
 800136e:	e01d      	b.n	80013ac <_ZN7Encoder4EN_1Ev+0x84>
			  this -> pulse_cnt++;
 8001370:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <_ZN7Encoder4EN_1Ev+0x8c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	3301      	adds	r3, #1
 8001376:	4a0f      	ldr	r2, [pc, #60]	; (80013b4 <_ZN7Encoder4EN_1Ev+0x8c>)
 8001378:	6013      	str	r3, [r2, #0]
}
 800137a:	e017      	b.n	80013ac <_ZN7Encoder4EN_1Ev+0x84>
		  if(HAL_GPIO_ReadPin(EN_B_GPIO_Port,EN_B_Pin))
 800137c:	2108      	movs	r1, #8
 800137e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001382:	f001 f8e9 	bl	8002558 <HAL_GPIO_ReadPin>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	bf14      	ite	ne
 800138c:	2301      	movne	r3, #1
 800138e:	2300      	moveq	r3, #0
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d005      	beq.n	80013a2 <_ZN7Encoder4EN_1Ev+0x7a>
			  this -> pulse_cnt++;
 8001396:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <_ZN7Encoder4EN_1Ev+0x8c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	3301      	adds	r3, #1
 800139c:	4a05      	ldr	r2, [pc, #20]	; (80013b4 <_ZN7Encoder4EN_1Ev+0x8c>)
 800139e:	6013      	str	r3, [r2, #0]
}
 80013a0:	e004      	b.n	80013ac <_ZN7Encoder4EN_1Ev+0x84>
			  this -> pulse_cnt--;
 80013a2:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <_ZN7Encoder4EN_1Ev+0x8c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	4a02      	ldr	r2, [pc, #8]	; (80013b4 <_ZN7Encoder4EN_1Ev+0x8c>)
 80013aa:	6013      	str	r3, [r2, #0]
}
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	200000a8 	.word	0x200000a8

080013b8 <_ZN3PWMC1Ev>:

    uint8_t set_motor_number();
    bool get_Is_reached(void);
    void control_PWM();

	PWM()
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
    {
		this -> old_pwm = 0;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
		this -> direction = FREE;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	721a      	strb	r2, [r3, #8]
		this -> target = 0;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	605a      	str	r2, [r3, #4]
		this -> PID_Enabled = false;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	725a      	strb	r2, [r3, #9]
	}
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4618      	mov	r0, r3
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
	...

080013e8 <HAL_UART_RxCpltCallback>:
static void MX_USART2_UART_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM6_Init(void);
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef*UartHandle)
{
 80013e8:	b590      	push	{r4, r7, lr}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, (uint8_t*)Rxdata_buff, sizeof(Rxdata_buff));
 80013f0:	2204      	movs	r2, #4
 80013f2:	491d      	ldr	r1, [pc, #116]	; (8001468 <HAL_UART_RxCpltCallback+0x80>)
 80013f4:	481d      	ldr	r0, [pc, #116]	; (800146c <HAL_UART_RxCpltCallback+0x84>)
 80013f6:	f003 fd22 	bl	8004e3e <HAL_UART_Receive_IT>

	PWM* pwm = new PWM();
 80013fa:	200c      	movs	r0, #12
 80013fc:	f004 fbef 	bl	8005bde <_Znwj>
 8001400:	4603      	mov	r3, r0
 8001402:	461c      	mov	r4, r3
 8001404:	4620      	mov	r0, r4
 8001406:	f7ff ffd7 	bl	80013b8 <_ZN3PWMC1Ev>
 800140a:	60bc      	str	r4, [r7, #8]
	if( pwm -> set_motor_number() == (0b00111100&Rxdata_buff[0])>>2 )
 800140c:	68b8      	ldr	r0, [r7, #8]
 800140e:	f7ff fce5 	bl	8000ddc <_ZN3PWM16set_motor_numberEv>
 8001412:	4603      	mov	r3, r0
 8001414:	461a      	mov	r2, r3
 8001416:	4b14      	ldr	r3, [pc, #80]	; (8001468 <HAL_UART_RxCpltCallback+0x80>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	109b      	asrs	r3, r3, #2
 800141c:	f003 030f 	and.w	r3, r3, #15
 8001420:	429a      	cmp	r2, r3
 8001422:	bf0c      	ite	eq
 8001424:	2301      	moveq	r3, #1
 8001426:	2300      	movne	r3, #0
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d011      	beq.n	8001452 <HAL_UART_RxCpltCallback+0x6a>
	{
		for(int i = 0; i<4; i++)
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2b03      	cmp	r3, #3
 8001436:	dc0c      	bgt.n	8001452 <HAL_UART_RxCpltCallback+0x6a>
		{
			Rxdata[i] = Rxdata_buff[i];
 8001438:	4a0b      	ldr	r2, [pc, #44]	; (8001468 <HAL_UART_RxCpltCallback+0x80>)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4413      	add	r3, r2
 800143e:	7819      	ldrb	r1, [r3, #0]
 8001440:	4a0b      	ldr	r2, [pc, #44]	; (8001470 <HAL_UART_RxCpltCallback+0x88>)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4413      	add	r3, r2
 8001446:	460a      	mov	r2, r1
 8001448:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i<4; i++)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	3301      	adds	r3, #1
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	e7ef      	b.n	8001432 <HAL_UART_RxCpltCallback+0x4a>
		}
	}
	delete pwm;
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d003      	beq.n	8001460 <HAL_UART_RxCpltCallback+0x78>
 8001458:	210c      	movs	r1, #12
 800145a:	4618      	mov	r0, r3
 800145c:	f004 fbae 	bl	8005bbc <_ZdlPvj>
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	bd90      	pop	{r4, r7, pc}
 8001468:	200001cc 	.word	0x200001cc
 800146c:	20000144 	.word	0x20000144
 8001470:	200001c8 	.word	0x200001c8

08001474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001474:	b590      	push	{r4, r7, lr}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800147a:	f000 fce9 	bl	8001e50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800147e:	f000 f823 	bl	80014c8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001482:	f000 f9b7 	bl	80017f4 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8001486:	f000 f981 	bl	800178c <_ZL19MX_USART2_UART_Initv>
  MX_TIM1_Init();
 800148a:	f000 f885 	bl	8001598 <_ZL12MX_TIM1_Initv>
  MX_TIM6_Init();
 800148e:	f000 f93d 	bl	800170c <_ZL12MX_TIM6_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8001492:	480a      	ldr	r0, [pc, #40]	; (80014bc <main+0x48>)
 8001494:	f002 fb70 	bl	8003b78 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t*)Rxdata_buff, sizeof(Rxdata_buff));
 8001498:	2204      	movs	r2, #4
 800149a:	4909      	ldr	r1, [pc, #36]	; (80014c0 <main+0x4c>)
 800149c:	4809      	ldr	r0, [pc, #36]	; (80014c4 <main+0x50>)
 800149e:	f003 fcce 	bl	8004e3e <HAL_UART_Receive_IT>
  PWM* pwm = new PWM();
 80014a2:	200c      	movs	r0, #12
 80014a4:	f004 fb9b 	bl	8005bde <_Znwj>
 80014a8:	4603      	mov	r3, r0
 80014aa:	461c      	mov	r4, r3
 80014ac:	4620      	mov	r0, r4
 80014ae:	f7ff ff83 	bl	80013b8 <_ZN3PWMC1Ev>
 80014b2:	607c      	str	r4, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  pwm -> control_PWM();
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff fce1 	bl	8000e7c <_ZN3PWM11control_PWMEv>
 80014ba:	e7fb      	b.n	80014b4 <main+0x40>
 80014bc:	200000f8 	.word	0x200000f8
 80014c0:	200001cc 	.word	0x200001cc
 80014c4:	20000144 	.word	0x20000144

080014c8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b096      	sub	sp, #88	; 0x58
 80014cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014d2:	2228      	movs	r2, #40	; 0x28
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f004 fbde 	bl	8005c98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014dc:	f107 031c 	add.w	r3, r7, #28
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
 80014f8:	611a      	str	r2, [r3, #16]
 80014fa:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014fc:	2302      	movs	r3, #2
 80014fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001500:	2301      	movs	r3, #1
 8001502:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001504:	2310      	movs	r3, #16
 8001506:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001508:	2302      	movs	r3, #2
 800150a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800150c:	2300      	movs	r3, #0
 800150e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001510:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001514:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001516:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800151a:	4618      	mov	r0, r3
 800151c:	f001 f870 	bl	8002600 <HAL_RCC_OscConfig>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	bf14      	ite	ne
 8001526:	2301      	movne	r3, #1
 8001528:	2300      	moveq	r3, #0
 800152a:	b2db      	uxtb	r3, r3
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <_Z18SystemClock_Configv+0x6c>
  {
    Error_Handler();
 8001530:	f000 f9ee 	bl	8001910 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001534:	230f      	movs	r3, #15
 8001536:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001538:	2302      	movs	r3, #2
 800153a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800153c:	2300      	movs	r3, #0
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001540:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001544:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001546:	2300      	movs	r3, #0
 8001548:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800154a:	f107 031c 	add.w	r3, r7, #28
 800154e:	2100      	movs	r1, #0
 8001550:	4618      	mov	r0, r3
 8001552:	f001 ff5d 	bl	8003410 <HAL_RCC_ClockConfig>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	bf14      	ite	ne
 800155c:	2301      	movne	r3, #1
 800155e:	2300      	moveq	r3, #0
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8001566:	f000 f9d3 	bl	8001910 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800156a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800156e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001570:	2300      	movs	r3, #0
 8001572:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	4618      	mov	r0, r3
 8001578:	f002 f980 	bl	800387c <HAL_RCCEx_PeriphCLKConfig>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	bf14      	ite	ne
 8001582:	2301      	movne	r3, #1
 8001584:	2300      	moveq	r3, #0
 8001586:	b2db      	uxtb	r3, r3
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <_Z18SystemClock_Configv+0xc8>
  {
    Error_Handler();
 800158c:	f000 f9c0 	bl	8001910 <Error_Handler>
  }
}
 8001590:	bf00      	nop
 8001592:	3758      	adds	r7, #88	; 0x58
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b096      	sub	sp, #88	; 0x58
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800159e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	60da      	str	r2, [r3, #12]
 80015b8:	611a      	str	r2, [r3, #16]
 80015ba:	615a      	str	r2, [r3, #20]
 80015bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	222c      	movs	r2, #44	; 0x2c
 80015c2:	2100      	movs	r1, #0
 80015c4:	4618      	mov	r0, r3
 80015c6:	f004 fb67 	bl	8005c98 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015ca:	4b4c      	ldr	r3, [pc, #304]	; (80016fc <_ZL12MX_TIM1_Initv+0x164>)
 80015cc:	4a4c      	ldr	r2, [pc, #304]	; (8001700 <_ZL12MX_TIM1_Initv+0x168>)
 80015ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80015d0:	4b4a      	ldr	r3, [pc, #296]	; (80016fc <_ZL12MX_TIM1_Initv+0x164>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d6:	4b49      	ldr	r3, [pc, #292]	; (80016fc <_ZL12MX_TIM1_Initv+0x164>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 799;
 80015dc:	4b47      	ldr	r3, [pc, #284]	; (80016fc <_ZL12MX_TIM1_Initv+0x164>)
 80015de:	f240 321f 	movw	r2, #799	; 0x31f
 80015e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e4:	4b45      	ldr	r3, [pc, #276]	; (80016fc <_ZL12MX_TIM1_Initv+0x164>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015ea:	4b44      	ldr	r3, [pc, #272]	; (80016fc <_ZL12MX_TIM1_Initv+0x164>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015f0:	4b42      	ldr	r3, [pc, #264]	; (80016fc <_ZL12MX_TIM1_Initv+0x164>)
 80015f2:	2280      	movs	r2, #128	; 0x80
 80015f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015f6:	4841      	ldr	r0, [pc, #260]	; (80016fc <_ZL12MX_TIM1_Initv+0x164>)
 80015f8:	f002 fb1a 	bl	8003c30 <HAL_TIM_PWM_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	bf14      	ite	ne
 8001602:	2301      	movne	r3, #1
 8001604:	2300      	moveq	r3, #0
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <_ZL12MX_TIM1_Initv+0x78>
  {
    Error_Handler();
 800160c:	f000 f980 	bl	8001910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001610:	2300      	movs	r3, #0
 8001612:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001614:	2300      	movs	r3, #0
 8001616:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001618:	2300      	movs	r3, #0
 800161a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800161c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001620:	4619      	mov	r1, r3
 8001622:	4836      	ldr	r0, [pc, #216]	; (80016fc <_ZL12MX_TIM1_Initv+0x164>)
 8001624:	f003 fa94 	bl	8004b50 <HAL_TIMEx_MasterConfigSynchronization>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	bf14      	ite	ne
 800162e:	2301      	movne	r3, #1
 8001630:	2300      	moveq	r3, #0
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <_ZL12MX_TIM1_Initv+0xa4>
  {
    Error_Handler();
 8001638:	f000 f96a 	bl	8001910 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ASSYMETRIC_PWM1;
 800163c:	4b31      	ldr	r3, [pc, #196]	; (8001704 <_ZL12MX_TIM1_Initv+0x16c>)
 800163e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001644:	2300      	movs	r3, #0
 8001646:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001648:	2300      	movs	r3, #0
 800164a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800164c:	2300      	movs	r3, #0
 800164e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001650:	2300      	movs	r3, #0
 8001652:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001654:	2300      	movs	r3, #0
 8001656:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001658:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800165c:	2204      	movs	r2, #4
 800165e:	4619      	mov	r1, r3
 8001660:	4826      	ldr	r0, [pc, #152]	; (80016fc <_ZL12MX_TIM1_Initv+0x164>)
 8001662:	f002 fd49 	bl	80040f8 <HAL_TIM_PWM_ConfigChannel>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	bf14      	ite	ne
 800166c:	2301      	movne	r3, #1
 800166e:	2300      	moveq	r3, #0
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <_ZL12MX_TIM1_Initv+0xe2>
  {
    Error_Handler();
 8001676:	f000 f94b 	bl	8001910 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ASSYMETRIC_PWM2;
 800167a:	4b23      	ldr	r3, [pc, #140]	; (8001708 <_ZL12MX_TIM1_Initv+0x170>)
 800167c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800167e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001682:	2208      	movs	r2, #8
 8001684:	4619      	mov	r1, r3
 8001686:	481d      	ldr	r0, [pc, #116]	; (80016fc <_ZL12MX_TIM1_Initv+0x164>)
 8001688:	f002 fd36 	bl	80040f8 <HAL_TIM_PWM_ConfigChannel>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	bf14      	ite	ne
 8001692:	2301      	movne	r3, #1
 8001694:	2300      	moveq	r3, #0
 8001696:	b2db      	uxtb	r3, r3
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <_ZL12MX_TIM1_Initv+0x108>
  {
    Error_Handler();
 800169c:	f000 f938 	bl	8001910 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016a4:	2300      	movs	r3, #0
 80016a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016a8:	2300      	movs	r3, #0
 80016aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 13;
 80016ac:	230d      	movs	r3, #13
 80016ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016be:	2300      	movs	r3, #0
 80016c0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	4619      	mov	r1, r3
 80016d4:	4809      	ldr	r0, [pc, #36]	; (80016fc <_ZL12MX_TIM1_Initv+0x164>)
 80016d6:	f003 faa9 	bl	8004c2c <HAL_TIMEx_ConfigBreakDeadTime>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	bf14      	ite	ne
 80016e0:	2301      	movne	r3, #1
 80016e2:	2300      	moveq	r3, #0
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <_ZL12MX_TIM1_Initv+0x156>
  {
    Error_Handler();
 80016ea:	f000 f911 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016ee:	4803      	ldr	r0, [pc, #12]	; (80016fc <_ZL12MX_TIM1_Initv+0x164>)
 80016f0:	f000 f97e 	bl	80019f0 <HAL_TIM_MspPostInit>

}
 80016f4:	bf00      	nop
 80016f6:	3758      	adds	r7, #88	; 0x58
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	200000ac 	.word	0x200000ac
 8001700:	40012c00 	.word	0x40012c00
 8001704:	00010060 	.word	0x00010060
 8001708:	00010070 	.word	0x00010070

0800170c <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800171c:	4b19      	ldr	r3, [pc, #100]	; (8001784 <_ZL12MX_TIM6_Initv+0x78>)
 800171e:	4a1a      	ldr	r2, [pc, #104]	; (8001788 <_ZL12MX_TIM6_Initv+0x7c>)
 8001720:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9999;
 8001722:	4b18      	ldr	r3, [pc, #96]	; (8001784 <_ZL12MX_TIM6_Initv+0x78>)
 8001724:	f242 720f 	movw	r2, #9999	; 0x270f
 8001728:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172a:	4b16      	ldr	r3, [pc, #88]	; (8001784 <_ZL12MX_TIM6_Initv+0x78>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 159;
 8001730:	4b14      	ldr	r3, [pc, #80]	; (8001784 <_ZL12MX_TIM6_Initv+0x78>)
 8001732:	229f      	movs	r2, #159	; 0x9f
 8001734:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001736:	4b13      	ldr	r3, [pc, #76]	; (8001784 <_ZL12MX_TIM6_Initv+0x78>)
 8001738:	2280      	movs	r2, #128	; 0x80
 800173a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800173c:	4811      	ldr	r0, [pc, #68]	; (8001784 <_ZL12MX_TIM6_Initv+0x78>)
 800173e:	f002 f9c3 	bl	8003ac8 <HAL_TIM_Base_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	bf14      	ite	ne
 8001748:	2301      	movne	r3, #1
 800174a:	2300      	moveq	r3, #0
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 8001752:	f000 f8dd 	bl	8001910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001756:	2300      	movs	r3, #0
 8001758:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	4619      	mov	r1, r3
 8001762:	4808      	ldr	r0, [pc, #32]	; (8001784 <_ZL12MX_TIM6_Initv+0x78>)
 8001764:	f003 f9f4 	bl	8004b50 <HAL_TIMEx_MasterConfigSynchronization>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	bf14      	ite	ne
 800176e:	2301      	movne	r3, #1
 8001770:	2300      	moveq	r3, #0
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 8001778:	f000 f8ca 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800177c:	bf00      	nop
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200000f8 	.word	0x200000f8
 8001788:	40001000 	.word	0x40001000

0800178c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001790:	4b16      	ldr	r3, [pc, #88]	; (80017ec <_ZL19MX_USART2_UART_Initv+0x60>)
 8001792:	4a17      	ldr	r2, [pc, #92]	; (80017f0 <_ZL19MX_USART2_UART_Initv+0x64>)
 8001794:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <_ZL19MX_USART2_UART_Initv+0x60>)
 8001798:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800179c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800179e:	4b13      	ldr	r3, [pc, #76]	; (80017ec <_ZL19MX_USART2_UART_Initv+0x60>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017a4:	4b11      	ldr	r3, [pc, #68]	; (80017ec <_ZL19MX_USART2_UART_Initv+0x60>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <_ZL19MX_USART2_UART_Initv+0x60>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017b0:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <_ZL19MX_USART2_UART_Initv+0x60>)
 80017b2:	220c      	movs	r2, #12
 80017b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017b6:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <_ZL19MX_USART2_UART_Initv+0x60>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <_ZL19MX_USART2_UART_Initv+0x60>)
 80017be:	2200      	movs	r2, #0
 80017c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017c2:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <_ZL19MX_USART2_UART_Initv+0x60>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017c8:	4b08      	ldr	r3, [pc, #32]	; (80017ec <_ZL19MX_USART2_UART_Initv+0x60>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017ce:	4807      	ldr	r0, [pc, #28]	; (80017ec <_ZL19MX_USART2_UART_Initv+0x60>)
 80017d0:	f003 fae7 	bl	8004da2 <HAL_UART_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	bf14      	ite	ne
 80017da:	2301      	movne	r3, #1
 80017dc:	2300      	moveq	r3, #0
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 80017e4:	f000 f894 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000144 	.word	0x20000144
 80017f0:	40004400 	.word	0x40004400

080017f4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b088      	sub	sp, #32
 80017f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fa:	f107 030c 	add.w	r3, r7, #12
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
 8001808:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800180a:	4b3e      	ldr	r3, [pc, #248]	; (8001904 <_ZL12MX_GPIO_Initv+0x110>)
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	4a3d      	ldr	r2, [pc, #244]	; (8001904 <_ZL12MX_GPIO_Initv+0x110>)
 8001810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001814:	6153      	str	r3, [r2, #20]
 8001816:	4b3b      	ldr	r3, [pc, #236]	; (8001904 <_ZL12MX_GPIO_Initv+0x110>)
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001822:	4b38      	ldr	r3, [pc, #224]	; (8001904 <_ZL12MX_GPIO_Initv+0x110>)
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	4a37      	ldr	r2, [pc, #220]	; (8001904 <_ZL12MX_GPIO_Initv+0x110>)
 8001828:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800182c:	6153      	str	r3, [r2, #20]
 800182e:	4b35      	ldr	r3, [pc, #212]	; (8001904 <_ZL12MX_GPIO_Initv+0x110>)
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD_0_Pin|LD_1_Pin, GPIO_PIN_RESET);
 800183a:	2200      	movs	r2, #0
 800183c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001844:	f000 fea0 	bl	8002588 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EN_A_Pin EN_B_Pin */
  GPIO_InitStruct.Pin = EN_A_Pin|EN_B_Pin;
 8001848:	230a      	movs	r3, #10
 800184a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800184c:	4b2e      	ldr	r3, [pc, #184]	; (8001908 <_ZL12MX_GPIO_Initv+0x114>)
 800184e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	4619      	mov	r1, r3
 800185a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800185e:	f000 fd09 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pins : MN_0_Pin MN_1_Pin MN_2_Pin MN_3_Pin */
  GPIO_InitStruct.Pin = MN_0_Pin|MN_1_Pin|MN_2_Pin|MN_3_Pin;
 8001862:	23f0      	movs	r3, #240	; 0xf0
 8001864:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800186a:	2301      	movs	r3, #1
 800186c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186e:	f107 030c 	add.w	r3, r7, #12
 8001872:	4619      	mov	r1, r3
 8001874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001878:	f000 fcfc 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_0_Pin LD_1_Pin */
  GPIO_InitStruct.Pin = LD_0_Pin|LD_1_Pin;
 800187c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001880:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001882:	2301      	movs	r3, #1
 8001884:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188a:	2300      	movs	r3, #0
 800188c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188e:	f107 030c 	add.w	r3, r7, #12
 8001892:	4619      	mov	r1, r3
 8001894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001898:	f000 fcec 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800189c:	2308      	movs	r3, #8
 800189e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a0:	2302      	movs	r3, #2
 80018a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a8:	2300      	movs	r3, #0
 80018aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018ac:	2301      	movs	r3, #1
 80018ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b0:	f107 030c 	add.w	r3, r7, #12
 80018b4:	4619      	mov	r1, r3
 80018b6:	4815      	ldr	r0, [pc, #84]	; (800190c <_ZL12MX_GPIO_Initv+0x118>)
 80018b8:	f000 fcdc 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018bc:	2320      	movs	r3, #32
 80018be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018cc:	2302      	movs	r3, #2
 80018ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d0:	f107 030c 	add.w	r3, r7, #12
 80018d4:	4619      	mov	r1, r3
 80018d6:	480d      	ldr	r0, [pc, #52]	; (800190c <_ZL12MX_GPIO_Initv+0x118>)
 80018d8:	f000 fccc 	bl	8002274 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80018dc:	2200      	movs	r2, #0
 80018de:	2100      	movs	r1, #0
 80018e0:	2007      	movs	r0, #7
 80018e2:	f000 fc1a 	bl	800211a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80018e6:	2007      	movs	r0, #7
 80018e8:	f000 fc33 	bl	8002152 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80018ec:	2200      	movs	r2, #0
 80018ee:	2100      	movs	r1, #0
 80018f0:	2009      	movs	r0, #9
 80018f2:	f000 fc12 	bl	800211a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80018f6:	2009      	movs	r0, #9
 80018f8:	f000 fc2b 	bl	8002152 <HAL_NVIC_EnableIRQ>

}
 80018fc:	bf00      	nop
 80018fe:	3720      	adds	r7, #32
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40021000 	.word	0x40021000
 8001908:	10110000 	.word	0x10110000
 800190c:	48000400 	.word	0x48000400

08001910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001914:	b672      	cpsid	i
}
 8001916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001918:	e7fe      	b.n	8001918 <Error_Handler+0x8>
	...

0800191c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001922:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <HAL_MspInit+0x44>)
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	4a0e      	ldr	r2, [pc, #56]	; (8001960 <HAL_MspInit+0x44>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6193      	str	r3, [r2, #24]
 800192e:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <HAL_MspInit+0x44>)
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <HAL_MspInit+0x44>)
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	4a08      	ldr	r2, [pc, #32]	; (8001960 <HAL_MspInit+0x44>)
 8001940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001944:	61d3      	str	r3, [r2, #28]
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_MspInit+0x44>)
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40021000 	.word	0x40021000

08001964 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a0a      	ldr	r2, [pc, #40]	; (800199c <HAL_TIM_PWM_MspInit+0x38>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d10b      	bne.n	800198e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001976:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	4a09      	ldr	r2, [pc, #36]	; (80019a0 <HAL_TIM_PWM_MspInit+0x3c>)
 800197c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001980:	6193      	str	r3, [r2, #24]
 8001982:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800198e:	bf00      	nop
 8001990:	3714      	adds	r7, #20
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	40012c00 	.word	0x40012c00
 80019a0:	40021000 	.word	0x40021000

080019a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a0d      	ldr	r2, [pc, #52]	; (80019e8 <HAL_TIM_Base_MspInit+0x44>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d113      	bne.n	80019de <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80019b6:	4b0d      	ldr	r3, [pc, #52]	; (80019ec <HAL_TIM_Base_MspInit+0x48>)
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	4a0c      	ldr	r2, [pc, #48]	; (80019ec <HAL_TIM_Base_MspInit+0x48>)
 80019bc:	f043 0310 	orr.w	r3, r3, #16
 80019c0:	61d3      	str	r3, [r2, #28]
 80019c2:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <HAL_TIM_Base_MspInit+0x48>)
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	f003 0310 	and.w	r3, r3, #16
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2100      	movs	r1, #0
 80019d2:	2036      	movs	r0, #54	; 0x36
 80019d4:	f000 fba1 	bl	800211a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 80019d8:	2036      	movs	r0, #54	; 0x36
 80019da:	f000 fbba 	bl	8002152 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40001000 	.word	0x40001000
 80019ec:	40021000 	.word	0x40021000

080019f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08a      	sub	sp, #40	; 0x28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a31      	ldr	r2, [pc, #196]	; (8001ad4 <HAL_TIM_MspPostInit+0xe4>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d15b      	bne.n	8001aca <HAL_TIM_MspPostInit+0xda>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a12:	4b31      	ldr	r3, [pc, #196]	; (8001ad8 <HAL_TIM_MspPostInit+0xe8>)
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	4a30      	ldr	r2, [pc, #192]	; (8001ad8 <HAL_TIM_MspPostInit+0xe8>)
 8001a18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a1c:	6153      	str	r3, [r2, #20]
 8001a1e:	4b2e      	ldr	r3, [pc, #184]	; (8001ad8 <HAL_TIM_MspPostInit+0xe8>)
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2a:	4b2b      	ldr	r3, [pc, #172]	; (8001ad8 <HAL_TIM_MspPostInit+0xe8>)
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	4a2a      	ldr	r2, [pc, #168]	; (8001ad8 <HAL_TIM_MspPostInit+0xe8>)
 8001a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a34:	6153      	str	r3, [r2, #20]
 8001a36:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <HAL_TIM_MspPostInit+0xe8>)
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a42:	2301      	movs	r3, #1
 8001a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a46:	2302      	movs	r3, #2
 8001a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001a52:	2306      	movs	r3, #6
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	481f      	ldr	r0, [pc, #124]	; (8001adc <HAL_TIM_MspPostInit+0xec>)
 8001a5e:	f000 fc09 	bl	8002274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a62:	2302      	movs	r3, #2
 8001a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a66:	2302      	movs	r3, #2
 8001a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001a72:	2306      	movs	r3, #6
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a76:	f107 0314 	add.w	r3, r7, #20
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4817      	ldr	r0, [pc, #92]	; (8001adc <HAL_TIM_MspPostInit+0xec>)
 8001a7e:	f000 fbf9 	bl	8002274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a90:	2300      	movs	r3, #0
 8001a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001a94:	2306      	movs	r3, #6
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aa2:	f000 fbe7 	bl	8002274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001aa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aac:	2302      	movs	r3, #2
 8001aae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001ab8:	2306      	movs	r3, #6
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ac6:	f000 fbd5 	bl	8002274 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001aca:	bf00      	nop
 8001acc:	3728      	adds	r7, #40	; 0x28
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40012c00 	.word	0x40012c00
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	48000400 	.word	0x48000400

08001ae0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08a      	sub	sp, #40	; 0x28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a1c      	ldr	r2, [pc, #112]	; (8001b70 <HAL_UART_MspInit+0x90>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d131      	bne.n	8001b66 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b02:	4b1c      	ldr	r3, [pc, #112]	; (8001b74 <HAL_UART_MspInit+0x94>)
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	4a1b      	ldr	r2, [pc, #108]	; (8001b74 <HAL_UART_MspInit+0x94>)
 8001b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b0c:	61d3      	str	r3, [r2, #28]
 8001b0e:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <HAL_UART_MspInit+0x94>)
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1a:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <HAL_UART_MspInit+0x94>)
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	4a15      	ldr	r2, [pc, #84]	; (8001b74 <HAL_UART_MspInit+0x94>)
 8001b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b24:	6153      	str	r3, [r2, #20]
 8001b26:	4b13      	ldr	r3, [pc, #76]	; (8001b74 <HAL_UART_MspInit+0x94>)
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8001b32:	f248 0304 	movw	r3, #32772	; 0x8004
 8001b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b40:	2303      	movs	r3, #3
 8001b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b44:	2307      	movs	r3, #7
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b52:	f000 fb8f 	bl	8002274 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2100      	movs	r1, #0
 8001b5a:	2026      	movs	r0, #38	; 0x26
 8001b5c:	f000 fadd 	bl	800211a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b60:	2026      	movs	r0, #38	; 0x26
 8001b62:	f000 faf6 	bl	8002152 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b66:	bf00      	nop
 8001b68:	3728      	adds	r7, #40	; 0x28
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40004400 	.word	0x40004400
 8001b74:	40021000 	.word	0x40021000

08001b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <NMI_Handler+0x4>

08001b7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b82:	e7fe      	b.n	8001b82 <HardFault_Handler+0x4>

08001b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <MemManage_Handler+0x4>

08001b8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b8e:	e7fe      	b.n	8001b8e <BusFault_Handler+0x4>

08001b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b94:	e7fe      	b.n	8001b94 <UsageFault_Handler+0x4>

08001b96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bc4:	f000 f98a 	bl	8001edc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001bd0:	2002      	movs	r0, #2
 8001bd2:	f000 fcf1 	bl	80025b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
  encoder -> EN_1();
 8001bd6:	4b03      	ldr	r3, [pc, #12]	; (8001be4 <EXTI1_IRQHandler+0x18>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff fba4 	bl	8001328 <_ZN7Encoder4EN_1Ev>

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	200001dc 	.word	0x200001dc

08001be8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001bec:	2008      	movs	r0, #8
 8001bee:	f000 fce3 	bl	80025b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  encoder -> EN_3();
 8001bf2:	4b03      	ldr	r3, [pc, #12]	; (8001c00 <EXTI3_IRQHandler+0x18>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff fb4e 	bl	8001298 <_ZN7Encoder4EN_3Ev>
  /* USER CODE END EXTI3_IRQn 1 */
}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	200001dc 	.word	0x200001dc

08001c04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c08:	4802      	ldr	r0, [pc, #8]	; (8001c14 <USART2_IRQHandler+0x10>)
 8001c0a:	f003 f955 	bl	8004eb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000144 	.word	0x20000144

08001c18 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c1c:	481f      	ldr	r0, [pc, #124]	; (8001c9c <TIM6_DAC1_IRQHandler+0x84>)
 8001c1e:	f002 f94b 	bl	8003eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */


  current_speed = feedback -> current_speed_calc();
 8001c22:	4b1f      	ldr	r3, [pc, #124]	; (8001ca0 <TIM6_DAC1_IRQHandler+0x88>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fee6 	bl	80009f8 <_ZN8Feedback18current_speed_calcEv>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	461a      	mov	r2, r3
 8001c30:	4b1c      	ldr	r3, [pc, #112]	; (8001ca4 <TIM6_DAC1_IRQHandler+0x8c>)
 8001c32:	801a      	strh	r2, [r3, #0]
//  feedback -> pwm_calc();
  PID_pwm = feedback -> PID_control( current_speed );
 8001c34:	4b1a      	ldr	r3, [pc, #104]	; (8001ca0 <TIM6_DAC1_IRQHandler+0x88>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a1a      	ldr	r2, [pc, #104]	; (8001ca4 <TIM6_DAC1_IRQHandler+0x8c>)
 8001c3a:	8812      	ldrh	r2, [r2, #0]
 8001c3c:	4611      	mov	r1, r2
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe ff44 	bl	8000acc <_ZN8Feedback11PID_controlEt>
 8001c44:	4603      	mov	r3, r0
 8001c46:	4a18      	ldr	r2, [pc, #96]	; (8001ca8 <TIM6_DAC1_IRQHandler+0x90>)
 8001c48:	6013      	str	r3, [r2, #0]

  speed_diff = feedback -> speed_diff_calc( (uint16_t)(( Rxdata[2] << 8 ) | ( Rxdata[3] )), current_speed );
 8001c4a:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <TIM6_DAC1_IRQHandler+0x88>)
 8001c4c:	6818      	ldr	r0, [r3, #0]
 8001c4e:	4b17      	ldr	r3, [pc, #92]	; (8001cac <TIM6_DAC1_IRQHandler+0x94>)
 8001c50:	789b      	ldrb	r3, [r3, #2]
 8001c52:	021b      	lsls	r3, r3, #8
 8001c54:	b21a      	sxth	r2, r3
 8001c56:	4b15      	ldr	r3, [pc, #84]	; (8001cac <TIM6_DAC1_IRQHandler+0x94>)
 8001c58:	78db      	ldrb	r3, [r3, #3]
 8001c5a:	b21b      	sxth	r3, r3
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	b21b      	sxth	r3, r3
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	4a10      	ldr	r2, [pc, #64]	; (8001ca4 <TIM6_DAC1_IRQHandler+0x8c>)
 8001c64:	8812      	ldrh	r2, [r2, #0]
 8001c66:	4619      	mov	r1, r3
 8001c68:	f7fe fefc 	bl	8000a64 <_ZN8Feedback15speed_diff_calcEtt>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	4a10      	ldr	r2, [pc, #64]	; (8001cb0 <TIM6_DAC1_IRQHandler+0x98>)
 8001c70:	6013      	str	r3, [r2, #0]


  if( pwm -> get_Is_reached() == false )
 8001c72:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <TIM6_DAC1_IRQHandler+0x9c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff fb00 	bl	800127c <_ZN3PWM14get_Is_reachedEv>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	bf0c      	ite	eq
 8001c82:	2301      	moveq	r3, #1
 8001c84:	2300      	movne	r3, #0
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d004      	beq.n	8001c96 <TIM6_DAC1_IRQHandler+0x7e>
  {
	  feedback -> reset_PID();
 8001c8c:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <TIM6_DAC1_IRQHandler+0x88>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe ff07 	bl	8000aa4 <_ZN8Feedback9reset_PIDEv>
  }


  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	200000f8 	.word	0x200000f8
 8001ca0:	200001e4 	.word	0x200001e4
 8001ca4:	200001d0 	.word	0x200001d0
 8001ca8:	200001d4 	.word	0x200001d4
 8001cac:	200001c8 	.word	0x200001c8
 8001cb0:	200001d8 	.word	0x200001d8
 8001cb4:	200001e0 	.word	0x200001e0

08001cb8 <_Z41__static_initialization_and_destruction_0ii>:
 8001cb8:	b590      	push	{r4, r7, lr}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d11c      	bne.n	8001d02 <_Z41__static_initialization_and_destruction_0ii+0x4a>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d117      	bne.n	8001d02 <_Z41__static_initialization_and_destruction_0ii+0x4a>
Encoder* encoder = new Encoder();
 8001cd2:	2001      	movs	r0, #1
 8001cd4:	f003 ff83 	bl	8005bde <_Znwj>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	461a      	mov	r2, r3
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001cde:	601a      	str	r2, [r3, #0]
PWM* pwm = new PWM();
 8001ce0:	200c      	movs	r0, #12
 8001ce2:	f003 ff7c 	bl	8005bde <_Znwj>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	461c      	mov	r4, r3
 8001cea:	4620      	mov	r0, r4
 8001cec:	f7ff fb64 	bl	80013b8 <_ZN3PWMC1Ev>
 8001cf0:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001cf2:	601c      	str	r4, [r3, #0]
Feedback* feedback = new Feedback();
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	f003 ff72 	bl	8005bde <_Znwj>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001d00:	601a      	str	r2, [r3, #0]
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd90      	pop	{r4, r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	200001dc 	.word	0x200001dc
 8001d10:	200001e0 	.word	0x200001e0
 8001d14:	200001e4 	.word	0x200001e4

08001d18 <_GLOBAL__sub_I_current_speed>:
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001d20:	2001      	movs	r0, #1
 8001d22:	f7ff ffc9 	bl	8001cb8 <_Z41__static_initialization_and_destruction_0ii>
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
	return 1;
 8001d2c:	2301      	movs	r3, #1
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <_kill>:

int _kill(int pid, int sig)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d42:	f003 ff6f 	bl	8005c24 <__errno>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2216      	movs	r2, #22
 8001d4a:	601a      	str	r2, [r3, #0]
	return -1;
 8001d4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <_exit>:

void _exit (int status)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d60:	f04f 31ff 	mov.w	r1, #4294967295
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff ffe7 	bl	8001d38 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d6a:	e7fe      	b.n	8001d6a <_exit+0x12>

08001d6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d74:	4a14      	ldr	r2, [pc, #80]	; (8001dc8 <_sbrk+0x5c>)
 8001d76:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <_sbrk+0x60>)
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d80:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <_sbrk+0x64>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d102      	bne.n	8001d8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d88:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <_sbrk+0x64>)
 8001d8a:	4a12      	ldr	r2, [pc, #72]	; (8001dd4 <_sbrk+0x68>)
 8001d8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d8e:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <_sbrk+0x64>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4413      	add	r3, r2
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d207      	bcs.n	8001dac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d9c:	f003 ff42 	bl	8005c24 <__errno>
 8001da0:	4603      	mov	r3, r0
 8001da2:	220c      	movs	r2, #12
 8001da4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001da6:	f04f 33ff 	mov.w	r3, #4294967295
 8001daa:	e009      	b.n	8001dc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dac:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <_sbrk+0x64>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001db2:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <_sbrk+0x64>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	4a05      	ldr	r2, [pc, #20]	; (8001dd0 <_sbrk+0x64>)
 8001dbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20003000 	.word	0x20003000
 8001dcc:	00000400 	.word	0x00000400
 8001dd0:	200001e8 	.word	0x200001e8
 8001dd4:	20000210 	.word	0x20000210

08001dd8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <SystemInit+0x20>)
 8001dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001de2:	4a05      	ldr	r2, [pc, #20]	; (8001df8 <SystemInit+0x20>)
 8001de4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001de8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001dfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e34 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e00:	480d      	ldr	r0, [pc, #52]	; (8001e38 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e02:	490e      	ldr	r1, [pc, #56]	; (8001e3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e04:	4a0e      	ldr	r2, [pc, #56]	; (8001e40 <LoopForever+0xe>)
  movs r3, #0
 8001e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e08:	e002      	b.n	8001e10 <LoopCopyDataInit>

08001e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e0e:	3304      	adds	r3, #4

08001e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e14:	d3f9      	bcc.n	8001e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e16:	4a0b      	ldr	r2, [pc, #44]	; (8001e44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e18:	4c0b      	ldr	r4, [pc, #44]	; (8001e48 <LoopForever+0x16>)
  movs r3, #0
 8001e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e1c:	e001      	b.n	8001e22 <LoopFillZerobss>

08001e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e20:	3204      	adds	r2, #4

08001e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e24:	d3fb      	bcc.n	8001e1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e26:	f7ff ffd7 	bl	8001dd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e2a:	f003 ff01 	bl	8005c30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e2e:	f7ff fb21 	bl	8001474 <main>

08001e32 <LoopForever>:

LoopForever:
    b LoopForever
 8001e32:	e7fe      	b.n	8001e32 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e34:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e3c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001e40:	08005f1c 	.word	0x08005f1c
  ldr r2, =_sbss
 8001e44:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001e48:	2000020c 	.word	0x2000020c

08001e4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e4c:	e7fe      	b.n	8001e4c <ADC1_2_IRQHandler>
	...

08001e50 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e54:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <HAL_Init+0x28>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a07      	ldr	r2, [pc, #28]	; (8001e78 <HAL_Init+0x28>)
 8001e5a:	f043 0310 	orr.w	r3, r3, #16
 8001e5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e60:	2003      	movs	r0, #3
 8001e62:	f000 f94f 	bl	8002104 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e66:	2000      	movs	r0, #0
 8001e68:	f000 f808 	bl	8001e7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e6c:	f7ff fd56 	bl	800191c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40022000 	.word	0x40022000

08001e7c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e84:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <HAL_InitTick+0x54>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <HAL_InitTick+0x58>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 f967 	bl	800216e <HAL_SYSTICK_Config>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e00e      	b.n	8001ec8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b0f      	cmp	r3, #15
 8001eae:	d80a      	bhi.n	8001ec6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb8:	f000 f92f 	bl	800211a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ebc:	4a06      	ldr	r2, [pc, #24]	; (8001ed8 <HAL_InitTick+0x5c>)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	e000      	b.n	8001ec8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	20000008 	.word	0x20000008
 8001ed8:	20000004 	.word	0x20000004

08001edc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ee0:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_IncTick+0x20>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_IncTick+0x24>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4413      	add	r3, r2
 8001eec:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <HAL_IncTick+0x24>)
 8001eee:	6013      	str	r3, [r2, #0]
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	20000008 	.word	0x20000008
 8001f00:	200001f8 	.word	0x200001f8

08001f04 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return uwTick;  
 8001f08:	4b03      	ldr	r3, [pc, #12]	; (8001f18 <HAL_GetTick+0x14>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	200001f8 	.word	0x200001f8

08001f1c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f24:	f7ff ffee 	bl	8001f04 <HAL_GetTick>
 8001f28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f34:	d005      	beq.n	8001f42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f36:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <HAL_Delay+0x44>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4413      	add	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001f42:	bf00      	nop
 8001f44:	f7ff ffde 	bl	8001f04 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d8f7      	bhi.n	8001f44 <HAL_Delay+0x28>
  {
  }
}
 8001f54:	bf00      	nop
 8001f56:	bf00      	nop
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000008 	.word	0x20000008

08001f64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f74:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f80:	4013      	ands	r3, r2
 8001f82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f96:	4a04      	ldr	r2, [pc, #16]	; (8001fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	60d3      	str	r3, [r2, #12]
}
 8001f9c:	bf00      	nop
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fb0:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	0a1b      	lsrs	r3, r3, #8
 8001fb6:	f003 0307 	and.w	r3, r3, #7
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	db0b      	blt.n	8001ff2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fda:	79fb      	ldrb	r3, [r7, #7]
 8001fdc:	f003 021f 	and.w	r2, r3, #31
 8001fe0:	4907      	ldr	r1, [pc, #28]	; (8002000 <__NVIC_EnableIRQ+0x38>)
 8001fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe6:	095b      	lsrs	r3, r3, #5
 8001fe8:	2001      	movs	r0, #1
 8001fea:	fa00 f202 	lsl.w	r2, r0, r2
 8001fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	e000e100 	.word	0xe000e100

08002004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	6039      	str	r1, [r7, #0]
 800200e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002014:	2b00      	cmp	r3, #0
 8002016:	db0a      	blt.n	800202e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	b2da      	uxtb	r2, r3
 800201c:	490c      	ldr	r1, [pc, #48]	; (8002050 <__NVIC_SetPriority+0x4c>)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	0112      	lsls	r2, r2, #4
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	440b      	add	r3, r1
 8002028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800202c:	e00a      	b.n	8002044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	b2da      	uxtb	r2, r3
 8002032:	4908      	ldr	r1, [pc, #32]	; (8002054 <__NVIC_SetPriority+0x50>)
 8002034:	79fb      	ldrb	r3, [r7, #7]
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	3b04      	subs	r3, #4
 800203c:	0112      	lsls	r2, r2, #4
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	440b      	add	r3, r1
 8002042:	761a      	strb	r2, [r3, #24]
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	e000e100 	.word	0xe000e100
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002058:	b480      	push	{r7}
 800205a:	b089      	sub	sp, #36	; 0x24
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f1c3 0307 	rsb	r3, r3, #7
 8002072:	2b04      	cmp	r3, #4
 8002074:	bf28      	it	cs
 8002076:	2304      	movcs	r3, #4
 8002078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	3304      	adds	r3, #4
 800207e:	2b06      	cmp	r3, #6
 8002080:	d902      	bls.n	8002088 <NVIC_EncodePriority+0x30>
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	3b03      	subs	r3, #3
 8002086:	e000      	b.n	800208a <NVIC_EncodePriority+0x32>
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800208c:	f04f 32ff 	mov.w	r2, #4294967295
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43da      	mvns	r2, r3
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	401a      	ands	r2, r3
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a0:	f04f 31ff 	mov.w	r1, #4294967295
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	fa01 f303 	lsl.w	r3, r1, r3
 80020aa:	43d9      	mvns	r1, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b0:	4313      	orrs	r3, r2
         );
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3724      	adds	r7, #36	; 0x24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
	...

080020c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020d0:	d301      	bcc.n	80020d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020d2:	2301      	movs	r3, #1
 80020d4:	e00f      	b.n	80020f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020d6:	4a0a      	ldr	r2, [pc, #40]	; (8002100 <SysTick_Config+0x40>)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3b01      	subs	r3, #1
 80020dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020de:	210f      	movs	r1, #15
 80020e0:	f04f 30ff 	mov.w	r0, #4294967295
 80020e4:	f7ff ff8e 	bl	8002004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020e8:	4b05      	ldr	r3, [pc, #20]	; (8002100 <SysTick_Config+0x40>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ee:	4b04      	ldr	r3, [pc, #16]	; (8002100 <SysTick_Config+0x40>)
 80020f0:	2207      	movs	r2, #7
 80020f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	e000e010 	.word	0xe000e010

08002104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff ff29 	bl	8001f64 <__NVIC_SetPriorityGrouping>
}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b086      	sub	sp, #24
 800211e:	af00      	add	r7, sp, #0
 8002120:	4603      	mov	r3, r0
 8002122:	60b9      	str	r1, [r7, #8]
 8002124:	607a      	str	r2, [r7, #4]
 8002126:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800212c:	f7ff ff3e 	bl	8001fac <__NVIC_GetPriorityGrouping>
 8002130:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	68b9      	ldr	r1, [r7, #8]
 8002136:	6978      	ldr	r0, [r7, #20]
 8002138:	f7ff ff8e 	bl	8002058 <NVIC_EncodePriority>
 800213c:	4602      	mov	r2, r0
 800213e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002142:	4611      	mov	r1, r2
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff ff5d 	bl	8002004 <__NVIC_SetPriority>
}
 800214a:	bf00      	nop
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b082      	sub	sp, #8
 8002156:	af00      	add	r7, sp, #0
 8002158:	4603      	mov	r3, r0
 800215a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800215c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff ff31 	bl	8001fc8 <__NVIC_EnableIRQ>
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b082      	sub	sp, #8
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff ffa2 	bl	80020c0 <SysTick_Config>
 800217c:	4603      	mov	r3, r0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002194:	2b02      	cmp	r3, #2
 8002196:	d008      	beq.n	80021aa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2204      	movs	r2, #4
 800219c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e020      	b.n	80021ec <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 020e 	bic.w	r2, r2, #14
 80021b8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0201 	bic.w	r2, r2, #1
 80021c8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d2:	2101      	movs	r1, #1
 80021d4:	fa01 f202 	lsl.w	r2, r1, r2
 80021d8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002200:	2300      	movs	r3, #0
 8002202:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800220a:	2b02      	cmp	r3, #2
 800220c:	d005      	beq.n	800221a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2204      	movs	r2, #4
 8002212:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	73fb      	strb	r3, [r7, #15]
 8002218:	e027      	b.n	800226a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 020e 	bic.w	r2, r2, #14
 8002228:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0201 	bic.w	r2, r2, #1
 8002238:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002242:	2101      	movs	r1, #1
 8002244:	fa01 f202 	lsl.w	r2, r1, r2
 8002248:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	4798      	blx	r3
    } 
  }
  return status;
 800226a:	7bfb      	ldrb	r3, [r7, #15]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002274:	b480      	push	{r7}
 8002276:	b087      	sub	sp, #28
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002282:	e14e      	b.n	8002522 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	2101      	movs	r1, #1
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	fa01 f303 	lsl.w	r3, r1, r3
 8002290:	4013      	ands	r3, r2
 8002292:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 8140 	beq.w	800251c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d00b      	beq.n	80022bc <HAL_GPIO_Init+0x48>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d007      	beq.n	80022bc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022b0:	2b11      	cmp	r3, #17
 80022b2:	d003      	beq.n	80022bc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b12      	cmp	r3, #18
 80022ba:	d130      	bne.n	800231e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	2203      	movs	r2, #3
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	4013      	ands	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	68da      	ldr	r2, [r3, #12]
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022f2:	2201      	movs	r2, #1
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43db      	mvns	r3, r3
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	4013      	ands	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	091b      	lsrs	r3, r3, #4
 8002308:	f003 0201 	and.w	r2, r3, #1
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	4313      	orrs	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	2203      	movs	r2, #3
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43db      	mvns	r3, r3
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	4013      	ands	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b02      	cmp	r3, #2
 8002354:	d003      	beq.n	800235e <HAL_GPIO_Init+0xea>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b12      	cmp	r3, #18
 800235c:	d123      	bne.n	80023a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	08da      	lsrs	r2, r3, #3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3208      	adds	r2, #8
 8002366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800236a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	220f      	movs	r2, #15
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	4013      	ands	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	691a      	ldr	r2, [r3, #16]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	08da      	lsrs	r2, r3, #3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3208      	adds	r2, #8
 80023a0:	6939      	ldr	r1, [r7, #16]
 80023a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	2203      	movs	r2, #3
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	4013      	ands	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f003 0203 	and.w	r2, r3, #3
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 809a 	beq.w	800251c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e8:	4b55      	ldr	r3, [pc, #340]	; (8002540 <HAL_GPIO_Init+0x2cc>)
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	4a54      	ldr	r2, [pc, #336]	; (8002540 <HAL_GPIO_Init+0x2cc>)
 80023ee:	f043 0301 	orr.w	r3, r3, #1
 80023f2:	6193      	str	r3, [r2, #24]
 80023f4:	4b52      	ldr	r3, [pc, #328]	; (8002540 <HAL_GPIO_Init+0x2cc>)
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002400:	4a50      	ldr	r2, [pc, #320]	; (8002544 <HAL_GPIO_Init+0x2d0>)
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	089b      	lsrs	r3, r3, #2
 8002406:	3302      	adds	r3, #2
 8002408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800240c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f003 0303 	and.w	r3, r3, #3
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	220f      	movs	r2, #15
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	4013      	ands	r3, r2
 8002422:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800242a:	d013      	beq.n	8002454 <HAL_GPIO_Init+0x1e0>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a46      	ldr	r2, [pc, #280]	; (8002548 <HAL_GPIO_Init+0x2d4>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d00d      	beq.n	8002450 <HAL_GPIO_Init+0x1dc>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a45      	ldr	r2, [pc, #276]	; (800254c <HAL_GPIO_Init+0x2d8>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d007      	beq.n	800244c <HAL_GPIO_Init+0x1d8>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a44      	ldr	r2, [pc, #272]	; (8002550 <HAL_GPIO_Init+0x2dc>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d101      	bne.n	8002448 <HAL_GPIO_Init+0x1d4>
 8002444:	2303      	movs	r3, #3
 8002446:	e006      	b.n	8002456 <HAL_GPIO_Init+0x1e2>
 8002448:	2305      	movs	r3, #5
 800244a:	e004      	b.n	8002456 <HAL_GPIO_Init+0x1e2>
 800244c:	2302      	movs	r3, #2
 800244e:	e002      	b.n	8002456 <HAL_GPIO_Init+0x1e2>
 8002450:	2301      	movs	r3, #1
 8002452:	e000      	b.n	8002456 <HAL_GPIO_Init+0x1e2>
 8002454:	2300      	movs	r3, #0
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	f002 0203 	and.w	r2, r2, #3
 800245c:	0092      	lsls	r2, r2, #2
 800245e:	4093      	lsls	r3, r2
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4313      	orrs	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002466:	4937      	ldr	r1, [pc, #220]	; (8002544 <HAL_GPIO_Init+0x2d0>)
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	089b      	lsrs	r3, r3, #2
 800246c:	3302      	adds	r3, #2
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002474:	4b37      	ldr	r3, [pc, #220]	; (8002554 <HAL_GPIO_Init+0x2e0>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	43db      	mvns	r3, r3
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	4013      	ands	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	4313      	orrs	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002498:	4a2e      	ldr	r2, [pc, #184]	; (8002554 <HAL_GPIO_Init+0x2e0>)
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800249e:	4b2d      	ldr	r3, [pc, #180]	; (8002554 <HAL_GPIO_Init+0x2e0>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	43db      	mvns	r3, r3
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	4013      	ands	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4313      	orrs	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024c2:	4a24      	ldr	r2, [pc, #144]	; (8002554 <HAL_GPIO_Init+0x2e0>)
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024c8:	4b22      	ldr	r3, [pc, #136]	; (8002554 <HAL_GPIO_Init+0x2e0>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	43db      	mvns	r3, r3
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	4013      	ands	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80024ec:	4a19      	ldr	r2, [pc, #100]	; (8002554 <HAL_GPIO_Init+0x2e0>)
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024f2:	4b18      	ldr	r3, [pc, #96]	; (8002554 <HAL_GPIO_Init+0x2e0>)
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	43db      	mvns	r3, r3
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	4013      	ands	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	4313      	orrs	r3, r2
 8002514:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002516:	4a0f      	ldr	r2, [pc, #60]	; (8002554 <HAL_GPIO_Init+0x2e0>)
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	3301      	adds	r3, #1
 8002520:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	fa22 f303 	lsr.w	r3, r2, r3
 800252c:	2b00      	cmp	r3, #0
 800252e:	f47f aea9 	bne.w	8002284 <HAL_GPIO_Init+0x10>
  }
}
 8002532:	bf00      	nop
 8002534:	bf00      	nop
 8002536:	371c      	adds	r7, #28
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	40021000 	.word	0x40021000
 8002544:	40010000 	.word	0x40010000
 8002548:	48000400 	.word	0x48000400
 800254c:	48000800 	.word	0x48000800
 8002550:	48000c00 	.word	0x48000c00
 8002554:	40010400 	.word	0x40010400

08002558 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	691a      	ldr	r2, [r3, #16]
 8002568:	887b      	ldrh	r3, [r7, #2]
 800256a:	4013      	ands	r3, r2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d002      	beq.n	8002576 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002570:	2301      	movs	r3, #1
 8002572:	73fb      	strb	r3, [r7, #15]
 8002574:	e001      	b.n	800257a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002576:	2300      	movs	r3, #0
 8002578:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800257a:	7bfb      	ldrb	r3, [r7, #15]
}
 800257c:	4618      	mov	r0, r3
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	807b      	strh	r3, [r7, #2]
 8002594:	4613      	mov	r3, r2
 8002596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002598:	787b      	ldrb	r3, [r7, #1]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800259e:	887a      	ldrh	r2, [r7, #2]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025a4:	e002      	b.n	80025ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025a6:	887a      	ldrh	r2, [r7, #2]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025c2:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025c4:	695a      	ldr	r2, [r3, #20]
 80025c6:	88fb      	ldrh	r3, [r7, #6]
 80025c8:	4013      	ands	r3, r2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d006      	beq.n	80025dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025ce:	4a05      	ldr	r2, [pc, #20]	; (80025e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025d0:	88fb      	ldrh	r3, [r7, #6]
 80025d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025d4:	88fb      	ldrh	r3, [r7, #6]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 f806 	bl	80025e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80025dc:	bf00      	nop
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40010400 	.word	0x40010400

080025e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
	...

08002600 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002606:	af00      	add	r7, sp, #0
 8002608:	1d3b      	adds	r3, r7, #4
 800260a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800260c:	1d3b      	adds	r3, r7, #4
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d102      	bne.n	800261a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	f000 bef4 	b.w	8003402 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800261a:	1d3b      	adds	r3, r7, #4
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 816a 	beq.w	80028fe <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800262a:	4bb3      	ldr	r3, [pc, #716]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 030c 	and.w	r3, r3, #12
 8002632:	2b04      	cmp	r3, #4
 8002634:	d00c      	beq.n	8002650 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002636:	4bb0      	ldr	r3, [pc, #704]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f003 030c 	and.w	r3, r3, #12
 800263e:	2b08      	cmp	r3, #8
 8002640:	d159      	bne.n	80026f6 <HAL_RCC_OscConfig+0xf6>
 8002642:	4bad      	ldr	r3, [pc, #692]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800264a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800264e:	d152      	bne.n	80026f6 <HAL_RCC_OscConfig+0xf6>
 8002650:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002654:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002658:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800265c:	fa93 f3a3 	rbit	r3, r3
 8002660:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002664:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002668:	fab3 f383 	clz	r3, r3
 800266c:	b2db      	uxtb	r3, r3
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	b2db      	uxtb	r3, r3
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b01      	cmp	r3, #1
 800267a:	d102      	bne.n	8002682 <HAL_RCC_OscConfig+0x82>
 800267c:	4b9e      	ldr	r3, [pc, #632]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	e015      	b.n	80026ae <HAL_RCC_OscConfig+0xae>
 8002682:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002686:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800268e:	fa93 f3a3 	rbit	r3, r3
 8002692:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002696:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800269a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800269e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80026a2:	fa93 f3a3 	rbit	r3, r3
 80026a6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80026aa:	4b93      	ldr	r3, [pc, #588]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026b2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80026b6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80026ba:	fa92 f2a2 	rbit	r2, r2
 80026be:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80026c2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80026c6:	fab2 f282 	clz	r2, r2
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	f042 0220 	orr.w	r2, r2, #32
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	f002 021f 	and.w	r2, r2, #31
 80026d6:	2101      	movs	r1, #1
 80026d8:	fa01 f202 	lsl.w	r2, r1, r2
 80026dc:	4013      	ands	r3, r2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 810c 	beq.w	80028fc <HAL_RCC_OscConfig+0x2fc>
 80026e4:	1d3b      	adds	r3, r7, #4
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f040 8106 	bne.w	80028fc <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	f000 be86 	b.w	8003402 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026f6:	1d3b      	adds	r3, r7, #4
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002700:	d106      	bne.n	8002710 <HAL_RCC_OscConfig+0x110>
 8002702:	4b7d      	ldr	r3, [pc, #500]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a7c      	ldr	r2, [pc, #496]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 8002708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	e030      	b.n	8002772 <HAL_RCC_OscConfig+0x172>
 8002710:	1d3b      	adds	r3, r7, #4
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10c      	bne.n	8002734 <HAL_RCC_OscConfig+0x134>
 800271a:	4b77      	ldr	r3, [pc, #476]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a76      	ldr	r2, [pc, #472]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 8002720:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	4b74      	ldr	r3, [pc, #464]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a73      	ldr	r2, [pc, #460]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 800272c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	e01e      	b.n	8002772 <HAL_RCC_OscConfig+0x172>
 8002734:	1d3b      	adds	r3, r7, #4
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800273e:	d10c      	bne.n	800275a <HAL_RCC_OscConfig+0x15a>
 8002740:	4b6d      	ldr	r3, [pc, #436]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a6c      	ldr	r2, [pc, #432]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 8002746:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800274a:	6013      	str	r3, [r2, #0]
 800274c:	4b6a      	ldr	r3, [pc, #424]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a69      	ldr	r2, [pc, #420]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 8002752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002756:	6013      	str	r3, [r2, #0]
 8002758:	e00b      	b.n	8002772 <HAL_RCC_OscConfig+0x172>
 800275a:	4b67      	ldr	r3, [pc, #412]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a66      	ldr	r2, [pc, #408]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 8002760:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	4b64      	ldr	r3, [pc, #400]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a63      	ldr	r2, [pc, #396]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 800276c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002770:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002772:	4b61      	ldr	r3, [pc, #388]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 8002774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002776:	f023 020f 	bic.w	r2, r3, #15
 800277a:	1d3b      	adds	r3, r7, #4
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	495d      	ldr	r1, [pc, #372]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 8002782:	4313      	orrs	r3, r2
 8002784:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002786:	1d3b      	adds	r3, r7, #4
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d059      	beq.n	8002844 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002790:	f7ff fbb8 	bl	8001f04 <HAL_GetTick>
 8002794:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002798:	e00a      	b.n	80027b0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800279a:	f7ff fbb3 	bl	8001f04 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b64      	cmp	r3, #100	; 0x64
 80027a8:	d902      	bls.n	80027b0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	f000 be29 	b.w	8003402 <HAL_RCC_OscConfig+0xe02>
 80027b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027b4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80027bc:	fa93 f3a3 	rbit	r3, r3
 80027c0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80027c4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c8:	fab3 f383 	clz	r3, r3
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	095b      	lsrs	r3, r3, #5
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d102      	bne.n	80027e2 <HAL_RCC_OscConfig+0x1e2>
 80027dc:	4b46      	ldr	r3, [pc, #280]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	e015      	b.n	800280e <HAL_RCC_OscConfig+0x20e>
 80027e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027e6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ea:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80027ee:	fa93 f3a3 	rbit	r3, r3
 80027f2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80027f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027fa:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80027fe:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800280a:	4b3b      	ldr	r3, [pc, #236]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002812:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002816:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800281a:	fa92 f2a2 	rbit	r2, r2
 800281e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002822:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002826:	fab2 f282 	clz	r2, r2
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	f042 0220 	orr.w	r2, r2, #32
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	f002 021f 	and.w	r2, r2, #31
 8002836:	2101      	movs	r1, #1
 8002838:	fa01 f202 	lsl.w	r2, r1, r2
 800283c:	4013      	ands	r3, r2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0ab      	beq.n	800279a <HAL_RCC_OscConfig+0x19a>
 8002842:	e05c      	b.n	80028fe <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002844:	f7ff fb5e 	bl	8001f04 <HAL_GetTick>
 8002848:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800284c:	e00a      	b.n	8002864 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800284e:	f7ff fb59 	bl	8001f04 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b64      	cmp	r3, #100	; 0x64
 800285c:	d902      	bls.n	8002864 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	f000 bdcf 	b.w	8003402 <HAL_RCC_OscConfig+0xe02>
 8002864:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002868:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002870:	fa93 f3a3 	rbit	r3, r3
 8002874:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002878:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800287c:	fab3 f383 	clz	r3, r3
 8002880:	b2db      	uxtb	r3, r3
 8002882:	095b      	lsrs	r3, r3, #5
 8002884:	b2db      	uxtb	r3, r3
 8002886:	f043 0301 	orr.w	r3, r3, #1
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b01      	cmp	r3, #1
 800288e:	d102      	bne.n	8002896 <HAL_RCC_OscConfig+0x296>
 8002890:	4b19      	ldr	r3, [pc, #100]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	e015      	b.n	80028c2 <HAL_RCC_OscConfig+0x2c2>
 8002896:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800289a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80028a2:	fa93 f3a3 	rbit	r3, r3
 80028a6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80028aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028ae:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80028b2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80028b6:	fa93 f3a3 	rbit	r3, r3
 80028ba:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80028be:	4b0e      	ldr	r3, [pc, #56]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 80028c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028c6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80028ca:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80028ce:	fa92 f2a2 	rbit	r2, r2
 80028d2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80028d6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80028da:	fab2 f282 	clz	r2, r2
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	f042 0220 	orr.w	r2, r2, #32
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	f002 021f 	and.w	r2, r2, #31
 80028ea:	2101      	movs	r1, #1
 80028ec:	fa01 f202 	lsl.w	r2, r1, r2
 80028f0:	4013      	ands	r3, r2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1ab      	bne.n	800284e <HAL_RCC_OscConfig+0x24e>
 80028f6:	e002      	b.n	80028fe <HAL_RCC_OscConfig+0x2fe>
 80028f8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028fe:	1d3b      	adds	r3, r7, #4
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 816f 	beq.w	8002bec <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800290e:	4bd0      	ldr	r3, [pc, #832]	; (8002c50 <HAL_RCC_OscConfig+0x650>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f003 030c 	and.w	r3, r3, #12
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00b      	beq.n	8002932 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800291a:	4bcd      	ldr	r3, [pc, #820]	; (8002c50 <HAL_RCC_OscConfig+0x650>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 030c 	and.w	r3, r3, #12
 8002922:	2b08      	cmp	r3, #8
 8002924:	d16c      	bne.n	8002a00 <HAL_RCC_OscConfig+0x400>
 8002926:	4bca      	ldr	r3, [pc, #808]	; (8002c50 <HAL_RCC_OscConfig+0x650>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d166      	bne.n	8002a00 <HAL_RCC_OscConfig+0x400>
 8002932:	2302      	movs	r3, #2
 8002934:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002938:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800293c:	fa93 f3a3 	rbit	r3, r3
 8002940:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002944:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002948:	fab3 f383 	clz	r3, r3
 800294c:	b2db      	uxtb	r3, r3
 800294e:	095b      	lsrs	r3, r3, #5
 8002950:	b2db      	uxtb	r3, r3
 8002952:	f043 0301 	orr.w	r3, r3, #1
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b01      	cmp	r3, #1
 800295a:	d102      	bne.n	8002962 <HAL_RCC_OscConfig+0x362>
 800295c:	4bbc      	ldr	r3, [pc, #752]	; (8002c50 <HAL_RCC_OscConfig+0x650>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	e013      	b.n	800298a <HAL_RCC_OscConfig+0x38a>
 8002962:	2302      	movs	r3, #2
 8002964:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002968:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800296c:	fa93 f3a3 	rbit	r3, r3
 8002970:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002974:	2302      	movs	r3, #2
 8002976:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800297a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800297e:	fa93 f3a3 	rbit	r3, r3
 8002982:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002986:	4bb2      	ldr	r3, [pc, #712]	; (8002c50 <HAL_RCC_OscConfig+0x650>)
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	2202      	movs	r2, #2
 800298c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002990:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002994:	fa92 f2a2 	rbit	r2, r2
 8002998:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800299c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80029a0:	fab2 f282 	clz	r2, r2
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	f042 0220 	orr.w	r2, r2, #32
 80029aa:	b2d2      	uxtb	r2, r2
 80029ac:	f002 021f 	and.w	r2, r2, #31
 80029b0:	2101      	movs	r1, #1
 80029b2:	fa01 f202 	lsl.w	r2, r1, r2
 80029b6:	4013      	ands	r3, r2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d007      	beq.n	80029cc <HAL_RCC_OscConfig+0x3cc>
 80029bc:	1d3b      	adds	r3, r7, #4
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d002      	beq.n	80029cc <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	f000 bd1b 	b.w	8003402 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029cc:	4ba0      	ldr	r3, [pc, #640]	; (8002c50 <HAL_RCC_OscConfig+0x650>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029d4:	1d3b      	adds	r3, r7, #4
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	21f8      	movs	r1, #248	; 0xf8
 80029dc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80029e4:	fa91 f1a1 	rbit	r1, r1
 80029e8:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80029ec:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80029f0:	fab1 f181 	clz	r1, r1
 80029f4:	b2c9      	uxtb	r1, r1
 80029f6:	408b      	lsls	r3, r1
 80029f8:	4995      	ldr	r1, [pc, #596]	; (8002c50 <HAL_RCC_OscConfig+0x650>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029fe:	e0f5      	b.n	8002bec <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a00:	1d3b      	adds	r3, r7, #4
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 8085 	beq.w	8002b16 <HAL_RCC_OscConfig+0x516>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a12:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002a16:	fa93 f3a3 	rbit	r3, r3
 8002a1a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002a1e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a22:	fab3 f383 	clz	r3, r3
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	461a      	mov	r2, r3
 8002a34:	2301      	movs	r3, #1
 8002a36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a38:	f7ff fa64 	bl	8001f04 <HAL_GetTick>
 8002a3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a40:	e00a      	b.n	8002a58 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a42:	f7ff fa5f 	bl	8001f04 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d902      	bls.n	8002a58 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	f000 bcd5 	b.w	8003402 <HAL_RCC_OscConfig+0xe02>
 8002a58:	2302      	movs	r3, #2
 8002a5a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002a62:	fa93 f3a3 	rbit	r3, r3
 8002a66:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002a6a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a6e:	fab3 f383 	clz	r3, r3
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	095b      	lsrs	r3, r3, #5
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d102      	bne.n	8002a88 <HAL_RCC_OscConfig+0x488>
 8002a82:	4b73      	ldr	r3, [pc, #460]	; (8002c50 <HAL_RCC_OscConfig+0x650>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	e013      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4b0>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002a92:	fa93 f3a3 	rbit	r3, r3
 8002a96:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002aa0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002aa4:	fa93 f3a3 	rbit	r3, r3
 8002aa8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002aac:	4b68      	ldr	r3, [pc, #416]	; (8002c50 <HAL_RCC_OscConfig+0x650>)
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002ab6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002aba:	fa92 f2a2 	rbit	r2, r2
 8002abe:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002ac2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002ac6:	fab2 f282 	clz	r2, r2
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	f042 0220 	orr.w	r2, r2, #32
 8002ad0:	b2d2      	uxtb	r2, r2
 8002ad2:	f002 021f 	and.w	r2, r2, #31
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8002adc:	4013      	ands	r3, r2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0af      	beq.n	8002a42 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae2:	4b5b      	ldr	r3, [pc, #364]	; (8002c50 <HAL_RCC_OscConfig+0x650>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aea:	1d3b      	adds	r3, r7, #4
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	21f8      	movs	r1, #248	; 0xf8
 8002af2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002afa:	fa91 f1a1 	rbit	r1, r1
 8002afe:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002b02:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002b06:	fab1 f181 	clz	r1, r1
 8002b0a:	b2c9      	uxtb	r1, r1
 8002b0c:	408b      	lsls	r3, r1
 8002b0e:	4950      	ldr	r1, [pc, #320]	; (8002c50 <HAL_RCC_OscConfig+0x650>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	600b      	str	r3, [r1, #0]
 8002b14:	e06a      	b.n	8002bec <HAL_RCC_OscConfig+0x5ec>
 8002b16:	2301      	movs	r3, #1
 8002b18:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002b20:	fa93 f3a3 	rbit	r3, r3
 8002b24:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002b28:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b2c:	fab3 f383 	clz	r3, r3
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b36:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	2300      	movs	r3, #0
 8002b40:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b42:	f7ff f9df 	bl	8001f04 <HAL_GetTick>
 8002b46:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b4a:	e00a      	b.n	8002b62 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b4c:	f7ff f9da 	bl	8001f04 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d902      	bls.n	8002b62 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	f000 bc50 	b.w	8003402 <HAL_RCC_OscConfig+0xe02>
 8002b62:	2302      	movs	r3, #2
 8002b64:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b68:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002b6c:	fa93 f3a3 	rbit	r3, r3
 8002b70:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002b74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b78:	fab3 f383 	clz	r3, r3
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	095b      	lsrs	r3, r3, #5
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	f043 0301 	orr.w	r3, r3, #1
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d102      	bne.n	8002b92 <HAL_RCC_OscConfig+0x592>
 8002b8c:	4b30      	ldr	r3, [pc, #192]	; (8002c50 <HAL_RCC_OscConfig+0x650>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	e013      	b.n	8002bba <HAL_RCC_OscConfig+0x5ba>
 8002b92:	2302      	movs	r3, #2
 8002b94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002b9c:	fa93 f3a3 	rbit	r3, r3
 8002ba0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002baa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002bae:	fa93 f3a3 	rbit	r3, r3
 8002bb2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002bb6:	4b26      	ldr	r3, [pc, #152]	; (8002c50 <HAL_RCC_OscConfig+0x650>)
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bba:	2202      	movs	r2, #2
 8002bbc:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002bc0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002bc4:	fa92 f2a2 	rbit	r2, r2
 8002bc8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002bcc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002bd0:	fab2 f282 	clz	r2, r2
 8002bd4:	b2d2      	uxtb	r2, r2
 8002bd6:	f042 0220 	orr.w	r2, r2, #32
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	f002 021f 	and.w	r2, r2, #31
 8002be0:	2101      	movs	r1, #1
 8002be2:	fa01 f202 	lsl.w	r2, r1, r2
 8002be6:	4013      	ands	r3, r2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1af      	bne.n	8002b4c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bec:	1d3b      	adds	r3, r7, #4
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 80da 	beq.w	8002db0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bfc:	1d3b      	adds	r3, r7, #4
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d069      	beq.n	8002cda <HAL_RCC_OscConfig+0x6da>
 8002c06:	2301      	movs	r3, #1
 8002c08:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002c10:	fa93 f3a3 	rbit	r3, r3
 8002c14:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c1c:	fab3 f383 	clz	r3, r3
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	461a      	mov	r2, r3
 8002c24:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <HAL_RCC_OscConfig+0x654>)
 8002c26:	4413      	add	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c30:	f7ff f968 	bl	8001f04 <HAL_GetTick>
 8002c34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c38:	e00e      	b.n	8002c58 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c3a:	f7ff f963 	bl	8001f04 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d906      	bls.n	8002c58 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e3d9      	b.n	8003402 <HAL_RCC_OscConfig+0xe02>
 8002c4e:	bf00      	nop
 8002c50:	40021000 	.word	0x40021000
 8002c54:	10908120 	.word	0x10908120
 8002c58:	2302      	movs	r3, #2
 8002c5a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002c62:	fa93 f3a3 	rbit	r3, r3
 8002c66:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002c6a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002c6e:	2202      	movs	r2, #2
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	fa93 f2a3 	rbit	r2, r3
 8002c7c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002c86:	2202      	movs	r2, #2
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	fa93 f2a3 	rbit	r2, r3
 8002c94:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002c98:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c9a:	4ba5      	ldr	r3, [pc, #660]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002c9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c9e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002ca2:	2102      	movs	r1, #2
 8002ca4:	6019      	str	r1, [r3, #0]
 8002ca6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	fa93 f1a3 	rbit	r1, r3
 8002cb0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002cb4:	6019      	str	r1, [r3, #0]
  return result;
 8002cb6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	fab3 f383 	clz	r3, r3
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	f003 031f 	and.w	r3, r3, #31
 8002ccc:	2101      	movs	r1, #1
 8002cce:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0b0      	beq.n	8002c3a <HAL_RCC_OscConfig+0x63a>
 8002cd8:	e06a      	b.n	8002db0 <HAL_RCC_OscConfig+0x7b0>
 8002cda:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002cde:	2201      	movs	r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	fa93 f2a3 	rbit	r2, r3
 8002cec:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002cf0:	601a      	str	r2, [r3, #0]
  return result;
 8002cf2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002cf6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cf8:	fab3 f383 	clz	r3, r3
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	461a      	mov	r2, r3
 8002d00:	4b8c      	ldr	r3, [pc, #560]	; (8002f34 <HAL_RCC_OscConfig+0x934>)
 8002d02:	4413      	add	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	461a      	mov	r2, r3
 8002d08:	2300      	movs	r3, #0
 8002d0a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d0c:	f7ff f8fa 	bl	8001f04 <HAL_GetTick>
 8002d10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d14:	e009      	b.n	8002d2a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d16:	f7ff f8f5 	bl	8001f04 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e36b      	b.n	8003402 <HAL_RCC_OscConfig+0xe02>
 8002d2a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002d2e:	2202      	movs	r2, #2
 8002d30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d32:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	fa93 f2a3 	rbit	r2, r3
 8002d3c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002d46:	2202      	movs	r2, #2
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	fa93 f2a3 	rbit	r2, r3
 8002d54:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002d5e:	2202      	movs	r2, #2
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	fa93 f2a3 	rbit	r2, r3
 8002d6c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d70:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d72:	4b6f      	ldr	r3, [pc, #444]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002d74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d76:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002d7a:	2102      	movs	r1, #2
 8002d7c:	6019      	str	r1, [r3, #0]
 8002d7e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	fa93 f1a3 	rbit	r1, r3
 8002d88:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002d8c:	6019      	str	r1, [r3, #0]
  return result;
 8002d8e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	fab3 f383 	clz	r3, r3
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	f003 031f 	and.w	r3, r3, #31
 8002da4:	2101      	movs	r1, #1
 8002da6:	fa01 f303 	lsl.w	r3, r1, r3
 8002daa:	4013      	ands	r3, r2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1b2      	bne.n	8002d16 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002db0:	1d3b      	adds	r3, r7, #4
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 8158 	beq.w	8003070 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc6:	4b5a      	ldr	r3, [pc, #360]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d112      	bne.n	8002df8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd2:	4b57      	ldr	r3, [pc, #348]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	4a56      	ldr	r2, [pc, #344]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ddc:	61d3      	str	r3, [r2, #28]
 8002dde:	4b54      	ldr	r3, [pc, #336]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002de6:	f107 0308 	add.w	r3, r7, #8
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	f107 0308 	add.w	r3, r7, #8
 8002df0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002df2:	2301      	movs	r3, #1
 8002df4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df8:	4b4f      	ldr	r3, [pc, #316]	; (8002f38 <HAL_RCC_OscConfig+0x938>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d11a      	bne.n	8002e3a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e04:	4b4c      	ldr	r3, [pc, #304]	; (8002f38 <HAL_RCC_OscConfig+0x938>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a4b      	ldr	r2, [pc, #300]	; (8002f38 <HAL_RCC_OscConfig+0x938>)
 8002e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e0e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e10:	f7ff f878 	bl	8001f04 <HAL_GetTick>
 8002e14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e18:	e009      	b.n	8002e2e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e1a:	f7ff f873 	bl	8001f04 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b64      	cmp	r3, #100	; 0x64
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e2e9      	b.n	8003402 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2e:	4b42      	ldr	r3, [pc, #264]	; (8002f38 <HAL_RCC_OscConfig+0x938>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0ef      	beq.n	8002e1a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e3a:	1d3b      	adds	r3, r7, #4
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d106      	bne.n	8002e52 <HAL_RCC_OscConfig+0x852>
 8002e44:	4b3a      	ldr	r3, [pc, #232]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	4a39      	ldr	r2, [pc, #228]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	6213      	str	r3, [r2, #32]
 8002e50:	e02f      	b.n	8002eb2 <HAL_RCC_OscConfig+0x8b2>
 8002e52:	1d3b      	adds	r3, r7, #4
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10c      	bne.n	8002e76 <HAL_RCC_OscConfig+0x876>
 8002e5c:	4b34      	ldr	r3, [pc, #208]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	4a33      	ldr	r2, [pc, #204]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002e62:	f023 0301 	bic.w	r3, r3, #1
 8002e66:	6213      	str	r3, [r2, #32]
 8002e68:	4b31      	ldr	r3, [pc, #196]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	4a30      	ldr	r2, [pc, #192]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002e6e:	f023 0304 	bic.w	r3, r3, #4
 8002e72:	6213      	str	r3, [r2, #32]
 8002e74:	e01d      	b.n	8002eb2 <HAL_RCC_OscConfig+0x8b2>
 8002e76:	1d3b      	adds	r3, r7, #4
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	2b05      	cmp	r3, #5
 8002e7e:	d10c      	bne.n	8002e9a <HAL_RCC_OscConfig+0x89a>
 8002e80:	4b2b      	ldr	r3, [pc, #172]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	4a2a      	ldr	r2, [pc, #168]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002e86:	f043 0304 	orr.w	r3, r3, #4
 8002e8a:	6213      	str	r3, [r2, #32]
 8002e8c:	4b28      	ldr	r3, [pc, #160]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	4a27      	ldr	r2, [pc, #156]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002e92:	f043 0301 	orr.w	r3, r3, #1
 8002e96:	6213      	str	r3, [r2, #32]
 8002e98:	e00b      	b.n	8002eb2 <HAL_RCC_OscConfig+0x8b2>
 8002e9a:	4b25      	ldr	r3, [pc, #148]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	4a24      	ldr	r2, [pc, #144]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002ea0:	f023 0301 	bic.w	r3, r3, #1
 8002ea4:	6213      	str	r3, [r2, #32]
 8002ea6:	4b22      	ldr	r3, [pc, #136]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	4a21      	ldr	r2, [pc, #132]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002eac:	f023 0304 	bic.w	r3, r3, #4
 8002eb0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eb2:	1d3b      	adds	r3, r7, #4
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d06b      	beq.n	8002f94 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ebc:	f7ff f822 	bl	8001f04 <HAL_GetTick>
 8002ec0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec4:	e00b      	b.n	8002ede <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ec6:	f7ff f81d 	bl	8001f04 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e291      	b.n	8003402 <HAL_RCC_OscConfig+0xe02>
 8002ede:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	fa93 f2a3 	rbit	r2, r3
 8002ef0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002efa:	2202      	movs	r2, #2
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	fa93 f2a3 	rbit	r2, r3
 8002f08:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002f0c:	601a      	str	r2, [r3, #0]
  return result;
 8002f0e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002f12:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f14:	fab3 f383 	clz	r3, r3
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	095b      	lsrs	r3, r3, #5
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	f043 0302 	orr.w	r3, r3, #2
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d109      	bne.n	8002f3c <HAL_RCC_OscConfig+0x93c>
 8002f28:	4b01      	ldr	r3, [pc, #4]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	e014      	b.n	8002f58 <HAL_RCC_OscConfig+0x958>
 8002f2e:	bf00      	nop
 8002f30:	40021000 	.word	0x40021000
 8002f34:	10908120 	.word	0x10908120
 8002f38:	40007000 	.word	0x40007000
 8002f3c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002f40:	2202      	movs	r2, #2
 8002f42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f44:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	fa93 f2a3 	rbit	r2, r3
 8002f4e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	4bbb      	ldr	r3, [pc, #748]	; (8003244 <HAL_RCC_OscConfig+0xc44>)
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002f5c:	2102      	movs	r1, #2
 8002f5e:	6011      	str	r1, [r2, #0]
 8002f60:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002f64:	6812      	ldr	r2, [r2, #0]
 8002f66:	fa92 f1a2 	rbit	r1, r2
 8002f6a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002f6e:	6011      	str	r1, [r2, #0]
  return result;
 8002f70:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002f74:	6812      	ldr	r2, [r2, #0]
 8002f76:	fab2 f282 	clz	r2, r2
 8002f7a:	b2d2      	uxtb	r2, r2
 8002f7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f80:	b2d2      	uxtb	r2, r2
 8002f82:	f002 021f 	and.w	r2, r2, #31
 8002f86:	2101      	movs	r1, #1
 8002f88:	fa01 f202 	lsl.w	r2, r1, r2
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d099      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x8c6>
 8002f92:	e063      	b.n	800305c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f94:	f7fe ffb6 	bl	8001f04 <HAL_GetTick>
 8002f98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f9c:	e00b      	b.n	8002fb6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f9e:	f7fe ffb1 	bl	8001f04 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e225      	b.n	8003402 <HAL_RCC_OscConfig+0xe02>
 8002fb6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002fba:	2202      	movs	r2, #2
 8002fbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	fa93 f2a3 	rbit	r2, r3
 8002fc8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	fa93 f2a3 	rbit	r2, r3
 8002fe0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002fe4:	601a      	str	r2, [r3, #0]
  return result;
 8002fe6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002fea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fec:	fab3 f383 	clz	r3, r3
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	095b      	lsrs	r3, r3, #5
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	f043 0302 	orr.w	r3, r3, #2
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d102      	bne.n	8003006 <HAL_RCC_OscConfig+0xa06>
 8003000:	4b90      	ldr	r3, [pc, #576]	; (8003244 <HAL_RCC_OscConfig+0xc44>)
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	e00d      	b.n	8003022 <HAL_RCC_OscConfig+0xa22>
 8003006:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800300a:	2202      	movs	r2, #2
 800300c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	fa93 f2a3 	rbit	r2, r3
 8003018:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	4b89      	ldr	r3, [pc, #548]	; (8003244 <HAL_RCC_OscConfig+0xc44>)
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003026:	2102      	movs	r1, #2
 8003028:	6011      	str	r1, [r2, #0]
 800302a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800302e:	6812      	ldr	r2, [r2, #0]
 8003030:	fa92 f1a2 	rbit	r1, r2
 8003034:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003038:	6011      	str	r1, [r2, #0]
  return result;
 800303a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800303e:	6812      	ldr	r2, [r2, #0]
 8003040:	fab2 f282 	clz	r2, r2
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	f002 021f 	and.w	r2, r2, #31
 8003050:	2101      	movs	r1, #1
 8003052:	fa01 f202 	lsl.w	r2, r1, r2
 8003056:	4013      	ands	r3, r2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1a0      	bne.n	8002f9e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800305c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003060:	2b01      	cmp	r3, #1
 8003062:	d105      	bne.n	8003070 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003064:	4b77      	ldr	r3, [pc, #476]	; (8003244 <HAL_RCC_OscConfig+0xc44>)
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	4a76      	ldr	r2, [pc, #472]	; (8003244 <HAL_RCC_OscConfig+0xc44>)
 800306a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800306e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003070:	1d3b      	adds	r3, r7, #4
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 81c2 	beq.w	8003400 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800307c:	4b71      	ldr	r3, [pc, #452]	; (8003244 <HAL_RCC_OscConfig+0xc44>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f003 030c 	and.w	r3, r3, #12
 8003084:	2b08      	cmp	r3, #8
 8003086:	f000 819c 	beq.w	80033c2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800308a:	1d3b      	adds	r3, r7, #4
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	69db      	ldr	r3, [r3, #28]
 8003090:	2b02      	cmp	r3, #2
 8003092:	f040 8114 	bne.w	80032be <HAL_RCC_OscConfig+0xcbe>
 8003096:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800309a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800309e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	fa93 f2a3 	rbit	r2, r3
 80030aa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80030ae:	601a      	str	r2, [r3, #0]
  return result;
 80030b0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80030b4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b6:	fab3 f383 	clz	r3, r3
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	461a      	mov	r2, r3
 80030c8:	2300      	movs	r3, #0
 80030ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030cc:	f7fe ff1a 	bl	8001f04 <HAL_GetTick>
 80030d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030d4:	e009      	b.n	80030ea <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d6:	f7fe ff15 	bl	8001f04 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e18b      	b.n	8003402 <HAL_RCC_OscConfig+0xe02>
 80030ea:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80030ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	fa93 f2a3 	rbit	r2, r3
 80030fe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003102:	601a      	str	r2, [r3, #0]
  return result;
 8003104:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003108:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800310a:	fab3 f383 	clz	r3, r3
 800310e:	b2db      	uxtb	r3, r3
 8003110:	095b      	lsrs	r3, r3, #5
 8003112:	b2db      	uxtb	r3, r3
 8003114:	f043 0301 	orr.w	r3, r3, #1
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b01      	cmp	r3, #1
 800311c:	d102      	bne.n	8003124 <HAL_RCC_OscConfig+0xb24>
 800311e:	4b49      	ldr	r3, [pc, #292]	; (8003244 <HAL_RCC_OscConfig+0xc44>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	e01b      	b.n	800315c <HAL_RCC_OscConfig+0xb5c>
 8003124:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003128:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800312c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	fa93 f2a3 	rbit	r2, r3
 8003138:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003142:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	fa93 f2a3 	rbit	r2, r3
 8003152:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	4b3a      	ldr	r3, [pc, #232]	; (8003244 <HAL_RCC_OscConfig+0xc44>)
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003160:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003164:	6011      	str	r1, [r2, #0]
 8003166:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800316a:	6812      	ldr	r2, [r2, #0]
 800316c:	fa92 f1a2 	rbit	r1, r2
 8003170:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003174:	6011      	str	r1, [r2, #0]
  return result;
 8003176:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	fab2 f282 	clz	r2, r2
 8003180:	b2d2      	uxtb	r2, r2
 8003182:	f042 0220 	orr.w	r2, r2, #32
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	f002 021f 	and.w	r2, r2, #31
 800318c:	2101      	movs	r1, #1
 800318e:	fa01 f202 	lsl.w	r2, r1, r2
 8003192:	4013      	ands	r3, r2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d19e      	bne.n	80030d6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003198:	4b2a      	ldr	r3, [pc, #168]	; (8003244 <HAL_RCC_OscConfig+0xc44>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80031a0:	1d3b      	adds	r3, r7, #4
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80031a6:	1d3b      	adds	r3, r7, #4
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	430b      	orrs	r3, r1
 80031ae:	4925      	ldr	r1, [pc, #148]	; (8003244 <HAL_RCC_OscConfig+0xc44>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	604b      	str	r3, [r1, #4]
 80031b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80031b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	fa93 f2a3 	rbit	r2, r3
 80031c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80031cc:	601a      	str	r2, [r3, #0]
  return result;
 80031ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80031d2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031d4:	fab3 f383 	clz	r3, r3
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031de:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	461a      	mov	r2, r3
 80031e6:	2301      	movs	r3, #1
 80031e8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ea:	f7fe fe8b 	bl	8001f04 <HAL_GetTick>
 80031ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031f2:	e009      	b.n	8003208 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031f4:	f7fe fe86 	bl	8001f04 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e0fc      	b.n	8003402 <HAL_RCC_OscConfig+0xe02>
 8003208:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800320c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003210:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003212:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	fa93 f2a3 	rbit	r2, r3
 800321c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003220:	601a      	str	r2, [r3, #0]
  return result;
 8003222:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003226:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003228:	fab3 f383 	clz	r3, r3
 800322c:	b2db      	uxtb	r3, r3
 800322e:	095b      	lsrs	r3, r3, #5
 8003230:	b2db      	uxtb	r3, r3
 8003232:	f043 0301 	orr.w	r3, r3, #1
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b01      	cmp	r3, #1
 800323a:	d105      	bne.n	8003248 <HAL_RCC_OscConfig+0xc48>
 800323c:	4b01      	ldr	r3, [pc, #4]	; (8003244 <HAL_RCC_OscConfig+0xc44>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	e01e      	b.n	8003280 <HAL_RCC_OscConfig+0xc80>
 8003242:	bf00      	nop
 8003244:	40021000 	.word	0x40021000
 8003248:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800324c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003250:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003252:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	fa93 f2a3 	rbit	r2, r3
 800325c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003266:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	fa93 f2a3 	rbit	r2, r3
 8003276:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	4b63      	ldr	r3, [pc, #396]	; (800340c <HAL_RCC_OscConfig+0xe0c>)
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003284:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003288:	6011      	str	r1, [r2, #0]
 800328a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800328e:	6812      	ldr	r2, [r2, #0]
 8003290:	fa92 f1a2 	rbit	r1, r2
 8003294:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003298:	6011      	str	r1, [r2, #0]
  return result;
 800329a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800329e:	6812      	ldr	r2, [r2, #0]
 80032a0:	fab2 f282 	clz	r2, r2
 80032a4:	b2d2      	uxtb	r2, r2
 80032a6:	f042 0220 	orr.w	r2, r2, #32
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	f002 021f 	and.w	r2, r2, #31
 80032b0:	2101      	movs	r1, #1
 80032b2:	fa01 f202 	lsl.w	r2, r1, r2
 80032b6:	4013      	ands	r3, r2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d09b      	beq.n	80031f4 <HAL_RCC_OscConfig+0xbf4>
 80032bc:	e0a0      	b.n	8003400 <HAL_RCC_OscConfig+0xe00>
 80032be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80032c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	fa93 f2a3 	rbit	r2, r3
 80032d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032d6:	601a      	str	r2, [r3, #0]
  return result;
 80032d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032dc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032de:	fab3 f383 	clz	r3, r3
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	461a      	mov	r2, r3
 80032f0:	2300      	movs	r3, #0
 80032f2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f4:	f7fe fe06 	bl	8001f04 <HAL_GetTick>
 80032f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032fc:	e009      	b.n	8003312 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032fe:	f7fe fe01 	bl	8001f04 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e077      	b.n	8003402 <HAL_RCC_OscConfig+0xe02>
 8003312:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003316:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800331a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	fa93 f2a3 	rbit	r2, r3
 8003326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800332a:	601a      	str	r2, [r3, #0]
  return result;
 800332c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003330:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003332:	fab3 f383 	clz	r3, r3
 8003336:	b2db      	uxtb	r3, r3
 8003338:	095b      	lsrs	r3, r3, #5
 800333a:	b2db      	uxtb	r3, r3
 800333c:	f043 0301 	orr.w	r3, r3, #1
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b01      	cmp	r3, #1
 8003344:	d102      	bne.n	800334c <HAL_RCC_OscConfig+0xd4c>
 8003346:	4b31      	ldr	r3, [pc, #196]	; (800340c <HAL_RCC_OscConfig+0xe0c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	e01b      	b.n	8003384 <HAL_RCC_OscConfig+0xd84>
 800334c:	f107 0320 	add.w	r3, r7, #32
 8003350:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003354:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003356:	f107 0320 	add.w	r3, r7, #32
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	fa93 f2a3 	rbit	r2, r3
 8003360:	f107 031c 	add.w	r3, r7, #28
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	f107 0318 	add.w	r3, r7, #24
 800336a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	f107 0318 	add.w	r3, r7, #24
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	fa93 f2a3 	rbit	r2, r3
 800337a:	f107 0314 	add.w	r3, r7, #20
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	4b22      	ldr	r3, [pc, #136]	; (800340c <HAL_RCC_OscConfig+0xe0c>)
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	f107 0210 	add.w	r2, r7, #16
 8003388:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800338c:	6011      	str	r1, [r2, #0]
 800338e:	f107 0210 	add.w	r2, r7, #16
 8003392:	6812      	ldr	r2, [r2, #0]
 8003394:	fa92 f1a2 	rbit	r1, r2
 8003398:	f107 020c 	add.w	r2, r7, #12
 800339c:	6011      	str	r1, [r2, #0]
  return result;
 800339e:	f107 020c 	add.w	r2, r7, #12
 80033a2:	6812      	ldr	r2, [r2, #0]
 80033a4:	fab2 f282 	clz	r2, r2
 80033a8:	b2d2      	uxtb	r2, r2
 80033aa:	f042 0220 	orr.w	r2, r2, #32
 80033ae:	b2d2      	uxtb	r2, r2
 80033b0:	f002 021f 	and.w	r2, r2, #31
 80033b4:	2101      	movs	r1, #1
 80033b6:	fa01 f202 	lsl.w	r2, r1, r2
 80033ba:	4013      	ands	r3, r2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d19e      	bne.n	80032fe <HAL_RCC_OscConfig+0xcfe>
 80033c0:	e01e      	b.n	8003400 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033c2:	1d3b      	adds	r3, r7, #4
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d101      	bne.n	80033d0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e018      	b.n	8003402 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033d0:	4b0e      	ldr	r3, [pc, #56]	; (800340c <HAL_RCC_OscConfig+0xe0c>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033d8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80033dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033e0:	1d3b      	adds	r3, r7, #4
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d108      	bne.n	80033fc <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80033ea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80033ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033f2:	1d3b      	adds	r3, r7, #4
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d001      	beq.n	8003400 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e000      	b.n	8003402 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40021000 	.word	0x40021000

08003410 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b09e      	sub	sp, #120	; 0x78
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800341a:	2300      	movs	r3, #0
 800341c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e162      	b.n	80036ee <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003428:	4b90      	ldr	r3, [pc, #576]	; (800366c <HAL_RCC_ClockConfig+0x25c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	429a      	cmp	r2, r3
 8003434:	d910      	bls.n	8003458 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003436:	4b8d      	ldr	r3, [pc, #564]	; (800366c <HAL_RCC_ClockConfig+0x25c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f023 0207 	bic.w	r2, r3, #7
 800343e:	498b      	ldr	r1, [pc, #556]	; (800366c <HAL_RCC_ClockConfig+0x25c>)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	4313      	orrs	r3, r2
 8003444:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003446:	4b89      	ldr	r3, [pc, #548]	; (800366c <HAL_RCC_ClockConfig+0x25c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	429a      	cmp	r2, r3
 8003452:	d001      	beq.n	8003458 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e14a      	b.n	80036ee <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d008      	beq.n	8003476 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003464:	4b82      	ldr	r3, [pc, #520]	; (8003670 <HAL_RCC_ClockConfig+0x260>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	497f      	ldr	r1, [pc, #508]	; (8003670 <HAL_RCC_ClockConfig+0x260>)
 8003472:	4313      	orrs	r3, r2
 8003474:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 80dc 	beq.w	800363c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d13c      	bne.n	8003506 <HAL_RCC_ClockConfig+0xf6>
 800348c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003490:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003492:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003494:	fa93 f3a3 	rbit	r3, r3
 8003498:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800349a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800349c:	fab3 f383 	clz	r3, r3
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	f043 0301 	orr.w	r3, r3, #1
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d102      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xa6>
 80034b0:	4b6f      	ldr	r3, [pc, #444]	; (8003670 <HAL_RCC_ClockConfig+0x260>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	e00f      	b.n	80034d6 <HAL_RCC_ClockConfig+0xc6>
 80034b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034be:	fa93 f3a3 	rbit	r3, r3
 80034c2:	667b      	str	r3, [r7, #100]	; 0x64
 80034c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034c8:	663b      	str	r3, [r7, #96]	; 0x60
 80034ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034cc:	fa93 f3a3 	rbit	r3, r3
 80034d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034d2:	4b67      	ldr	r3, [pc, #412]	; (8003670 <HAL_RCC_ClockConfig+0x260>)
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034da:	65ba      	str	r2, [r7, #88]	; 0x58
 80034dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034de:	fa92 f2a2 	rbit	r2, r2
 80034e2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80034e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80034e6:	fab2 f282 	clz	r2, r2
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	f042 0220 	orr.w	r2, r2, #32
 80034f0:	b2d2      	uxtb	r2, r2
 80034f2:	f002 021f 	and.w	r2, r2, #31
 80034f6:	2101      	movs	r1, #1
 80034f8:	fa01 f202 	lsl.w	r2, r1, r2
 80034fc:	4013      	ands	r3, r2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d17b      	bne.n	80035fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e0f3      	b.n	80036ee <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b02      	cmp	r3, #2
 800350c:	d13c      	bne.n	8003588 <HAL_RCC_ClockConfig+0x178>
 800350e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003512:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003516:	fa93 f3a3 	rbit	r3, r3
 800351a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800351c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800351e:	fab3 f383 	clz	r3, r3
 8003522:	b2db      	uxtb	r3, r3
 8003524:	095b      	lsrs	r3, r3, #5
 8003526:	b2db      	uxtb	r3, r3
 8003528:	f043 0301 	orr.w	r3, r3, #1
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b01      	cmp	r3, #1
 8003530:	d102      	bne.n	8003538 <HAL_RCC_ClockConfig+0x128>
 8003532:	4b4f      	ldr	r3, [pc, #316]	; (8003670 <HAL_RCC_ClockConfig+0x260>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	e00f      	b.n	8003558 <HAL_RCC_ClockConfig+0x148>
 8003538:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800353c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003540:	fa93 f3a3 	rbit	r3, r3
 8003544:	647b      	str	r3, [r7, #68]	; 0x44
 8003546:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800354a:	643b      	str	r3, [r7, #64]	; 0x40
 800354c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800354e:	fa93 f3a3 	rbit	r3, r3
 8003552:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003554:	4b46      	ldr	r3, [pc, #280]	; (8003670 <HAL_RCC_ClockConfig+0x260>)
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800355c:	63ba      	str	r2, [r7, #56]	; 0x38
 800355e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003560:	fa92 f2a2 	rbit	r2, r2
 8003564:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003566:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003568:	fab2 f282 	clz	r2, r2
 800356c:	b2d2      	uxtb	r2, r2
 800356e:	f042 0220 	orr.w	r2, r2, #32
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	f002 021f 	and.w	r2, r2, #31
 8003578:	2101      	movs	r1, #1
 800357a:	fa01 f202 	lsl.w	r2, r1, r2
 800357e:	4013      	ands	r3, r2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d13a      	bne.n	80035fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e0b2      	b.n	80036ee <HAL_RCC_ClockConfig+0x2de>
 8003588:	2302      	movs	r3, #2
 800358a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358e:	fa93 f3a3 	rbit	r3, r3
 8003592:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003596:	fab3 f383 	clz	r3, r3
 800359a:	b2db      	uxtb	r3, r3
 800359c:	095b      	lsrs	r3, r3, #5
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	f043 0301 	orr.w	r3, r3, #1
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d102      	bne.n	80035b0 <HAL_RCC_ClockConfig+0x1a0>
 80035aa:	4b31      	ldr	r3, [pc, #196]	; (8003670 <HAL_RCC_ClockConfig+0x260>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	e00d      	b.n	80035cc <HAL_RCC_ClockConfig+0x1bc>
 80035b0:	2302      	movs	r3, #2
 80035b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b6:	fa93 f3a3 	rbit	r3, r3
 80035ba:	627b      	str	r3, [r7, #36]	; 0x24
 80035bc:	2302      	movs	r3, #2
 80035be:	623b      	str	r3, [r7, #32]
 80035c0:	6a3b      	ldr	r3, [r7, #32]
 80035c2:	fa93 f3a3 	rbit	r3, r3
 80035c6:	61fb      	str	r3, [r7, #28]
 80035c8:	4b29      	ldr	r3, [pc, #164]	; (8003670 <HAL_RCC_ClockConfig+0x260>)
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	2202      	movs	r2, #2
 80035ce:	61ba      	str	r2, [r7, #24]
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	fa92 f2a2 	rbit	r2, r2
 80035d6:	617a      	str	r2, [r7, #20]
  return result;
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	fab2 f282 	clz	r2, r2
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	f042 0220 	orr.w	r2, r2, #32
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	f002 021f 	and.w	r2, r2, #31
 80035ea:	2101      	movs	r1, #1
 80035ec:	fa01 f202 	lsl.w	r2, r1, r2
 80035f0:	4013      	ands	r3, r2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e079      	b.n	80036ee <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035fa:	4b1d      	ldr	r3, [pc, #116]	; (8003670 <HAL_RCC_ClockConfig+0x260>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f023 0203 	bic.w	r2, r3, #3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	491a      	ldr	r1, [pc, #104]	; (8003670 <HAL_RCC_ClockConfig+0x260>)
 8003608:	4313      	orrs	r3, r2
 800360a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800360c:	f7fe fc7a 	bl	8001f04 <HAL_GetTick>
 8003610:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003612:	e00a      	b.n	800362a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003614:	f7fe fc76 	bl	8001f04 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003622:	4293      	cmp	r3, r2
 8003624:	d901      	bls.n	800362a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e061      	b.n	80036ee <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800362a:	4b11      	ldr	r3, [pc, #68]	; (8003670 <HAL_RCC_ClockConfig+0x260>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f003 020c 	and.w	r2, r3, #12
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	429a      	cmp	r2, r3
 800363a:	d1eb      	bne.n	8003614 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800363c:	4b0b      	ldr	r3, [pc, #44]	; (800366c <HAL_RCC_ClockConfig+0x25c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	429a      	cmp	r2, r3
 8003648:	d214      	bcs.n	8003674 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364a:	4b08      	ldr	r3, [pc, #32]	; (800366c <HAL_RCC_ClockConfig+0x25c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f023 0207 	bic.w	r2, r3, #7
 8003652:	4906      	ldr	r1, [pc, #24]	; (800366c <HAL_RCC_ClockConfig+0x25c>)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	4313      	orrs	r3, r2
 8003658:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800365a:	4b04      	ldr	r3, [pc, #16]	; (800366c <HAL_RCC_ClockConfig+0x25c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	429a      	cmp	r2, r3
 8003666:	d005      	beq.n	8003674 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e040      	b.n	80036ee <HAL_RCC_ClockConfig+0x2de>
 800366c:	40022000 	.word	0x40022000
 8003670:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	d008      	beq.n	8003692 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003680:	4b1d      	ldr	r3, [pc, #116]	; (80036f8 <HAL_RCC_ClockConfig+0x2e8>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	491a      	ldr	r1, [pc, #104]	; (80036f8 <HAL_RCC_ClockConfig+0x2e8>)
 800368e:	4313      	orrs	r3, r2
 8003690:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0308 	and.w	r3, r3, #8
 800369a:	2b00      	cmp	r3, #0
 800369c:	d009      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800369e:	4b16      	ldr	r3, [pc, #88]	; (80036f8 <HAL_RCC_ClockConfig+0x2e8>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	4912      	ldr	r1, [pc, #72]	; (80036f8 <HAL_RCC_ClockConfig+0x2e8>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80036b2:	f000 f829 	bl	8003708 <HAL_RCC_GetSysClockFreq>
 80036b6:	4601      	mov	r1, r0
 80036b8:	4b0f      	ldr	r3, [pc, #60]	; (80036f8 <HAL_RCC_ClockConfig+0x2e8>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036c0:	22f0      	movs	r2, #240	; 0xf0
 80036c2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	fa92 f2a2 	rbit	r2, r2
 80036ca:	60fa      	str	r2, [r7, #12]
  return result;
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	fab2 f282 	clz	r2, r2
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	40d3      	lsrs	r3, r2
 80036d6:	4a09      	ldr	r2, [pc, #36]	; (80036fc <HAL_RCC_ClockConfig+0x2ec>)
 80036d8:	5cd3      	ldrb	r3, [r2, r3]
 80036da:	fa21 f303 	lsr.w	r3, r1, r3
 80036de:	4a08      	ldr	r2, [pc, #32]	; (8003700 <HAL_RCC_ClockConfig+0x2f0>)
 80036e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80036e2:	4b08      	ldr	r3, [pc, #32]	; (8003704 <HAL_RCC_ClockConfig+0x2f4>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fe fbc8 	bl	8001e7c <HAL_InitTick>
  
  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3778      	adds	r7, #120	; 0x78
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40021000 	.word	0x40021000
 80036fc:	08005ed8 	.word	0x08005ed8
 8003700:	20000000 	.word	0x20000000
 8003704:	20000004 	.word	0x20000004

08003708 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003708:	b480      	push	{r7}
 800370a:	b08b      	sub	sp, #44	; 0x2c
 800370c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800370e:	2300      	movs	r3, #0
 8003710:	61fb      	str	r3, [r7, #28]
 8003712:	2300      	movs	r3, #0
 8003714:	61bb      	str	r3, [r7, #24]
 8003716:	2300      	movs	r3, #0
 8003718:	627b      	str	r3, [r7, #36]	; 0x24
 800371a:	2300      	movs	r3, #0
 800371c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800371e:	2300      	movs	r3, #0
 8003720:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003722:	4b29      	ldr	r3, [pc, #164]	; (80037c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	f003 030c 	and.w	r3, r3, #12
 800372e:	2b04      	cmp	r3, #4
 8003730:	d002      	beq.n	8003738 <HAL_RCC_GetSysClockFreq+0x30>
 8003732:	2b08      	cmp	r3, #8
 8003734:	d003      	beq.n	800373e <HAL_RCC_GetSysClockFreq+0x36>
 8003736:	e03c      	b.n	80037b2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003738:	4b24      	ldr	r3, [pc, #144]	; (80037cc <HAL_RCC_GetSysClockFreq+0xc4>)
 800373a:	623b      	str	r3, [r7, #32]
      break;
 800373c:	e03c      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003744:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003748:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	fa92 f2a2 	rbit	r2, r2
 8003750:	607a      	str	r2, [r7, #4]
  return result;
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	fab2 f282 	clz	r2, r2
 8003758:	b2d2      	uxtb	r2, r2
 800375a:	40d3      	lsrs	r3, r2
 800375c:	4a1c      	ldr	r2, [pc, #112]	; (80037d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800375e:	5cd3      	ldrb	r3, [r2, r3]
 8003760:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003762:	4b19      	ldr	r3, [pc, #100]	; (80037c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	220f      	movs	r2, #15
 800376c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	fa92 f2a2 	rbit	r2, r2
 8003774:	60fa      	str	r2, [r7, #12]
  return result;
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	fab2 f282 	clz	r2, r2
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	40d3      	lsrs	r3, r2
 8003780:	4a14      	ldr	r2, [pc, #80]	; (80037d4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003782:	5cd3      	ldrb	r3, [r2, r3]
 8003784:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d008      	beq.n	80037a2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003790:	4a0e      	ldr	r2, [pc, #56]	; (80037cc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	fbb2 f2f3 	udiv	r2, r2, r3
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	fb02 f303 	mul.w	r3, r2, r3
 800379e:	627b      	str	r3, [r7, #36]	; 0x24
 80037a0:	e004      	b.n	80037ac <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	4a0c      	ldr	r2, [pc, #48]	; (80037d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80037a6:	fb02 f303 	mul.w	r3, r2, r3
 80037aa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ae:	623b      	str	r3, [r7, #32]
      break;
 80037b0:	e002      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037b2:	4b06      	ldr	r3, [pc, #24]	; (80037cc <HAL_RCC_GetSysClockFreq+0xc4>)
 80037b4:	623b      	str	r3, [r7, #32]
      break;
 80037b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037b8:	6a3b      	ldr	r3, [r7, #32]
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	372c      	adds	r7, #44	; 0x2c
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	40021000 	.word	0x40021000
 80037cc:	007a1200 	.word	0x007a1200
 80037d0:	08005ef0 	.word	0x08005ef0
 80037d4:	08005f00 	.word	0x08005f00
 80037d8:	003d0900 	.word	0x003d0900

080037dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037e0:	4b03      	ldr	r3, [pc, #12]	; (80037f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80037e2:	681b      	ldr	r3, [r3, #0]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	20000000 	.word	0x20000000

080037f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80037fa:	f7ff ffef 	bl	80037dc <HAL_RCC_GetHCLKFreq>
 80037fe:	4601      	mov	r1, r0
 8003800:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003808:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800380c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	fa92 f2a2 	rbit	r2, r2
 8003814:	603a      	str	r2, [r7, #0]
  return result;
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	fab2 f282 	clz	r2, r2
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	40d3      	lsrs	r3, r2
 8003820:	4a04      	ldr	r2, [pc, #16]	; (8003834 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003822:	5cd3      	ldrb	r3, [r2, r3]
 8003824:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003828:	4618      	mov	r0, r3
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	40021000 	.word	0x40021000
 8003834:	08005ee8 	.word	0x08005ee8

08003838 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800383e:	f7ff ffcd 	bl	80037dc <HAL_RCC_GetHCLKFreq>
 8003842:	4601      	mov	r1, r0
 8003844:	4b0b      	ldr	r3, [pc, #44]	; (8003874 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800384c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003850:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	fa92 f2a2 	rbit	r2, r2
 8003858:	603a      	str	r2, [r7, #0]
  return result;
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	fab2 f282 	clz	r2, r2
 8003860:	b2d2      	uxtb	r2, r2
 8003862:	40d3      	lsrs	r3, r2
 8003864:	4a04      	ldr	r2, [pc, #16]	; (8003878 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003866:	5cd3      	ldrb	r3, [r2, r3]
 8003868:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800386c:	4618      	mov	r0, r3
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40021000 	.word	0x40021000
 8003878:	08005ee8 	.word	0x08005ee8

0800387c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b092      	sub	sp, #72	; 0x48
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003888:	2300      	movs	r3, #0
 800388a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800388c:	2300      	movs	r3, #0
 800388e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 80cd 	beq.w	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038a0:	4b86      	ldr	r3, [pc, #536]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038a2:	69db      	ldr	r3, [r3, #28]
 80038a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10e      	bne.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ac:	4b83      	ldr	r3, [pc, #524]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038ae:	69db      	ldr	r3, [r3, #28]
 80038b0:	4a82      	ldr	r2, [pc, #520]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038b6:	61d3      	str	r3, [r2, #28]
 80038b8:	4b80      	ldr	r3, [pc, #512]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c0:	60bb      	str	r3, [r7, #8]
 80038c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038c4:	2301      	movs	r3, #1
 80038c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ca:	4b7d      	ldr	r3, [pc, #500]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d118      	bne.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038d6:	4b7a      	ldr	r3, [pc, #488]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a79      	ldr	r2, [pc, #484]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80038dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038e2:	f7fe fb0f 	bl	8001f04 <HAL_GetTick>
 80038e6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e8:	e008      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ea:	f7fe fb0b 	bl	8001f04 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b64      	cmp	r3, #100	; 0x64
 80038f6:	d901      	bls.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e0db      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038fc:	4b70      	ldr	r3, [pc, #448]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003904:	2b00      	cmp	r3, #0
 8003906:	d0f0      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003908:	4b6c      	ldr	r3, [pc, #432]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003910:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003914:	2b00      	cmp	r3, #0
 8003916:	d07d      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003920:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003922:	429a      	cmp	r2, r3
 8003924:	d076      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003926:	4b65      	ldr	r3, [pc, #404]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800392e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003930:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003934:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003938:	fa93 f3a3 	rbit	r3, r3
 800393c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800393e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003940:	fab3 f383 	clz	r3, r3
 8003944:	b2db      	uxtb	r3, r3
 8003946:	461a      	mov	r2, r3
 8003948:	4b5e      	ldr	r3, [pc, #376]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800394a:	4413      	add	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	461a      	mov	r2, r3
 8003950:	2301      	movs	r3, #1
 8003952:	6013      	str	r3, [r2, #0]
 8003954:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003958:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800395c:	fa93 f3a3 	rbit	r3, r3
 8003960:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003964:	fab3 f383 	clz	r3, r3
 8003968:	b2db      	uxtb	r3, r3
 800396a:	461a      	mov	r2, r3
 800396c:	4b55      	ldr	r3, [pc, #340]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800396e:	4413      	add	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	461a      	mov	r2, r3
 8003974:	2300      	movs	r3, #0
 8003976:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003978:	4a50      	ldr	r2, [pc, #320]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800397a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800397c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800397e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b00      	cmp	r3, #0
 8003986:	d045      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003988:	f7fe fabc 	bl	8001f04 <HAL_GetTick>
 800398c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800398e:	e00a      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003990:	f7fe fab8 	bl	8001f04 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	f241 3288 	movw	r2, #5000	; 0x1388
 800399e:	4293      	cmp	r3, r2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e086      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80039a6:	2302      	movs	r3, #2
 80039a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ac:	fa93 f3a3 	rbit	r3, r3
 80039b0:	627b      	str	r3, [r7, #36]	; 0x24
 80039b2:	2302      	movs	r3, #2
 80039b4:	623b      	str	r3, [r7, #32]
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	fa93 f3a3 	rbit	r3, r3
 80039bc:	61fb      	str	r3, [r7, #28]
  return result;
 80039be:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c0:	fab3 f383 	clz	r3, r3
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	095b      	lsrs	r3, r3, #5
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	f043 0302 	orr.w	r3, r3, #2
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d102      	bne.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80039d4:	4b39      	ldr	r3, [pc, #228]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	e007      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80039da:	2302      	movs	r3, #2
 80039dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	fa93 f3a3 	rbit	r3, r3
 80039e4:	617b      	str	r3, [r7, #20]
 80039e6:	4b35      	ldr	r3, [pc, #212]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	2202      	movs	r2, #2
 80039ec:	613a      	str	r2, [r7, #16]
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	fa92 f2a2 	rbit	r2, r2
 80039f4:	60fa      	str	r2, [r7, #12]
  return result;
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	fab2 f282 	clz	r2, r2
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	f002 021f 	and.w	r2, r2, #31
 8003a08:	2101      	movs	r1, #1
 8003a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a0e:	4013      	ands	r3, r2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d0bd      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003a14:	4b29      	ldr	r3, [pc, #164]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	4926      	ldr	r1, [pc, #152]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a26:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d105      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a2e:	4b23      	ldr	r3, [pc, #140]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	4a22      	ldr	r2, [pc, #136]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a38:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d008      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a46:	4b1d      	ldr	r3, [pc, #116]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4a:	f023 0203 	bic.w	r2, r3, #3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	491a      	ldr	r1, [pc, #104]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0320 	and.w	r3, r3, #32
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d008      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a64:	4b15      	ldr	r3, [pc, #84]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a68:	f023 0210 	bic.w	r2, r3, #16
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	4912      	ldr	r1, [pc, #72]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d008      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003a82:	4b0e      	ldr	r3, [pc, #56]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a86:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	490b      	ldr	r1, [pc, #44]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d008      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003aa0:	4b06      	ldr	r3, [pc, #24]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	4903      	ldr	r1, [pc, #12]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3748      	adds	r7, #72	; 0x48
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	40007000 	.word	0x40007000
 8003ac4:	10908100 	.word	0x10908100

08003ac8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e049      	b.n	8003b6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d106      	bne.n	8003af4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7fd ff58 	bl	80019a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2202      	movs	r2, #2
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	3304      	adds	r3, #4
 8003b04:	4619      	mov	r1, r3
 8003b06:	4610      	mov	r0, r2
 8003b08:	f000 fc38 	bl	800437c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
	...

08003b78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d001      	beq.n	8003b90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e040      	b.n	8003c12 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2202      	movs	r2, #2
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0201 	orr.w	r2, r2, #1
 8003ba6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a1c      	ldr	r2, [pc, #112]	; (8003c20 <HAL_TIM_Base_Start_IT+0xa8>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d00e      	beq.n	8003bd0 <HAL_TIM_Base_Start_IT+0x58>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bba:	d009      	beq.n	8003bd0 <HAL_TIM_Base_Start_IT+0x58>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a18      	ldr	r2, [pc, #96]	; (8003c24 <HAL_TIM_Base_Start_IT+0xac>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d004      	beq.n	8003bd0 <HAL_TIM_Base_Start_IT+0x58>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a17      	ldr	r2, [pc, #92]	; (8003c28 <HAL_TIM_Base_Start_IT+0xb0>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d115      	bne.n	8003bfc <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	4b15      	ldr	r3, [pc, #84]	; (8003c2c <HAL_TIM_Base_Start_IT+0xb4>)
 8003bd8:	4013      	ands	r3, r2
 8003bda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2b06      	cmp	r3, #6
 8003be0:	d015      	beq.n	8003c0e <HAL_TIM_Base_Start_IT+0x96>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be8:	d011      	beq.n	8003c0e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f042 0201 	orr.w	r2, r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bfa:	e008      	b.n	8003c0e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0201 	orr.w	r2, r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	e000      	b.n	8003c10 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3714      	adds	r7, #20
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	40012c00 	.word	0x40012c00
 8003c24:	40000400 	.word	0x40000400
 8003c28:	40014000 	.word	0x40014000
 8003c2c:	00010007 	.word	0x00010007

08003c30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e049      	b.n	8003cd6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d106      	bne.n	8003c5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7fd fe84 	bl	8001964 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	3304      	adds	r3, #4
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	4610      	mov	r0, r2
 8003c70:	f000 fb84 	bl	800437c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
	...

08003ce0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d109      	bne.n	8003d04 <HAL_TIM_PWM_Start+0x24>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	bf14      	ite	ne
 8003cfc:	2301      	movne	r3, #1
 8003cfe:	2300      	moveq	r3, #0
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	e03c      	b.n	8003d7e <HAL_TIM_PWM_Start+0x9e>
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d109      	bne.n	8003d1e <HAL_TIM_PWM_Start+0x3e>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	bf14      	ite	ne
 8003d16:	2301      	movne	r3, #1
 8003d18:	2300      	moveq	r3, #0
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	e02f      	b.n	8003d7e <HAL_TIM_PWM_Start+0x9e>
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d109      	bne.n	8003d38 <HAL_TIM_PWM_Start+0x58>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	bf14      	ite	ne
 8003d30:	2301      	movne	r3, #1
 8003d32:	2300      	moveq	r3, #0
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	e022      	b.n	8003d7e <HAL_TIM_PWM_Start+0x9e>
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	2b0c      	cmp	r3, #12
 8003d3c:	d109      	bne.n	8003d52 <HAL_TIM_PWM_Start+0x72>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	bf14      	ite	ne
 8003d4a:	2301      	movne	r3, #1
 8003d4c:	2300      	moveq	r3, #0
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	e015      	b.n	8003d7e <HAL_TIM_PWM_Start+0x9e>
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	2b10      	cmp	r3, #16
 8003d56:	d109      	bne.n	8003d6c <HAL_TIM_PWM_Start+0x8c>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	bf14      	ite	ne
 8003d64:	2301      	movne	r3, #1
 8003d66:	2300      	moveq	r3, #0
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	e008      	b.n	8003d7e <HAL_TIM_PWM_Start+0x9e>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	bf14      	ite	ne
 8003d78:	2301      	movne	r3, #1
 8003d7a:	2300      	moveq	r3, #0
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e088      	b.n	8003e98 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d104      	bne.n	8003d96 <HAL_TIM_PWM_Start+0xb6>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2202      	movs	r2, #2
 8003d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d94:	e023      	b.n	8003dde <HAL_TIM_PWM_Start+0xfe>
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	2b04      	cmp	r3, #4
 8003d9a:	d104      	bne.n	8003da6 <HAL_TIM_PWM_Start+0xc6>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003da4:	e01b      	b.n	8003dde <HAL_TIM_PWM_Start+0xfe>
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	2b08      	cmp	r3, #8
 8003daa:	d104      	bne.n	8003db6 <HAL_TIM_PWM_Start+0xd6>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003db4:	e013      	b.n	8003dde <HAL_TIM_PWM_Start+0xfe>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b0c      	cmp	r3, #12
 8003dba:	d104      	bne.n	8003dc6 <HAL_TIM_PWM_Start+0xe6>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003dc4:	e00b      	b.n	8003dde <HAL_TIM_PWM_Start+0xfe>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b10      	cmp	r3, #16
 8003dca:	d104      	bne.n	8003dd6 <HAL_TIM_PWM_Start+0xf6>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2202      	movs	r2, #2
 8003dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dd4:	e003      	b.n	8003dde <HAL_TIM_PWM_Start+0xfe>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2202      	movs	r2, #2
 8003dda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2201      	movs	r2, #1
 8003de4:	6839      	ldr	r1, [r7, #0]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 fde6 	bl	80049b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a2b      	ldr	r2, [pc, #172]	; (8003ea0 <HAL_TIM_PWM_Start+0x1c0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d00e      	beq.n	8003e14 <HAL_TIM_PWM_Start+0x134>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a2a      	ldr	r2, [pc, #168]	; (8003ea4 <HAL_TIM_PWM_Start+0x1c4>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d009      	beq.n	8003e14 <HAL_TIM_PWM_Start+0x134>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a28      	ldr	r2, [pc, #160]	; (8003ea8 <HAL_TIM_PWM_Start+0x1c8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d004      	beq.n	8003e14 <HAL_TIM_PWM_Start+0x134>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a27      	ldr	r2, [pc, #156]	; (8003eac <HAL_TIM_PWM_Start+0x1cc>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d101      	bne.n	8003e18 <HAL_TIM_PWM_Start+0x138>
 8003e14:	2301      	movs	r3, #1
 8003e16:	e000      	b.n	8003e1a <HAL_TIM_PWM_Start+0x13a>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d007      	beq.n	8003e2e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a1b      	ldr	r2, [pc, #108]	; (8003ea0 <HAL_TIM_PWM_Start+0x1c0>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d00e      	beq.n	8003e56 <HAL_TIM_PWM_Start+0x176>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e40:	d009      	beq.n	8003e56 <HAL_TIM_PWM_Start+0x176>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a1a      	ldr	r2, [pc, #104]	; (8003eb0 <HAL_TIM_PWM_Start+0x1d0>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d004      	beq.n	8003e56 <HAL_TIM_PWM_Start+0x176>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a14      	ldr	r2, [pc, #80]	; (8003ea4 <HAL_TIM_PWM_Start+0x1c4>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d115      	bne.n	8003e82 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689a      	ldr	r2, [r3, #8]
 8003e5c:	4b15      	ldr	r3, [pc, #84]	; (8003eb4 <HAL_TIM_PWM_Start+0x1d4>)
 8003e5e:	4013      	ands	r3, r2
 8003e60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2b06      	cmp	r3, #6
 8003e66:	d015      	beq.n	8003e94 <HAL_TIM_PWM_Start+0x1b4>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e6e:	d011      	beq.n	8003e94 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0201 	orr.w	r2, r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e80:	e008      	b.n	8003e94 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f042 0201 	orr.w	r2, r2, #1
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	e000      	b.n	8003e96 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e94:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40012c00 	.word	0x40012c00
 8003ea4:	40014000 	.word	0x40014000
 8003ea8:	40014400 	.word	0x40014400
 8003eac:	40014800 	.word	0x40014800
 8003eb0:	40000400 	.word	0x40000400
 8003eb4:	00010007 	.word	0x00010007

08003eb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d122      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d11b      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f06f 0202 	mvn.w	r2, #2
 8003ee4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	f003 0303 	and.w	r3, r3, #3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 fa20 	bl	8004340 <HAL_TIM_IC_CaptureCallback>
 8003f00:	e005      	b.n	8003f0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 fa12 	bl	800432c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 fa23 	bl	8004354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	f003 0304 	and.w	r3, r3, #4
 8003f1e:	2b04      	cmp	r3, #4
 8003f20:	d122      	bne.n	8003f68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	d11b      	bne.n	8003f68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f06f 0204 	mvn.w	r2, #4
 8003f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f9f6 	bl	8004340 <HAL_TIM_IC_CaptureCallback>
 8003f54:	e005      	b.n	8003f62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f9e8 	bl	800432c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f9f9 	bl	8004354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	f003 0308 	and.w	r3, r3, #8
 8003f72:	2b08      	cmp	r3, #8
 8003f74:	d122      	bne.n	8003fbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f003 0308 	and.w	r3, r3, #8
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d11b      	bne.n	8003fbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f06f 0208 	mvn.w	r2, #8
 8003f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2204      	movs	r2, #4
 8003f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	f003 0303 	and.w	r3, r3, #3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f9cc 	bl	8004340 <HAL_TIM_IC_CaptureCallback>
 8003fa8:	e005      	b.n	8003fb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f9be 	bl	800432c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f9cf 	bl	8004354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	f003 0310 	and.w	r3, r3, #16
 8003fc6:	2b10      	cmp	r3, #16
 8003fc8:	d122      	bne.n	8004010 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	f003 0310 	and.w	r3, r3, #16
 8003fd4:	2b10      	cmp	r3, #16
 8003fd6:	d11b      	bne.n	8004010 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f06f 0210 	mvn.w	r2, #16
 8003fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2208      	movs	r2, #8
 8003fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f9a2 	bl	8004340 <HAL_TIM_IC_CaptureCallback>
 8003ffc:	e005      	b.n	800400a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f994 	bl	800432c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f9a5 	bl	8004354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b01      	cmp	r3, #1
 800401c:	d10e      	bne.n	800403c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b01      	cmp	r3, #1
 800402a:	d107      	bne.n	800403c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f06f 0201 	mvn.w	r2, #1
 8004034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f96e 	bl	8004318 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004046:	2b80      	cmp	r3, #128	; 0x80
 8004048:	d10e      	bne.n	8004068 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004054:	2b80      	cmp	r3, #128	; 0x80
 8004056:	d107      	bne.n	8004068 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 fe64 	bl	8004d30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004076:	d10e      	bne.n	8004096 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004082:	2b80      	cmp	r3, #128	; 0x80
 8004084:	d107      	bne.n	8004096 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800408e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 fe57 	bl	8004d44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a0:	2b40      	cmp	r3, #64	; 0x40
 80040a2:	d10e      	bne.n	80040c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ae:	2b40      	cmp	r3, #64	; 0x40
 80040b0:	d107      	bne.n	80040c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f953 	bl	8004368 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	f003 0320 	and.w	r3, r3, #32
 80040cc:	2b20      	cmp	r3, #32
 80040ce:	d10e      	bne.n	80040ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	f003 0320 	and.w	r3, r3, #32
 80040da:	2b20      	cmp	r3, #32
 80040dc:	d107      	bne.n	80040ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f06f 0220 	mvn.w	r2, #32
 80040e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 fe17 	bl	8004d1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040ee:	bf00      	nop
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800410a:	2b01      	cmp	r3, #1
 800410c:	d101      	bne.n	8004112 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800410e:	2302      	movs	r3, #2
 8004110:	e0fd      	b.n	800430e <HAL_TIM_PWM_ConfigChannel+0x216>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b14      	cmp	r3, #20
 800411e:	f200 80f0 	bhi.w	8004302 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004122:	a201      	add	r2, pc, #4	; (adr r2, 8004128 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004128:	0800417d 	.word	0x0800417d
 800412c:	08004303 	.word	0x08004303
 8004130:	08004303 	.word	0x08004303
 8004134:	08004303 	.word	0x08004303
 8004138:	080041bd 	.word	0x080041bd
 800413c:	08004303 	.word	0x08004303
 8004140:	08004303 	.word	0x08004303
 8004144:	08004303 	.word	0x08004303
 8004148:	080041ff 	.word	0x080041ff
 800414c:	08004303 	.word	0x08004303
 8004150:	08004303 	.word	0x08004303
 8004154:	08004303 	.word	0x08004303
 8004158:	0800423f 	.word	0x0800423f
 800415c:	08004303 	.word	0x08004303
 8004160:	08004303 	.word	0x08004303
 8004164:	08004303 	.word	0x08004303
 8004168:	08004281 	.word	0x08004281
 800416c:	08004303 	.word	0x08004303
 8004170:	08004303 	.word	0x08004303
 8004174:	08004303 	.word	0x08004303
 8004178:	080042c1 	.word	0x080042c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68b9      	ldr	r1, [r7, #8]
 8004182:	4618      	mov	r0, r3
 8004184:	f000 f972 	bl	800446c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	699a      	ldr	r2, [r3, #24]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f042 0208 	orr.w	r2, r2, #8
 8004196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	699a      	ldr	r2, [r3, #24]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f022 0204 	bic.w	r2, r2, #4
 80041a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6999      	ldr	r1, [r3, #24]
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	691a      	ldr	r2, [r3, #16]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	619a      	str	r2, [r3, #24]
      break;
 80041ba:	e0a3      	b.n	8004304 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68b9      	ldr	r1, [r7, #8]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 f9d8 	bl	8004578 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	699a      	ldr	r2, [r3, #24]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	699a      	ldr	r2, [r3, #24]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6999      	ldr	r1, [r3, #24]
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	021a      	lsls	r2, r3, #8
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	619a      	str	r2, [r3, #24]
      break;
 80041fc:	e082      	b.n	8004304 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68b9      	ldr	r1, [r7, #8]
 8004204:	4618      	mov	r0, r3
 8004206:	f000 fa37 	bl	8004678 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	69da      	ldr	r2, [r3, #28]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f042 0208 	orr.w	r2, r2, #8
 8004218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	69da      	ldr	r2, [r3, #28]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 0204 	bic.w	r2, r2, #4
 8004228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	69d9      	ldr	r1, [r3, #28]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	691a      	ldr	r2, [r3, #16]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	61da      	str	r2, [r3, #28]
      break;
 800423c:	e062      	b.n	8004304 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68b9      	ldr	r1, [r7, #8]
 8004244:	4618      	mov	r0, r3
 8004246:	f000 fa95 	bl	8004774 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	69da      	ldr	r2, [r3, #28]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	69da      	ldr	r2, [r3, #28]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	69d9      	ldr	r1, [r3, #28]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	021a      	lsls	r2, r3, #8
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	61da      	str	r2, [r3, #28]
      break;
 800427e:	e041      	b.n	8004304 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68b9      	ldr	r1, [r7, #8]
 8004286:	4618      	mov	r0, r3
 8004288:	f000 fad8 	bl	800483c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f042 0208 	orr.w	r2, r2, #8
 800429a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 0204 	bic.w	r2, r2, #4
 80042aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	691a      	ldr	r2, [r3, #16]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80042be:	e021      	b.n	8004304 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68b9      	ldr	r1, [r7, #8]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 fb16 	bl	80048f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	021a      	lsls	r2, r3, #8
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004300:	e000      	b.n	8004304 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8004302:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop

08004318 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a32      	ldr	r2, [pc, #200]	; (8004458 <TIM_Base_SetConfig+0xdc>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d007      	beq.n	80043a4 <TIM_Base_SetConfig+0x28>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800439a:	d003      	beq.n	80043a4 <TIM_Base_SetConfig+0x28>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a2f      	ldr	r2, [pc, #188]	; (800445c <TIM_Base_SetConfig+0xe0>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d108      	bne.n	80043b6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a27      	ldr	r2, [pc, #156]	; (8004458 <TIM_Base_SetConfig+0xdc>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d013      	beq.n	80043e6 <TIM_Base_SetConfig+0x6a>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c4:	d00f      	beq.n	80043e6 <TIM_Base_SetConfig+0x6a>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a24      	ldr	r2, [pc, #144]	; (800445c <TIM_Base_SetConfig+0xe0>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d00b      	beq.n	80043e6 <TIM_Base_SetConfig+0x6a>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a23      	ldr	r2, [pc, #140]	; (8004460 <TIM_Base_SetConfig+0xe4>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d007      	beq.n	80043e6 <TIM_Base_SetConfig+0x6a>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a22      	ldr	r2, [pc, #136]	; (8004464 <TIM_Base_SetConfig+0xe8>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d003      	beq.n	80043e6 <TIM_Base_SetConfig+0x6a>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a21      	ldr	r2, [pc, #132]	; (8004468 <TIM_Base_SetConfig+0xec>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d108      	bne.n	80043f8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	4313      	orrs	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a0e      	ldr	r2, [pc, #56]	; (8004458 <TIM_Base_SetConfig+0xdc>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d00b      	beq.n	800443c <TIM_Base_SetConfig+0xc0>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a0e      	ldr	r2, [pc, #56]	; (8004460 <TIM_Base_SetConfig+0xe4>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d007      	beq.n	800443c <TIM_Base_SetConfig+0xc0>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a0d      	ldr	r2, [pc, #52]	; (8004464 <TIM_Base_SetConfig+0xe8>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d003      	beq.n	800443c <TIM_Base_SetConfig+0xc0>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a0c      	ldr	r2, [pc, #48]	; (8004468 <TIM_Base_SetConfig+0xec>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d103      	bne.n	8004444 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	691a      	ldr	r2, [r3, #16]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	615a      	str	r2, [r3, #20]
}
 800444a:	bf00      	nop
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	40012c00 	.word	0x40012c00
 800445c:	40000400 	.word	0x40000400
 8004460:	40014000 	.word	0x40014000
 8004464:	40014400 	.word	0x40014400
 8004468:	40014800 	.word	0x40014800

0800446c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800446c:	b480      	push	{r7}
 800446e:	b087      	sub	sp, #28
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	f023 0201 	bic.w	r2, r3, #1
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800449a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800449e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f023 0303 	bic.w	r3, r3, #3
 80044a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	f023 0302 	bic.w	r3, r3, #2
 80044b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a28      	ldr	r2, [pc, #160]	; (8004568 <TIM_OC1_SetConfig+0xfc>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d00b      	beq.n	80044e4 <TIM_OC1_SetConfig+0x78>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a27      	ldr	r2, [pc, #156]	; (800456c <TIM_OC1_SetConfig+0x100>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d007      	beq.n	80044e4 <TIM_OC1_SetConfig+0x78>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a26      	ldr	r2, [pc, #152]	; (8004570 <TIM_OC1_SetConfig+0x104>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d003      	beq.n	80044e4 <TIM_OC1_SetConfig+0x78>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a25      	ldr	r2, [pc, #148]	; (8004574 <TIM_OC1_SetConfig+0x108>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d10c      	bne.n	80044fe <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f023 0308 	bic.w	r3, r3, #8
 80044ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f023 0304 	bic.w	r3, r3, #4
 80044fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a19      	ldr	r2, [pc, #100]	; (8004568 <TIM_OC1_SetConfig+0xfc>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d00b      	beq.n	800451e <TIM_OC1_SetConfig+0xb2>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a18      	ldr	r2, [pc, #96]	; (800456c <TIM_OC1_SetConfig+0x100>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d007      	beq.n	800451e <TIM_OC1_SetConfig+0xb2>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a17      	ldr	r2, [pc, #92]	; (8004570 <TIM_OC1_SetConfig+0x104>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d003      	beq.n	800451e <TIM_OC1_SetConfig+0xb2>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a16      	ldr	r2, [pc, #88]	; (8004574 <TIM_OC1_SetConfig+0x108>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d111      	bne.n	8004542 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004524:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800452c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	4313      	orrs	r3, r2
 8004536:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	4313      	orrs	r3, r2
 8004540:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	621a      	str	r2, [r3, #32]
}
 800455c:	bf00      	nop
 800455e:	371c      	adds	r7, #28
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	40012c00 	.word	0x40012c00
 800456c:	40014000 	.word	0x40014000
 8004570:	40014400 	.word	0x40014400
 8004574:	40014800 	.word	0x40014800

08004578 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004578:	b480      	push	{r7}
 800457a:	b087      	sub	sp, #28
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	f023 0210 	bic.w	r2, r3, #16
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	021b      	lsls	r3, r3, #8
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	4313      	orrs	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f023 0320 	bic.w	r3, r3, #32
 80045c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	011b      	lsls	r3, r3, #4
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a24      	ldr	r2, [pc, #144]	; (8004668 <TIM_OC2_SetConfig+0xf0>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d10d      	bne.n	80045f8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	011b      	lsls	r3, r3, #4
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a1b      	ldr	r2, [pc, #108]	; (8004668 <TIM_OC2_SetConfig+0xf0>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d00b      	beq.n	8004618 <TIM_OC2_SetConfig+0xa0>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a1a      	ldr	r2, [pc, #104]	; (800466c <TIM_OC2_SetConfig+0xf4>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d007      	beq.n	8004618 <TIM_OC2_SetConfig+0xa0>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a19      	ldr	r2, [pc, #100]	; (8004670 <TIM_OC2_SetConfig+0xf8>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d003      	beq.n	8004618 <TIM_OC2_SetConfig+0xa0>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a18      	ldr	r2, [pc, #96]	; (8004674 <TIM_OC2_SetConfig+0xfc>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d113      	bne.n	8004640 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800461e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004626:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	4313      	orrs	r3, r2
 8004632:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	4313      	orrs	r3, r2
 800463e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	621a      	str	r2, [r3, #32]
}
 800465a:	bf00      	nop
 800465c:	371c      	adds	r7, #28
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	40012c00 	.word	0x40012c00
 800466c:	40014000 	.word	0x40014000
 8004670:	40014400 	.word	0x40014400
 8004674:	40014800 	.word	0x40014800

08004678 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004678:	b480      	push	{r7}
 800467a:	b087      	sub	sp, #28
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f023 0303 	bic.w	r3, r3, #3
 80046b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	021b      	lsls	r3, r3, #8
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a23      	ldr	r2, [pc, #140]	; (8004764 <TIM_OC3_SetConfig+0xec>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d10d      	bne.n	80046f6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	021b      	lsls	r3, r3, #8
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046f4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a1a      	ldr	r2, [pc, #104]	; (8004764 <TIM_OC3_SetConfig+0xec>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d00b      	beq.n	8004716 <TIM_OC3_SetConfig+0x9e>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a19      	ldr	r2, [pc, #100]	; (8004768 <TIM_OC3_SetConfig+0xf0>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d007      	beq.n	8004716 <TIM_OC3_SetConfig+0x9e>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a18      	ldr	r2, [pc, #96]	; (800476c <TIM_OC3_SetConfig+0xf4>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d003      	beq.n	8004716 <TIM_OC3_SetConfig+0x9e>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a17      	ldr	r2, [pc, #92]	; (8004770 <TIM_OC3_SetConfig+0xf8>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d113      	bne.n	800473e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800471c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004724:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	011b      	lsls	r3, r3, #4
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	4313      	orrs	r3, r2
 8004730:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	011b      	lsls	r3, r3, #4
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	4313      	orrs	r3, r2
 800473c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	621a      	str	r2, [r3, #32]
}
 8004758:	bf00      	nop
 800475a:	371c      	adds	r7, #28
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr
 8004764:	40012c00 	.word	0x40012c00
 8004768:	40014000 	.word	0x40014000
 800476c:	40014400 	.word	0x40014400
 8004770:	40014800 	.word	0x40014800

08004774 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004774:	b480      	push	{r7}
 8004776:	b087      	sub	sp, #28
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	021b      	lsls	r3, r3, #8
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	031b      	lsls	r3, r3, #12
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a16      	ldr	r2, [pc, #88]	; (800482c <TIM_OC4_SetConfig+0xb8>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d00b      	beq.n	80047f0 <TIM_OC4_SetConfig+0x7c>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a15      	ldr	r2, [pc, #84]	; (8004830 <TIM_OC4_SetConfig+0xbc>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d007      	beq.n	80047f0 <TIM_OC4_SetConfig+0x7c>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a14      	ldr	r2, [pc, #80]	; (8004834 <TIM_OC4_SetConfig+0xc0>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d003      	beq.n	80047f0 <TIM_OC4_SetConfig+0x7c>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a13      	ldr	r2, [pc, #76]	; (8004838 <TIM_OC4_SetConfig+0xc4>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d109      	bne.n	8004804 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	019b      	lsls	r3, r3, #6
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	4313      	orrs	r3, r2
 8004802:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685a      	ldr	r2, [r3, #4]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	621a      	str	r2, [r3, #32]
}
 800481e:	bf00      	nop
 8004820:	371c      	adds	r7, #28
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	40012c00 	.word	0x40012c00
 8004830:	40014000 	.word	0x40014000
 8004834:	40014400 	.word	0x40014400
 8004838:	40014800 	.word	0x40014800

0800483c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800483c:	b480      	push	{r7}
 800483e:	b087      	sub	sp, #28
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800486a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800486e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	4313      	orrs	r3, r2
 8004878:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004880:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	041b      	lsls	r3, r3, #16
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	4313      	orrs	r3, r2
 800488c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a15      	ldr	r2, [pc, #84]	; (80048e8 <TIM_OC5_SetConfig+0xac>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d00b      	beq.n	80048ae <TIM_OC5_SetConfig+0x72>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a14      	ldr	r2, [pc, #80]	; (80048ec <TIM_OC5_SetConfig+0xb0>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d007      	beq.n	80048ae <TIM_OC5_SetConfig+0x72>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a13      	ldr	r2, [pc, #76]	; (80048f0 <TIM_OC5_SetConfig+0xb4>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d003      	beq.n	80048ae <TIM_OC5_SetConfig+0x72>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a12      	ldr	r2, [pc, #72]	; (80048f4 <TIM_OC5_SetConfig+0xb8>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d109      	bne.n	80048c2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	021b      	lsls	r3, r3, #8
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	4313      	orrs	r3, r2
 80048c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	685a      	ldr	r2, [r3, #4]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	621a      	str	r2, [r3, #32]
}
 80048dc:	bf00      	nop
 80048de:	371c      	adds	r7, #28
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	40012c00 	.word	0x40012c00
 80048ec:	40014000 	.word	0x40014000
 80048f0:	40014400 	.word	0x40014400
 80048f4:	40014800 	.word	0x40014800

080048f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b087      	sub	sp, #28
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800492a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	021b      	lsls	r3, r3, #8
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	4313      	orrs	r3, r2
 8004936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800493e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	051b      	lsls	r3, r3, #20
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	4313      	orrs	r3, r2
 800494a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a16      	ldr	r2, [pc, #88]	; (80049a8 <TIM_OC6_SetConfig+0xb0>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d00b      	beq.n	800496c <TIM_OC6_SetConfig+0x74>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a15      	ldr	r2, [pc, #84]	; (80049ac <TIM_OC6_SetConfig+0xb4>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d007      	beq.n	800496c <TIM_OC6_SetConfig+0x74>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a14      	ldr	r2, [pc, #80]	; (80049b0 <TIM_OC6_SetConfig+0xb8>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d003      	beq.n	800496c <TIM_OC6_SetConfig+0x74>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a13      	ldr	r2, [pc, #76]	; (80049b4 <TIM_OC6_SetConfig+0xbc>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d109      	bne.n	8004980 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004972:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	029b      	lsls	r3, r3, #10
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	4313      	orrs	r3, r2
 800497e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	621a      	str	r2, [r3, #32]
}
 800499a:	bf00      	nop
 800499c:	371c      	adds	r7, #28
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	40012c00 	.word	0x40012c00
 80049ac:	40014000 	.word	0x40014000
 80049b0:	40014400 	.word	0x40014400
 80049b4:	40014800 	.word	0x40014800

080049b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b087      	sub	sp, #28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	f003 031f 	and.w	r3, r3, #31
 80049ca:	2201      	movs	r2, #1
 80049cc:	fa02 f303 	lsl.w	r3, r2, r3
 80049d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6a1a      	ldr	r2, [r3, #32]
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	43db      	mvns	r3, r3
 80049da:	401a      	ands	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6a1a      	ldr	r2, [r3, #32]
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	f003 031f 	and.w	r3, r3, #31
 80049ea:	6879      	ldr	r1, [r7, #4]
 80049ec:	fa01 f303 	lsl.w	r3, r1, r3
 80049f0:	431a      	orrs	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	621a      	str	r2, [r3, #32]
}
 80049f6:	bf00      	nop
 80049f8:	371c      	adds	r7, #28
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
	...

08004a04 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d109      	bne.n	8004a28 <HAL_TIMEx_PWMN_Start+0x24>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	bf14      	ite	ne
 8004a20:	2301      	movne	r3, #1
 8004a22:	2300      	moveq	r3, #0
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	e022      	b.n	8004a6e <HAL_TIMEx_PWMN_Start+0x6a>
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	2b04      	cmp	r3, #4
 8004a2c:	d109      	bne.n	8004a42 <HAL_TIMEx_PWMN_Start+0x3e>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	bf14      	ite	ne
 8004a3a:	2301      	movne	r3, #1
 8004a3c:	2300      	moveq	r3, #0
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	e015      	b.n	8004a6e <HAL_TIMEx_PWMN_Start+0x6a>
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d109      	bne.n	8004a5c <HAL_TIMEx_PWMN_Start+0x58>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	bf14      	ite	ne
 8004a54:	2301      	movne	r3, #1
 8004a56:	2300      	moveq	r3, #0
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	e008      	b.n	8004a6e <HAL_TIMEx_PWMN_Start+0x6a>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	bf14      	ite	ne
 8004a68:	2301      	movne	r3, #1
 8004a6a:	2300      	moveq	r3, #0
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e05f      	b.n	8004b36 <HAL_TIMEx_PWMN_Start+0x132>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d104      	bne.n	8004a86 <HAL_TIMEx_PWMN_Start+0x82>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2202      	movs	r2, #2
 8004a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a84:	e013      	b.n	8004aae <HAL_TIMEx_PWMN_Start+0xaa>
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2b04      	cmp	r3, #4
 8004a8a:	d104      	bne.n	8004a96 <HAL_TIMEx_PWMN_Start+0x92>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a94:	e00b      	b.n	8004aae <HAL_TIMEx_PWMN_Start+0xaa>
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d104      	bne.n	8004aa6 <HAL_TIMEx_PWMN_Start+0xa2>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004aa4:	e003      	b.n	8004aae <HAL_TIMEx_PWMN_Start+0xaa>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2202      	movs	r2, #2
 8004aaa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2204      	movs	r2, #4
 8004ab4:	6839      	ldr	r1, [r7, #0]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 f94e 	bl	8004d58 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004aca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a1b      	ldr	r2, [pc, #108]	; (8004b40 <HAL_TIMEx_PWMN_Start+0x13c>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d00e      	beq.n	8004af4 <HAL_TIMEx_PWMN_Start+0xf0>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ade:	d009      	beq.n	8004af4 <HAL_TIMEx_PWMN_Start+0xf0>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a17      	ldr	r2, [pc, #92]	; (8004b44 <HAL_TIMEx_PWMN_Start+0x140>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d004      	beq.n	8004af4 <HAL_TIMEx_PWMN_Start+0xf0>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a16      	ldr	r2, [pc, #88]	; (8004b48 <HAL_TIMEx_PWMN_Start+0x144>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d115      	bne.n	8004b20 <HAL_TIMEx_PWMN_Start+0x11c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689a      	ldr	r2, [r3, #8]
 8004afa:	4b14      	ldr	r3, [pc, #80]	; (8004b4c <HAL_TIMEx_PWMN_Start+0x148>)
 8004afc:	4013      	ands	r3, r2
 8004afe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2b06      	cmp	r3, #6
 8004b04:	d015      	beq.n	8004b32 <HAL_TIMEx_PWMN_Start+0x12e>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b0c:	d011      	beq.n	8004b32 <HAL_TIMEx_PWMN_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f042 0201 	orr.w	r2, r2, #1
 8004b1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b1e:	e008      	b.n	8004b32 <HAL_TIMEx_PWMN_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0201 	orr.w	r2, r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	e000      	b.n	8004b34 <HAL_TIMEx_PWMN_Start+0x130>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	40012c00 	.word	0x40012c00
 8004b44:	40000400 	.word	0x40000400
 8004b48:	40014000 	.word	0x40014000
 8004b4c:	00010007 	.word	0x00010007

08004b50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d101      	bne.n	8004b68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b64:	2302      	movs	r3, #2
 8004b66:	e054      	b.n	8004c12 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2202      	movs	r2, #2
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a24      	ldr	r2, [pc, #144]	; (8004c20 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d108      	bne.n	8004ba4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b98:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004baa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a17      	ldr	r2, [pc, #92]	; (8004c20 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d00e      	beq.n	8004be6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bd0:	d009      	beq.n	8004be6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a13      	ldr	r2, [pc, #76]	; (8004c24 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d004      	beq.n	8004be6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a11      	ldr	r2, [pc, #68]	; (8004c28 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d10c      	bne.n	8004c00 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3714      	adds	r7, #20
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	40012c00 	.word	0x40012c00
 8004c24:	40000400 	.word	0x40000400
 8004c28:	40014000 	.word	0x40014000

08004c2c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004c36:	2300      	movs	r3, #0
 8004c38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d101      	bne.n	8004c48 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004c44:	2302      	movs	r3, #2
 8004c46:	e060      	b.n	8004d0a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	041b      	lsls	r3, r3, #16
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a14      	ldr	r2, [pc, #80]	; (8004d18 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d115      	bne.n	8004cf8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd6:	051b      	lsls	r3, r3, #20
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	40012c00 	.word	0x40012c00

08004d1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	f003 031f 	and.w	r3, r3, #31
 8004d6a:	2204      	movs	r2, #4
 8004d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6a1a      	ldr	r2, [r3, #32]
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	43db      	mvns	r3, r3
 8004d7a:	401a      	ands	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6a1a      	ldr	r2, [r3, #32]
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	f003 031f 	and.w	r3, r3, #31
 8004d8a:	6879      	ldr	r1, [r7, #4]
 8004d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d90:	431a      	orrs	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	621a      	str	r2, [r3, #32]
}
 8004d96:	bf00      	nop
 8004d98:	371c      	adds	r7, #28
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b082      	sub	sp, #8
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e040      	b.n	8004e36 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d106      	bne.n	8004dca <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f7fc fe8b 	bl	8001ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2224      	movs	r2, #36	; 0x24
 8004dce:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0201 	bic.w	r2, r2, #1
 8004dde:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 fa89 	bl	80052f8 <UART_SetConfig>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d101      	bne.n	8004df0 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e022      	b.n	8004e36 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d002      	beq.n	8004dfe <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 fbb3 	bl	8005564 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e0c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	689a      	ldr	r2, [r3, #8]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e1c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f042 0201 	orr.w	r2, r2, #1
 8004e2c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 fc3a 	bl	80056a8 <UART_CheckIdleState>
 8004e34:	4603      	mov	r3, r0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b084      	sub	sp, #16
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	60f8      	str	r0, [r7, #12]
 8004e46:	60b9      	str	r1, [r7, #8]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e50:	2b20      	cmp	r3, #32
 8004e52:	d12c      	bne.n	8004eae <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d002      	beq.n	8004e60 <HAL_UART_Receive_IT+0x22>
 8004e5a:	88fb      	ldrh	r3, [r7, #6]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e025      	b.n	8004eb0 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d101      	bne.n	8004e72 <HAL_UART_Receive_IT+0x34>
 8004e6e:	2302      	movs	r3, #2
 8004e70:	e01e      	b.n	8004eb0 <HAL_UART_Receive_IT+0x72>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d007      	beq.n	8004e9e <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004e9c:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004e9e:	88fb      	ldrh	r3, [r7, #6]
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	68b9      	ldr	r1, [r7, #8]
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f000 fcc5 	bl	8005834 <UART_Start_Receive_IT>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	e000      	b.n	8004eb0 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004eae:	2302      	movs	r3, #2
  }
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b088      	sub	sp, #32
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004ed8:	69fa      	ldr	r2, [r7, #28]
 8004eda:	f640 030f 	movw	r3, #2063	; 0x80f
 8004ede:	4013      	ands	r3, r2
 8004ee0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d113      	bne.n	8004f10 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	f003 0320 	and.w	r3, r3, #32
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00e      	beq.n	8004f10 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	f003 0320 	and.w	r3, r3, #32
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d009      	beq.n	8004f10 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 81cc 	beq.w	800529e <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	4798      	blx	r3
      }
      return;
 8004f0e:	e1c6      	b.n	800529e <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f000 80e3 	beq.w	80050de <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d105      	bne.n	8004f2e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	4ba5      	ldr	r3, [pc, #660]	; (80051bc <HAL_UART_IRQHandler+0x304>)
 8004f26:	4013      	ands	r3, r2
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f000 80d8 	beq.w	80050de <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d010      	beq.n	8004f5a <HAL_UART_IRQHandler+0xa2>
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00b      	beq.n	8004f5a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2201      	movs	r2, #1
 8004f48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f50:	f043 0201 	orr.w	r2, r3, #1
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d010      	beq.n	8004f86 <HAL_UART_IRQHandler+0xce>
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00b      	beq.n	8004f86 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2202      	movs	r2, #2
 8004f74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f7c:	f043 0204 	orr.w	r2, r3, #4
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	f003 0304 	and.w	r3, r3, #4
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d010      	beq.n	8004fb2 <HAL_UART_IRQHandler+0xfa>
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00b      	beq.n	8004fb2 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2204      	movs	r2, #4
 8004fa0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fa8:	f043 0202 	orr.w	r2, r3, #2
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	f003 0308 	and.w	r3, r3, #8
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d015      	beq.n	8004fe8 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	f003 0320 	and.w	r3, r3, #32
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d104      	bne.n	8004fd0 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00b      	beq.n	8004fe8 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2208      	movs	r2, #8
 8004fd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fde:	f043 0208 	orr.w	r2, r3, #8
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d011      	beq.n	8005016 <HAL_UART_IRQHandler+0x15e>
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00c      	beq.n	8005016 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005004:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800500c:	f043 0220 	orr.w	r2, r3, #32
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 8140 	beq.w	80052a2 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	f003 0320 	and.w	r3, r3, #32
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00c      	beq.n	8005046 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	f003 0320 	and.w	r3, r3, #32
 8005032:	2b00      	cmp	r3, #0
 8005034:	d007      	beq.n	8005046 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800504c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005058:	2b40      	cmp	r3, #64	; 0x40
 800505a:	d004      	beq.n	8005066 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005062:	2b00      	cmp	r3, #0
 8005064:	d031      	beq.n	80050ca <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 fc6c 	bl	8005944 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005076:	2b40      	cmp	r3, #64	; 0x40
 8005078:	d123      	bne.n	80050c2 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	689a      	ldr	r2, [r3, #8]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005088:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800508e:	2b00      	cmp	r3, #0
 8005090:	d013      	beq.n	80050ba <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005096:	4a4a      	ldr	r2, [pc, #296]	; (80051c0 <HAL_UART_IRQHandler+0x308>)
 8005098:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fd f8aa 	bl	80021f8 <HAL_DMA_Abort_IT>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d017      	beq.n	80050da <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80050b4:	4610      	mov	r0, r2
 80050b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050b8:	e00f      	b.n	80050da <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f906 	bl	80052cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050c0:	e00b      	b.n	80050da <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f902 	bl	80052cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050c8:	e007      	b.n	80050da <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f8fe 	bl	80052cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80050d8:	e0e3      	b.n	80052a2 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050da:	bf00      	nop
    return;
 80050dc:	e0e1      	b.n	80052a2 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	f040 80a7 	bne.w	8005236 <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	f003 0310 	and.w	r3, r3, #16
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f000 80a1 	beq.w	8005236 <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	f003 0310 	and.w	r3, r3, #16
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f000 809b 	beq.w	8005236 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2210      	movs	r2, #16
 8005106:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005112:	2b40      	cmp	r3, #64	; 0x40
 8005114:	d156      	bne.n	80051c4 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8005120:	893b      	ldrh	r3, [r7, #8]
 8005122:	2b00      	cmp	r3, #0
 8005124:	f000 80bf 	beq.w	80052a6 <HAL_UART_IRQHandler+0x3ee>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800512e:	893a      	ldrh	r2, [r7, #8]
 8005130:	429a      	cmp	r2, r3
 8005132:	f080 80b8 	bcs.w	80052a6 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	893a      	ldrh	r2, [r7, #8]
 800513a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	2b20      	cmp	r3, #32
 8005146:	d02a      	beq.n	800519e <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005156:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689a      	ldr	r2, [r3, #8]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 0201 	bic.w	r2, r2, #1
 8005166:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689a      	ldr	r2, [r3, #8]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005176:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2220      	movs	r2, #32
 800517c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f022 0210 	bic.w	r2, r2, #16
 8005192:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005198:	4618      	mov	r0, r3
 800519a:	f7fc fff4 	bl	8002186 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	4619      	mov	r1, r3
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f894 	bl	80052e0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80051b8:	e075      	b.n	80052a6 <HAL_UART_IRQHandler+0x3ee>
 80051ba:	bf00      	nop
 80051bc:	04000120 	.word	0x04000120
 80051c0:	080059a3 	.word	0x080059a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051dc:	b29b      	uxth	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d063      	beq.n	80052aa <HAL_UART_IRQHandler+0x3f2>
          &&(nb_rx_data > 0U) )
 80051e2:	897b      	ldrh	r3, [r7, #10]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d060      	beq.n	80052aa <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80051f6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689a      	ldr	r2, [r3, #8]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f022 0201 	bic.w	r2, r2, #1
 8005206:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2220      	movs	r2, #32
 800520c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f022 0210 	bic.w	r2, r2, #16
 8005228:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800522a:	897b      	ldrh	r3, [r7, #10]
 800522c:	4619      	mov	r1, r3
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f856 	bl	80052e0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005234:	e039      	b.n	80052aa <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00d      	beq.n	800525c <HAL_UART_IRQHandler+0x3a4>
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d008      	beq.n	800525c <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005252:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 fca7 	bl	8005ba8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800525a:	e029      	b.n	80052b0 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00d      	beq.n	8005282 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800526c:	2b00      	cmp	r3, #0
 800526e:	d008      	beq.n	8005282 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005274:	2b00      	cmp	r3, #0
 8005276:	d01a      	beq.n	80052ae <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	4798      	blx	r3
    }
    return;
 8005280:	e015      	b.n	80052ae <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005288:	2b00      	cmp	r3, #0
 800528a:	d011      	beq.n	80052b0 <HAL_UART_IRQHandler+0x3f8>
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00c      	beq.n	80052b0 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 fb99 	bl	80059ce <UART_EndTransmit_IT>
    return;
 800529c:	e008      	b.n	80052b0 <HAL_UART_IRQHandler+0x3f8>
      return;
 800529e:	bf00      	nop
 80052a0:	e006      	b.n	80052b0 <HAL_UART_IRQHandler+0x3f8>
    return;
 80052a2:	bf00      	nop
 80052a4:	e004      	b.n	80052b0 <HAL_UART_IRQHandler+0x3f8>
      return;
 80052a6:	bf00      	nop
 80052a8:	e002      	b.n	80052b0 <HAL_UART_IRQHandler+0x3f8>
      return;
 80052aa:	bf00      	nop
 80052ac:	e000      	b.n	80052b0 <HAL_UART_IRQHandler+0x3f8>
    return;
 80052ae:	bf00      	nop
  }

}
 80052b0:	3720      	adds	r7, #32
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop

080052b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	460b      	mov	r3, r1
 80052ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b088      	sub	sp, #32
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005300:	2300      	movs	r3, #0
 8005302:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	431a      	orrs	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	431a      	orrs	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	4313      	orrs	r3, r2
 800531a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	4b8a      	ldr	r3, [pc, #552]	; (800554c <UART_SetConfig+0x254>)
 8005324:	4013      	ands	r3, r2
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	6812      	ldr	r2, [r2, #0]
 800532a:	6979      	ldr	r1, [r7, #20]
 800532c:	430b      	orrs	r3, r1
 800532e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68da      	ldr	r2, [r3, #12]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	4313      	orrs	r3, r2
 8005354:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	430a      	orrs	r2, r1
 8005368:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a78      	ldr	r2, [pc, #480]	; (8005550 <UART_SetConfig+0x258>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d120      	bne.n	80053b6 <UART_SetConfig+0xbe>
 8005374:	4b77      	ldr	r3, [pc, #476]	; (8005554 <UART_SetConfig+0x25c>)
 8005376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005378:	f003 0303 	and.w	r3, r3, #3
 800537c:	2b03      	cmp	r3, #3
 800537e:	d817      	bhi.n	80053b0 <UART_SetConfig+0xb8>
 8005380:	a201      	add	r2, pc, #4	; (adr r2, 8005388 <UART_SetConfig+0x90>)
 8005382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005386:	bf00      	nop
 8005388:	08005399 	.word	0x08005399
 800538c:	080053a5 	.word	0x080053a5
 8005390:	080053ab 	.word	0x080053ab
 8005394:	0800539f 	.word	0x0800539f
 8005398:	2300      	movs	r3, #0
 800539a:	77fb      	strb	r3, [r7, #31]
 800539c:	e01d      	b.n	80053da <UART_SetConfig+0xe2>
 800539e:	2302      	movs	r3, #2
 80053a0:	77fb      	strb	r3, [r7, #31]
 80053a2:	e01a      	b.n	80053da <UART_SetConfig+0xe2>
 80053a4:	2304      	movs	r3, #4
 80053a6:	77fb      	strb	r3, [r7, #31]
 80053a8:	e017      	b.n	80053da <UART_SetConfig+0xe2>
 80053aa:	2308      	movs	r3, #8
 80053ac:	77fb      	strb	r3, [r7, #31]
 80053ae:	e014      	b.n	80053da <UART_SetConfig+0xe2>
 80053b0:	2310      	movs	r3, #16
 80053b2:	77fb      	strb	r3, [r7, #31]
 80053b4:	e011      	b.n	80053da <UART_SetConfig+0xe2>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a67      	ldr	r2, [pc, #412]	; (8005558 <UART_SetConfig+0x260>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d102      	bne.n	80053c6 <UART_SetConfig+0xce>
 80053c0:	2300      	movs	r3, #0
 80053c2:	77fb      	strb	r3, [r7, #31]
 80053c4:	e009      	b.n	80053da <UART_SetConfig+0xe2>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a64      	ldr	r2, [pc, #400]	; (800555c <UART_SetConfig+0x264>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d102      	bne.n	80053d6 <UART_SetConfig+0xde>
 80053d0:	2300      	movs	r3, #0
 80053d2:	77fb      	strb	r3, [r7, #31]
 80053d4:	e001      	b.n	80053da <UART_SetConfig+0xe2>
 80053d6:	2310      	movs	r3, #16
 80053d8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053e2:	d15b      	bne.n	800549c <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80053e4:	7ffb      	ldrb	r3, [r7, #31]
 80053e6:	2b08      	cmp	r3, #8
 80053e8:	d827      	bhi.n	800543a <UART_SetConfig+0x142>
 80053ea:	a201      	add	r2, pc, #4	; (adr r2, 80053f0 <UART_SetConfig+0xf8>)
 80053ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f0:	08005415 	.word	0x08005415
 80053f4:	0800541d 	.word	0x0800541d
 80053f8:	08005425 	.word	0x08005425
 80053fc:	0800543b 	.word	0x0800543b
 8005400:	0800542b 	.word	0x0800542b
 8005404:	0800543b 	.word	0x0800543b
 8005408:	0800543b 	.word	0x0800543b
 800540c:	0800543b 	.word	0x0800543b
 8005410:	08005433 	.word	0x08005433
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005414:	f7fe f9ee 	bl	80037f4 <HAL_RCC_GetPCLK1Freq>
 8005418:	61b8      	str	r0, [r7, #24]
        break;
 800541a:	e013      	b.n	8005444 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800541c:	f7fe fa0c 	bl	8003838 <HAL_RCC_GetPCLK2Freq>
 8005420:	61b8      	str	r0, [r7, #24]
        break;
 8005422:	e00f      	b.n	8005444 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005424:	4b4e      	ldr	r3, [pc, #312]	; (8005560 <UART_SetConfig+0x268>)
 8005426:	61bb      	str	r3, [r7, #24]
        break;
 8005428:	e00c      	b.n	8005444 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800542a:	f7fe f96d 	bl	8003708 <HAL_RCC_GetSysClockFreq>
 800542e:	61b8      	str	r0, [r7, #24]
        break;
 8005430:	e008      	b.n	8005444 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005436:	61bb      	str	r3, [r7, #24]
        break;
 8005438:	e004      	b.n	8005444 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800543a:	2300      	movs	r3, #0
 800543c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	77bb      	strb	r3, [r7, #30]
        break;
 8005442:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d074      	beq.n	8005534 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	005a      	lsls	r2, r3, #1
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	085b      	lsrs	r3, r3, #1
 8005454:	441a      	add	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	fbb2 f3f3 	udiv	r3, r2, r3
 800545e:	b29b      	uxth	r3, r3
 8005460:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	2b0f      	cmp	r3, #15
 8005466:	d916      	bls.n	8005496 <UART_SetConfig+0x19e>
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800546e:	d212      	bcs.n	8005496 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	b29b      	uxth	r3, r3
 8005474:	f023 030f 	bic.w	r3, r3, #15
 8005478:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	085b      	lsrs	r3, r3, #1
 800547e:	b29b      	uxth	r3, r3
 8005480:	f003 0307 	and.w	r3, r3, #7
 8005484:	b29a      	uxth	r2, r3
 8005486:	89fb      	ldrh	r3, [r7, #14]
 8005488:	4313      	orrs	r3, r2
 800548a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	89fa      	ldrh	r2, [r7, #14]
 8005492:	60da      	str	r2, [r3, #12]
 8005494:	e04e      	b.n	8005534 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	77bb      	strb	r3, [r7, #30]
 800549a:	e04b      	b.n	8005534 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800549c:	7ffb      	ldrb	r3, [r7, #31]
 800549e:	2b08      	cmp	r3, #8
 80054a0:	d827      	bhi.n	80054f2 <UART_SetConfig+0x1fa>
 80054a2:	a201      	add	r2, pc, #4	; (adr r2, 80054a8 <UART_SetConfig+0x1b0>)
 80054a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a8:	080054cd 	.word	0x080054cd
 80054ac:	080054d5 	.word	0x080054d5
 80054b0:	080054dd 	.word	0x080054dd
 80054b4:	080054f3 	.word	0x080054f3
 80054b8:	080054e3 	.word	0x080054e3
 80054bc:	080054f3 	.word	0x080054f3
 80054c0:	080054f3 	.word	0x080054f3
 80054c4:	080054f3 	.word	0x080054f3
 80054c8:	080054eb 	.word	0x080054eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054cc:	f7fe f992 	bl	80037f4 <HAL_RCC_GetPCLK1Freq>
 80054d0:	61b8      	str	r0, [r7, #24]
        break;
 80054d2:	e013      	b.n	80054fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054d4:	f7fe f9b0 	bl	8003838 <HAL_RCC_GetPCLK2Freq>
 80054d8:	61b8      	str	r0, [r7, #24]
        break;
 80054da:	e00f      	b.n	80054fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054dc:	4b20      	ldr	r3, [pc, #128]	; (8005560 <UART_SetConfig+0x268>)
 80054de:	61bb      	str	r3, [r7, #24]
        break;
 80054e0:	e00c      	b.n	80054fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054e2:	f7fe f911 	bl	8003708 <HAL_RCC_GetSysClockFreq>
 80054e6:	61b8      	str	r0, [r7, #24]
        break;
 80054e8:	e008      	b.n	80054fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054ee:	61bb      	str	r3, [r7, #24]
        break;
 80054f0:	e004      	b.n	80054fc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80054f2:	2300      	movs	r3, #0
 80054f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	77bb      	strb	r3, [r7, #30]
        break;
 80054fa:	bf00      	nop
    }

    if (pclk != 0U)
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d018      	beq.n	8005534 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	085a      	lsrs	r2, r3, #1
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	441a      	add	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	fbb2 f3f3 	udiv	r3, r2, r3
 8005514:	b29b      	uxth	r3, r3
 8005516:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	2b0f      	cmp	r3, #15
 800551c:	d908      	bls.n	8005530 <UART_SetConfig+0x238>
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005524:	d204      	bcs.n	8005530 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	60da      	str	r2, [r3, #12]
 800552e:	e001      	b.n	8005534 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005540:	7fbb      	ldrb	r3, [r7, #30]
}
 8005542:	4618      	mov	r0, r3
 8005544:	3720      	adds	r7, #32
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	efff69f3 	.word	0xefff69f3
 8005550:	40013800 	.word	0x40013800
 8005554:	40021000 	.word	0x40021000
 8005558:	40004400 	.word	0x40004400
 800555c:	40004800 	.word	0x40004800
 8005560:	007a1200 	.word	0x007a1200

08005564 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00a      	beq.n	800558e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	430a      	orrs	r2, r1
 800558c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00a      	beq.n	80055b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b4:	f003 0304 	and.w	r3, r3, #4
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00a      	beq.n	80055d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	430a      	orrs	r2, r1
 80055d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d6:	f003 0308 	and.w	r3, r3, #8
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00a      	beq.n	80055f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	430a      	orrs	r2, r1
 80055f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f8:	f003 0310 	and.w	r3, r3, #16
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00a      	beq.n	8005616 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	430a      	orrs	r2, r1
 8005614:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561a:	f003 0320 	and.w	r3, r3, #32
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00a      	beq.n	8005638 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	430a      	orrs	r2, r1
 8005636:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005640:	2b00      	cmp	r3, #0
 8005642:	d01a      	beq.n	800567a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	430a      	orrs	r2, r1
 8005658:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005662:	d10a      	bne.n	800567a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00a      	beq.n	800569c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	430a      	orrs	r2, r1
 800569a:	605a      	str	r2, [r3, #4]
  }
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af02      	add	r7, sp, #8
 80056ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056b8:	f7fc fc24 	bl	8001f04 <HAL_GetTick>
 80056bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0308 	and.w	r3, r3, #8
 80056c8:	2b08      	cmp	r3, #8
 80056ca:	d10e      	bne.n	80056ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f82d 	bl	800573a <UART_WaitOnFlagUntilTimeout>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d001      	beq.n	80056ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e023      	b.n	8005732 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0304 	and.w	r3, r3, #4
 80056f4:	2b04      	cmp	r3, #4
 80056f6:	d10e      	bne.n	8005716 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056fc:	9300      	str	r3, [sp, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f817 	bl	800573a <UART_WaitOnFlagUntilTimeout>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d001      	beq.n	8005716 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e00d      	b.n	8005732 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2220      	movs	r2, #32
 800571a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2220      	movs	r2, #32
 8005720:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b084      	sub	sp, #16
 800573e:	af00      	add	r7, sp, #0
 8005740:	60f8      	str	r0, [r7, #12]
 8005742:	60b9      	str	r1, [r7, #8]
 8005744:	603b      	str	r3, [r7, #0]
 8005746:	4613      	mov	r3, r2
 8005748:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800574a:	e05e      	b.n	800580a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005752:	d05a      	beq.n	800580a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005754:	f7fc fbd6 	bl	8001f04 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	429a      	cmp	r2, r3
 8005762:	d302      	bcc.n	800576a <UART_WaitOnFlagUntilTimeout+0x30>
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d11b      	bne.n	80057a2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005778:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 0201 	bic.w	r2, r2, #1
 8005788:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2220      	movs	r2, #32
 800578e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2220      	movs	r2, #32
 8005794:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e043      	b.n	800582a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0304 	and.w	r3, r3, #4
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d02c      	beq.n	800580a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057be:	d124      	bne.n	800580a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80057d8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 0201 	bic.w	r2, r2, #1
 80057e8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2220      	movs	r2, #32
 80057ee:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2220      	movs	r2, #32
 80057f4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2220      	movs	r2, #32
 80057fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e00f      	b.n	800582a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	69da      	ldr	r2, [r3, #28]
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	4013      	ands	r3, r2
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	429a      	cmp	r2, r3
 8005818:	bf0c      	ite	eq
 800581a:	2301      	moveq	r3, #1
 800581c:	2300      	movne	r3, #0
 800581e:	b2db      	uxtb	r3, r3
 8005820:	461a      	mov	r2, r3
 8005822:	79fb      	ldrb	r3, [r7, #7]
 8005824:	429a      	cmp	r2, r3
 8005826:	d091      	beq.n	800574c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
	...

08005834 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	4613      	mov	r3, r2
 8005840:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	68ba      	ldr	r2, [r7, #8]
 8005846:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	88fa      	ldrh	r2, [r7, #6]
 800584c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	88fa      	ldrh	r2, [r7, #6]
 8005854:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005866:	d10e      	bne.n	8005886 <UART_Start_Receive_IT+0x52>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d105      	bne.n	800587c <UART_Start_Receive_IT+0x48>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005876:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800587a:	e02d      	b.n	80058d8 <UART_Start_Receive_IT+0xa4>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	22ff      	movs	r2, #255	; 0xff
 8005880:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005884:	e028      	b.n	80058d8 <UART_Start_Receive_IT+0xa4>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10d      	bne.n	80058aa <UART_Start_Receive_IT+0x76>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d104      	bne.n	80058a0 <UART_Start_Receive_IT+0x6c>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	22ff      	movs	r2, #255	; 0xff
 800589a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800589e:	e01b      	b.n	80058d8 <UART_Start_Receive_IT+0xa4>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	227f      	movs	r2, #127	; 0x7f
 80058a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80058a8:	e016      	b.n	80058d8 <UART_Start_Receive_IT+0xa4>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058b2:	d10d      	bne.n	80058d0 <UART_Start_Receive_IT+0x9c>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d104      	bne.n	80058c6 <UART_Start_Receive_IT+0x92>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	227f      	movs	r2, #127	; 0x7f
 80058c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80058c4:	e008      	b.n	80058d8 <UART_Start_Receive_IT+0xa4>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	223f      	movs	r2, #63	; 0x3f
 80058ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80058ce:	e003      	b.n	80058d8 <UART_Start_Receive_IT+0xa4>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2222      	movs	r2, #34	; 0x22
 80058e4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689a      	ldr	r2, [r3, #8]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f042 0201 	orr.w	r2, r2, #1
 80058f4:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058fe:	d107      	bne.n	8005910 <UART_Start_Receive_IT+0xdc>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d103      	bne.n	8005910 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	4a0c      	ldr	r2, [pc, #48]	; (800593c <UART_Start_Receive_IT+0x108>)
 800590c:	665a      	str	r2, [r3, #100]	; 0x64
 800590e:	e002      	b.n	8005916 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	4a0b      	ldr	r2, [pc, #44]	; (8005940 <UART_Start_Receive_IT+0x10c>)
 8005914:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800592c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3714      	adds	r7, #20
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr
 800593c:	08005ad5 	.word	0x08005ad5
 8005940:	08005a01 	.word	0x08005a01

08005944 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800595a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689a      	ldr	r2, [r3, #8]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f022 0201 	bic.w	r2, r2, #1
 800596a:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005970:	2b01      	cmp	r3, #1
 8005972:	d107      	bne.n	8005984 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 0210 	bic.w	r2, r2, #16
 8005982:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2220      	movs	r2, #32
 8005988:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005996:	bf00      	nop
 8005998:	370c      	adds	r7, #12
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b084      	sub	sp, #16
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f7ff fc83 	bl	80052cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059c6:	bf00      	nop
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b082      	sub	sp, #8
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059e4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2220      	movs	r2, #32
 80059ea:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f7ff fc60 	bl	80052b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059f8:	bf00      	nop
 80059fa:	3708      	adds	r7, #8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a0e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a14:	2b22      	cmp	r3, #34	; 0x22
 8005a16:	d151      	bne.n	8005abc <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005a1e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005a20:	89bb      	ldrh	r3, [r7, #12]
 8005a22:	b2d9      	uxtb	r1, r3
 8005a24:	89fb      	ldrh	r3, [r7, #14]
 8005a26:	b2da      	uxtb	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a2c:	400a      	ands	r2, r1
 8005a2e:	b2d2      	uxtb	r2, r2
 8005a30:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a36:	1c5a      	adds	r2, r3, #1
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	3b01      	subs	r3, #1
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d138      	bne.n	8005acc <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005a68:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	689a      	ldr	r2, [r3, #8]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f022 0201 	bic.w	r2, r2, #1
 8005a78:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2220      	movs	r2, #32
 8005a7e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d10f      	bne.n	8005aae <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f022 0210 	bic.w	r2, r2, #16
 8005a9c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f7ff fc1a 	bl	80052e0 <HAL_UARTEx_RxEventCallback>
 8005aac:	e002      	b.n	8005ab4 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f7fb fc9a 	bl	80013e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005aba:	e007      	b.n	8005acc <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	699a      	ldr	r2, [r3, #24]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f042 0208 	orr.w	r2, r2, #8
 8005aca:	619a      	str	r2, [r3, #24]
}
 8005acc:	bf00      	nop
 8005ace:	3710      	adds	r7, #16
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005ae2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ae8:	2b22      	cmp	r3, #34	; 0x22
 8005aea:	d151      	bne.n	8005b90 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005af2:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af8:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005afa:	89ba      	ldrh	r2, [r7, #12]
 8005afc:	89fb      	ldrh	r3, [r7, #14]
 8005afe:	4013      	ands	r3, r2
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b0a:	1c9a      	adds	r2, r3, #2
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d138      	bne.n	8005ba0 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b3c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689a      	ldr	r2, [r3, #8]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f022 0201 	bic.w	r2, r2, #1
 8005b4c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2220      	movs	r2, #32
 8005b52:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d10f      	bne.n	8005b82 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f022 0210 	bic.w	r2, r2, #16
 8005b70:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b78:	4619      	mov	r1, r3
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f7ff fbb0 	bl	80052e0 <HAL_UARTEx_RxEventCallback>
 8005b80:	e002      	b.n	8005b88 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7fb fc30 	bl	80013e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b8e:	e007      	b.n	8005ba0 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	699a      	ldr	r2, [r3, #24]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f042 0208 	orr.w	r2, r2, #8
 8005b9e:	619a      	str	r2, [r3, #24]
}
 8005ba0:	bf00      	nop
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <_ZdlPvj>:
 8005bbc:	f000 b820 	b.w	8005c00 <_ZdlPv>

08005bc0 <__cxa_guard_acquire>:
 8005bc0:	6803      	ldr	r3, [r0, #0]
 8005bc2:	07db      	lsls	r3, r3, #31
 8005bc4:	d406      	bmi.n	8005bd4 <__cxa_guard_acquire+0x14>
 8005bc6:	7843      	ldrb	r3, [r0, #1]
 8005bc8:	b103      	cbz	r3, 8005bcc <__cxa_guard_acquire+0xc>
 8005bca:	deff      	udf	#255	; 0xff
 8005bcc:	2301      	movs	r3, #1
 8005bce:	7043      	strb	r3, [r0, #1]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	4770      	bx	lr
 8005bd4:	2000      	movs	r0, #0
 8005bd6:	4770      	bx	lr

08005bd8 <__cxa_guard_release>:
 8005bd8:	2301      	movs	r3, #1
 8005bda:	6003      	str	r3, [r0, #0]
 8005bdc:	4770      	bx	lr

08005bde <_Znwj>:
 8005bde:	2801      	cmp	r0, #1
 8005be0:	bf38      	it	cc
 8005be2:	2001      	movcc	r0, #1
 8005be4:	b510      	push	{r4, lr}
 8005be6:	4604      	mov	r4, r0
 8005be8:	4620      	mov	r0, r4
 8005bea:	f000 f845 	bl	8005c78 <malloc>
 8005bee:	b930      	cbnz	r0, 8005bfe <_Znwj+0x20>
 8005bf0:	f000 f808 	bl	8005c04 <_ZSt15get_new_handlerv>
 8005bf4:	b908      	cbnz	r0, 8005bfa <_Znwj+0x1c>
 8005bf6:	f000 f80d 	bl	8005c14 <abort>
 8005bfa:	4780      	blx	r0
 8005bfc:	e7f4      	b.n	8005be8 <_Znwj+0xa>
 8005bfe:	bd10      	pop	{r4, pc}

08005c00 <_ZdlPv>:
 8005c00:	f000 b842 	b.w	8005c88 <free>

08005c04 <_ZSt15get_new_handlerv>:
 8005c04:	4b02      	ldr	r3, [pc, #8]	; (8005c10 <_ZSt15get_new_handlerv+0xc>)
 8005c06:	6818      	ldr	r0, [r3, #0]
 8005c08:	f3bf 8f5b 	dmb	ish
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	200001ec 	.word	0x200001ec

08005c14 <abort>:
 8005c14:	b508      	push	{r3, lr}
 8005c16:	2006      	movs	r0, #6
 8005c18:	f000 f928 	bl	8005e6c <raise>
 8005c1c:	2001      	movs	r0, #1
 8005c1e:	f7fc f89b 	bl	8001d58 <_exit>
	...

08005c24 <__errno>:
 8005c24:	4b01      	ldr	r3, [pc, #4]	; (8005c2c <__errno+0x8>)
 8005c26:	6818      	ldr	r0, [r3, #0]
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	2000000c 	.word	0x2000000c

08005c30 <__libc_init_array>:
 8005c30:	b570      	push	{r4, r5, r6, lr}
 8005c32:	4d0d      	ldr	r5, [pc, #52]	; (8005c68 <__libc_init_array+0x38>)
 8005c34:	4c0d      	ldr	r4, [pc, #52]	; (8005c6c <__libc_init_array+0x3c>)
 8005c36:	1b64      	subs	r4, r4, r5
 8005c38:	10a4      	asrs	r4, r4, #2
 8005c3a:	2600      	movs	r6, #0
 8005c3c:	42a6      	cmp	r6, r4
 8005c3e:	d109      	bne.n	8005c54 <__libc_init_array+0x24>
 8005c40:	4d0b      	ldr	r5, [pc, #44]	; (8005c70 <__libc_init_array+0x40>)
 8005c42:	4c0c      	ldr	r4, [pc, #48]	; (8005c74 <__libc_init_array+0x44>)
 8005c44:	f000 f93c 	bl	8005ec0 <_init>
 8005c48:	1b64      	subs	r4, r4, r5
 8005c4a:	10a4      	asrs	r4, r4, #2
 8005c4c:	2600      	movs	r6, #0
 8005c4e:	42a6      	cmp	r6, r4
 8005c50:	d105      	bne.n	8005c5e <__libc_init_array+0x2e>
 8005c52:	bd70      	pop	{r4, r5, r6, pc}
 8005c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c58:	4798      	blx	r3
 8005c5a:	3601      	adds	r6, #1
 8005c5c:	e7ee      	b.n	8005c3c <__libc_init_array+0xc>
 8005c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c62:	4798      	blx	r3
 8005c64:	3601      	adds	r6, #1
 8005c66:	e7f2      	b.n	8005c4e <__libc_init_array+0x1e>
 8005c68:	08005f10 	.word	0x08005f10
 8005c6c:	08005f10 	.word	0x08005f10
 8005c70:	08005f10 	.word	0x08005f10
 8005c74:	08005f18 	.word	0x08005f18

08005c78 <malloc>:
 8005c78:	4b02      	ldr	r3, [pc, #8]	; (8005c84 <malloc+0xc>)
 8005c7a:	4601      	mov	r1, r0
 8005c7c:	6818      	ldr	r0, [r3, #0]
 8005c7e:	f000 b863 	b.w	8005d48 <_malloc_r>
 8005c82:	bf00      	nop
 8005c84:	2000000c 	.word	0x2000000c

08005c88 <free>:
 8005c88:	4b02      	ldr	r3, [pc, #8]	; (8005c94 <free+0xc>)
 8005c8a:	4601      	mov	r1, r0
 8005c8c:	6818      	ldr	r0, [r3, #0]
 8005c8e:	f000 b80b 	b.w	8005ca8 <_free_r>
 8005c92:	bf00      	nop
 8005c94:	2000000c 	.word	0x2000000c

08005c98 <memset>:
 8005c98:	4402      	add	r2, r0
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d100      	bne.n	8005ca2 <memset+0xa>
 8005ca0:	4770      	bx	lr
 8005ca2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ca6:	e7f9      	b.n	8005c9c <memset+0x4>

08005ca8 <_free_r>:
 8005ca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005caa:	2900      	cmp	r1, #0
 8005cac:	d048      	beq.n	8005d40 <_free_r+0x98>
 8005cae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cb2:	9001      	str	r0, [sp, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f1a1 0404 	sub.w	r4, r1, #4
 8005cba:	bfb8      	it	lt
 8005cbc:	18e4      	addlt	r4, r4, r3
 8005cbe:	f000 f8f1 	bl	8005ea4 <__malloc_lock>
 8005cc2:	4a20      	ldr	r2, [pc, #128]	; (8005d44 <_free_r+0x9c>)
 8005cc4:	9801      	ldr	r0, [sp, #4]
 8005cc6:	6813      	ldr	r3, [r2, #0]
 8005cc8:	4615      	mov	r5, r2
 8005cca:	b933      	cbnz	r3, 8005cda <_free_r+0x32>
 8005ccc:	6063      	str	r3, [r4, #4]
 8005cce:	6014      	str	r4, [r2, #0]
 8005cd0:	b003      	add	sp, #12
 8005cd2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005cd6:	f000 b8eb 	b.w	8005eb0 <__malloc_unlock>
 8005cda:	42a3      	cmp	r3, r4
 8005cdc:	d90b      	bls.n	8005cf6 <_free_r+0x4e>
 8005cde:	6821      	ldr	r1, [r4, #0]
 8005ce0:	1862      	adds	r2, r4, r1
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	bf04      	itt	eq
 8005ce6:	681a      	ldreq	r2, [r3, #0]
 8005ce8:	685b      	ldreq	r3, [r3, #4]
 8005cea:	6063      	str	r3, [r4, #4]
 8005cec:	bf04      	itt	eq
 8005cee:	1852      	addeq	r2, r2, r1
 8005cf0:	6022      	streq	r2, [r4, #0]
 8005cf2:	602c      	str	r4, [r5, #0]
 8005cf4:	e7ec      	b.n	8005cd0 <_free_r+0x28>
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	b10b      	cbz	r3, 8005d00 <_free_r+0x58>
 8005cfc:	42a3      	cmp	r3, r4
 8005cfe:	d9fa      	bls.n	8005cf6 <_free_r+0x4e>
 8005d00:	6811      	ldr	r1, [r2, #0]
 8005d02:	1855      	adds	r5, r2, r1
 8005d04:	42a5      	cmp	r5, r4
 8005d06:	d10b      	bne.n	8005d20 <_free_r+0x78>
 8005d08:	6824      	ldr	r4, [r4, #0]
 8005d0a:	4421      	add	r1, r4
 8005d0c:	1854      	adds	r4, r2, r1
 8005d0e:	42a3      	cmp	r3, r4
 8005d10:	6011      	str	r1, [r2, #0]
 8005d12:	d1dd      	bne.n	8005cd0 <_free_r+0x28>
 8005d14:	681c      	ldr	r4, [r3, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	6053      	str	r3, [r2, #4]
 8005d1a:	4421      	add	r1, r4
 8005d1c:	6011      	str	r1, [r2, #0]
 8005d1e:	e7d7      	b.n	8005cd0 <_free_r+0x28>
 8005d20:	d902      	bls.n	8005d28 <_free_r+0x80>
 8005d22:	230c      	movs	r3, #12
 8005d24:	6003      	str	r3, [r0, #0]
 8005d26:	e7d3      	b.n	8005cd0 <_free_r+0x28>
 8005d28:	6825      	ldr	r5, [r4, #0]
 8005d2a:	1961      	adds	r1, r4, r5
 8005d2c:	428b      	cmp	r3, r1
 8005d2e:	bf04      	itt	eq
 8005d30:	6819      	ldreq	r1, [r3, #0]
 8005d32:	685b      	ldreq	r3, [r3, #4]
 8005d34:	6063      	str	r3, [r4, #4]
 8005d36:	bf04      	itt	eq
 8005d38:	1949      	addeq	r1, r1, r5
 8005d3a:	6021      	streq	r1, [r4, #0]
 8005d3c:	6054      	str	r4, [r2, #4]
 8005d3e:	e7c7      	b.n	8005cd0 <_free_r+0x28>
 8005d40:	b003      	add	sp, #12
 8005d42:	bd30      	pop	{r4, r5, pc}
 8005d44:	200001f0 	.word	0x200001f0

08005d48 <_malloc_r>:
 8005d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d4a:	1ccd      	adds	r5, r1, #3
 8005d4c:	f025 0503 	bic.w	r5, r5, #3
 8005d50:	3508      	adds	r5, #8
 8005d52:	2d0c      	cmp	r5, #12
 8005d54:	bf38      	it	cc
 8005d56:	250c      	movcc	r5, #12
 8005d58:	2d00      	cmp	r5, #0
 8005d5a:	4606      	mov	r6, r0
 8005d5c:	db01      	blt.n	8005d62 <_malloc_r+0x1a>
 8005d5e:	42a9      	cmp	r1, r5
 8005d60:	d903      	bls.n	8005d6a <_malloc_r+0x22>
 8005d62:	230c      	movs	r3, #12
 8005d64:	6033      	str	r3, [r6, #0]
 8005d66:	2000      	movs	r0, #0
 8005d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d6a:	f000 f89b 	bl	8005ea4 <__malloc_lock>
 8005d6e:	4921      	ldr	r1, [pc, #132]	; (8005df4 <_malloc_r+0xac>)
 8005d70:	680a      	ldr	r2, [r1, #0]
 8005d72:	4614      	mov	r4, r2
 8005d74:	b99c      	cbnz	r4, 8005d9e <_malloc_r+0x56>
 8005d76:	4f20      	ldr	r7, [pc, #128]	; (8005df8 <_malloc_r+0xb0>)
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	b923      	cbnz	r3, 8005d86 <_malloc_r+0x3e>
 8005d7c:	4621      	mov	r1, r4
 8005d7e:	4630      	mov	r0, r6
 8005d80:	f000 f83c 	bl	8005dfc <_sbrk_r>
 8005d84:	6038      	str	r0, [r7, #0]
 8005d86:	4629      	mov	r1, r5
 8005d88:	4630      	mov	r0, r6
 8005d8a:	f000 f837 	bl	8005dfc <_sbrk_r>
 8005d8e:	1c43      	adds	r3, r0, #1
 8005d90:	d123      	bne.n	8005dda <_malloc_r+0x92>
 8005d92:	230c      	movs	r3, #12
 8005d94:	6033      	str	r3, [r6, #0]
 8005d96:	4630      	mov	r0, r6
 8005d98:	f000 f88a 	bl	8005eb0 <__malloc_unlock>
 8005d9c:	e7e3      	b.n	8005d66 <_malloc_r+0x1e>
 8005d9e:	6823      	ldr	r3, [r4, #0]
 8005da0:	1b5b      	subs	r3, r3, r5
 8005da2:	d417      	bmi.n	8005dd4 <_malloc_r+0x8c>
 8005da4:	2b0b      	cmp	r3, #11
 8005da6:	d903      	bls.n	8005db0 <_malloc_r+0x68>
 8005da8:	6023      	str	r3, [r4, #0]
 8005daa:	441c      	add	r4, r3
 8005dac:	6025      	str	r5, [r4, #0]
 8005dae:	e004      	b.n	8005dba <_malloc_r+0x72>
 8005db0:	6863      	ldr	r3, [r4, #4]
 8005db2:	42a2      	cmp	r2, r4
 8005db4:	bf0c      	ite	eq
 8005db6:	600b      	streq	r3, [r1, #0]
 8005db8:	6053      	strne	r3, [r2, #4]
 8005dba:	4630      	mov	r0, r6
 8005dbc:	f000 f878 	bl	8005eb0 <__malloc_unlock>
 8005dc0:	f104 000b 	add.w	r0, r4, #11
 8005dc4:	1d23      	adds	r3, r4, #4
 8005dc6:	f020 0007 	bic.w	r0, r0, #7
 8005dca:	1ac2      	subs	r2, r0, r3
 8005dcc:	d0cc      	beq.n	8005d68 <_malloc_r+0x20>
 8005dce:	1a1b      	subs	r3, r3, r0
 8005dd0:	50a3      	str	r3, [r4, r2]
 8005dd2:	e7c9      	b.n	8005d68 <_malloc_r+0x20>
 8005dd4:	4622      	mov	r2, r4
 8005dd6:	6864      	ldr	r4, [r4, #4]
 8005dd8:	e7cc      	b.n	8005d74 <_malloc_r+0x2c>
 8005dda:	1cc4      	adds	r4, r0, #3
 8005ddc:	f024 0403 	bic.w	r4, r4, #3
 8005de0:	42a0      	cmp	r0, r4
 8005de2:	d0e3      	beq.n	8005dac <_malloc_r+0x64>
 8005de4:	1a21      	subs	r1, r4, r0
 8005de6:	4630      	mov	r0, r6
 8005de8:	f000 f808 	bl	8005dfc <_sbrk_r>
 8005dec:	3001      	adds	r0, #1
 8005dee:	d1dd      	bne.n	8005dac <_malloc_r+0x64>
 8005df0:	e7cf      	b.n	8005d92 <_malloc_r+0x4a>
 8005df2:	bf00      	nop
 8005df4:	200001f0 	.word	0x200001f0
 8005df8:	200001f4 	.word	0x200001f4

08005dfc <_sbrk_r>:
 8005dfc:	b538      	push	{r3, r4, r5, lr}
 8005dfe:	4d06      	ldr	r5, [pc, #24]	; (8005e18 <_sbrk_r+0x1c>)
 8005e00:	2300      	movs	r3, #0
 8005e02:	4604      	mov	r4, r0
 8005e04:	4608      	mov	r0, r1
 8005e06:	602b      	str	r3, [r5, #0]
 8005e08:	f7fb ffb0 	bl	8001d6c <_sbrk>
 8005e0c:	1c43      	adds	r3, r0, #1
 8005e0e:	d102      	bne.n	8005e16 <_sbrk_r+0x1a>
 8005e10:	682b      	ldr	r3, [r5, #0]
 8005e12:	b103      	cbz	r3, 8005e16 <_sbrk_r+0x1a>
 8005e14:	6023      	str	r3, [r4, #0]
 8005e16:	bd38      	pop	{r3, r4, r5, pc}
 8005e18:	200001fc 	.word	0x200001fc

08005e1c <_raise_r>:
 8005e1c:	291f      	cmp	r1, #31
 8005e1e:	b538      	push	{r3, r4, r5, lr}
 8005e20:	4604      	mov	r4, r0
 8005e22:	460d      	mov	r5, r1
 8005e24:	d904      	bls.n	8005e30 <_raise_r+0x14>
 8005e26:	2316      	movs	r3, #22
 8005e28:	6003      	str	r3, [r0, #0]
 8005e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e2e:	bd38      	pop	{r3, r4, r5, pc}
 8005e30:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005e32:	b112      	cbz	r2, 8005e3a <_raise_r+0x1e>
 8005e34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005e38:	b94b      	cbnz	r3, 8005e4e <_raise_r+0x32>
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	f000 f830 	bl	8005ea0 <_getpid_r>
 8005e40:	462a      	mov	r2, r5
 8005e42:	4601      	mov	r1, r0
 8005e44:	4620      	mov	r0, r4
 8005e46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e4a:	f000 b817 	b.w	8005e7c <_kill_r>
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d00a      	beq.n	8005e68 <_raise_r+0x4c>
 8005e52:	1c59      	adds	r1, r3, #1
 8005e54:	d103      	bne.n	8005e5e <_raise_r+0x42>
 8005e56:	2316      	movs	r3, #22
 8005e58:	6003      	str	r3, [r0, #0]
 8005e5a:	2001      	movs	r0, #1
 8005e5c:	e7e7      	b.n	8005e2e <_raise_r+0x12>
 8005e5e:	2400      	movs	r4, #0
 8005e60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005e64:	4628      	mov	r0, r5
 8005e66:	4798      	blx	r3
 8005e68:	2000      	movs	r0, #0
 8005e6a:	e7e0      	b.n	8005e2e <_raise_r+0x12>

08005e6c <raise>:
 8005e6c:	4b02      	ldr	r3, [pc, #8]	; (8005e78 <raise+0xc>)
 8005e6e:	4601      	mov	r1, r0
 8005e70:	6818      	ldr	r0, [r3, #0]
 8005e72:	f7ff bfd3 	b.w	8005e1c <_raise_r>
 8005e76:	bf00      	nop
 8005e78:	2000000c 	.word	0x2000000c

08005e7c <_kill_r>:
 8005e7c:	b538      	push	{r3, r4, r5, lr}
 8005e7e:	4d07      	ldr	r5, [pc, #28]	; (8005e9c <_kill_r+0x20>)
 8005e80:	2300      	movs	r3, #0
 8005e82:	4604      	mov	r4, r0
 8005e84:	4608      	mov	r0, r1
 8005e86:	4611      	mov	r1, r2
 8005e88:	602b      	str	r3, [r5, #0]
 8005e8a:	f7fb ff55 	bl	8001d38 <_kill>
 8005e8e:	1c43      	adds	r3, r0, #1
 8005e90:	d102      	bne.n	8005e98 <_kill_r+0x1c>
 8005e92:	682b      	ldr	r3, [r5, #0]
 8005e94:	b103      	cbz	r3, 8005e98 <_kill_r+0x1c>
 8005e96:	6023      	str	r3, [r4, #0]
 8005e98:	bd38      	pop	{r3, r4, r5, pc}
 8005e9a:	bf00      	nop
 8005e9c:	200001fc 	.word	0x200001fc

08005ea0 <_getpid_r>:
 8005ea0:	f7fb bf42 	b.w	8001d28 <_getpid>

08005ea4 <__malloc_lock>:
 8005ea4:	4801      	ldr	r0, [pc, #4]	; (8005eac <__malloc_lock+0x8>)
 8005ea6:	f000 b809 	b.w	8005ebc <__retarget_lock_acquire_recursive>
 8005eaa:	bf00      	nop
 8005eac:	20000204 	.word	0x20000204

08005eb0 <__malloc_unlock>:
 8005eb0:	4801      	ldr	r0, [pc, #4]	; (8005eb8 <__malloc_unlock+0x8>)
 8005eb2:	f000 b804 	b.w	8005ebe <__retarget_lock_release_recursive>
 8005eb6:	bf00      	nop
 8005eb8:	20000204 	.word	0x20000204

08005ebc <__retarget_lock_acquire_recursive>:
 8005ebc:	4770      	bx	lr

08005ebe <__retarget_lock_release_recursive>:
 8005ebe:	4770      	bx	lr

08005ec0 <_init>:
 8005ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ec2:	bf00      	nop
 8005ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ec6:	bc08      	pop	{r3}
 8005ec8:	469e      	mov	lr, r3
 8005eca:	4770      	bx	lr

08005ecc <_fini>:
 8005ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ece:	bf00      	nop
 8005ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ed2:	bc08      	pop	{r3}
 8005ed4:	469e      	mov	lr, r3
 8005ed6:	4770      	bx	lr
