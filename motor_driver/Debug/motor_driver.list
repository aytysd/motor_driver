
motor_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c6c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005df4  08005df4  00015df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e2c  08005e2c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005e2c  08005e2c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e2c  08005e2c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005e2c  08005e2c  00015e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e34  08005e34  00015e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005e38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000070  08005ea8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08005ea8  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b0ae  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034a5  00000000  00000000  0003b14e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee0  00000000  00000000  0003e5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc8  00000000  00000000  0003f4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000da75  00000000  00000000  000402a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000054c5  00000000  00000000  0004dd15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000531da  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000426c  00000000  00000000  00053230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005ddc 	.word	0x08005ddc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08005ddc 	.word	0x08005ddc

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <_ZN3PWMC1Ev>:

    uint8_t set_motor_number();
    bool get_Is_reached(void);
    void control_PWM();

	PWM(){
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
		this -> old_pwm = 0;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
		this -> motor_number = 0;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2200      	movs	r2, #0
 8000a06:	711a      	strb	r2, [r3, #4]
		this -> direction = FREE;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	715a      	strb	r2, [r3, #5]
		this -> target_buff = 0;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2200      	movs	r2, #0
 8000a12:	719a      	strb	r2, [r3, #6]
		this -> target = 0;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]

	}
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <_ZN8Feedback11get_PID_pwmEv>:
int Feedback::integral_diff = 0;
uint8_t Feedback::PID_pwm  = 0;
int Feedback::current_pwm = 0;

int Feedback::get_PID_pwm()
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	return this -> PID_pwm;
 8000a30:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <_ZN8Feedback11get_PID_pwmEv+0x18>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	20000090 	.word	0x20000090

08000a44 <_ZN8Feedback19reset_integral_diffEv>:

void Feedback::reset_integral_diff(){
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]

	this -> integral_diff = 0;
 8000a4c:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <_ZN8Feedback19reset_integral_diffEv+0x1c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
	return;
 8000a52:	bf00      	nop

}
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	2000008c 	.word	0x2000008c

08000a64 <_ZN8Feedback11PID_controlEv>:


int Feedback::PID_control(){
 8000a64:	b590      	push	{r4, r7, lr}
 8000a66:	b087      	sub	sp, #28
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]


	PWM* pwm = new PWM();
 8000a6c:	200c      	movs	r0, #12
 8000a6e:	f005 f844 	bl	8005afa <_Znwj>
 8000a72:	4603      	mov	r3, r0
 8000a74:	461c      	mov	r4, r3
 8000a76:	4620      	mov	r0, r4
 8000a78:	f7ff ffbc 	bl	80009f4 <_ZN3PWMC1Ev>
 8000a7c:	613c      	str	r4, [r7, #16]

	uint16_t target_speed = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	82fb      	strh	r3, [r7, #22]
	if( (0b00111100&Rxdata[0])>>2 == pwm -> set_motor_number() )
 8000a82:	4b20      	ldr	r3, [pc, #128]	; (8000b04 <_ZN8Feedback11PID_controlEv+0xa0>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	109b      	asrs	r3, r3, #2
 8000a88:	f003 040f 	and.w	r4, r3, #15
 8000a8c:	6938      	ldr	r0, [r7, #16]
 8000a8e:	f000 f993 	bl	8000db8 <_ZN3PWM16set_motor_numberEv>
 8000a92:	4603      	mov	r3, r0
 8000a94:	429c      	cmp	r4, r3
 8000a96:	bf0c      	ite	eq
 8000a98:	2301      	moveq	r3, #1
 8000a9a:	2300      	movne	r3, #0
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d009      	beq.n	8000ab6 <_ZN8Feedback11PID_controlEv+0x52>
	{
		target_speed = ( Rxdata[2] << 8 ) | ( Rxdata[3] );
 8000aa2:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <_ZN8Feedback11PID_controlEv+0xa0>)
 8000aa4:	789b      	ldrb	r3, [r3, #2]
 8000aa6:	021b      	lsls	r3, r3, #8
 8000aa8:	b21a      	sxth	r2, r3
 8000aaa:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <_ZN8Feedback11PID_controlEv+0xa0>)
 8000aac:	78db      	ldrb	r3, [r3, #3]
 8000aae:	b21b      	sxth	r3, r3
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	b21b      	sxth	r3, r3
 8000ab4:	82fb      	strh	r3, [r7, #22]
	}
	delete pwm;
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d003      	beq.n	8000ac4 <_ZN8Feedback11PID_controlEv+0x60>
 8000abc:	210c      	movs	r1, #12
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f005 f80a 	bl	8005ad8 <_ZdlPvj>

	uint16_t current_speed = this -> current_speed_calc();
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f000 f8a3 	bl	8000c10 <_ZN8Feedback18current_speed_calcEv>
 8000aca:	4603      	mov	r3, r0
 8000acc:	81fb      	strh	r3, [r7, #14]

	return this -> P_control(target_speed, current_speed) + this -> I_control(target_speed, current_speed) - this -> D_control(current_speed);
 8000ace:	89fa      	ldrh	r2, [r7, #14]
 8000ad0:	8afb      	ldrh	r3, [r7, #22]
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f000 f817 	bl	8000b08 <_ZN8Feedback9P_controlEtt>
 8000ada:	4604      	mov	r4, r0
 8000adc:	89fa      	ldrh	r2, [r7, #14]
 8000ade:	8afb      	ldrh	r3, [r7, #22]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f000 f838 	bl	8000b58 <_ZN8Feedback9I_controlEtt>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	441c      	add	r4, r3
 8000aec:	89fb      	ldrh	r3, [r7, #14]
 8000aee:	4619      	mov	r1, r3
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f000 f855 	bl	8000ba0 <_ZN8Feedback9D_controlEt>
 8000af6:	4603      	mov	r3, r0
 8000af8:	1ae3      	subs	r3, r4, r3


}
 8000afa:	4618      	mov	r0, r3
 8000afc:	371c      	adds	r7, #28
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd90      	pop	{r4, r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200001e8 	.word	0x200001e8

08000b08 <_ZN8Feedback9P_controlEtt>:



int Feedback::P_control(uint16_t target_speed, uint16_t current_speed ){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	460b      	mov	r3, r1
 8000b12:	807b      	strh	r3, [r7, #2]
 8000b14:	4613      	mov	r3, r2
 8000b16:	803b      	strh	r3, [r7, #0]


	int speed_diff = target_speed - current_speed;
 8000b18:	887a      	ldrh	r2, [r7, #2]
 8000b1a:	883b      	ldrh	r3, [r7, #0]
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	60fb      	str	r3, [r7, #12]

	int add_pwm = speed_diff / 23.677;
 8000b20:	68f8      	ldr	r0, [r7, #12]
 8000b22:	f7ff fca3 	bl	800046c <__aeabi_i2d>
 8000b26:	a30a      	add	r3, pc, #40	; (adr r3, 8000b50 <_ZN8Feedback9P_controlEtt+0x48>)
 8000b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b2c:	f7ff fe32 	bl	8000794 <__aeabi_ddiv>
 8000b30:	4602      	mov	r2, r0
 8000b32:	460b      	mov	r3, r1
 8000b34:	4610      	mov	r0, r2
 8000b36:	4619      	mov	r1, r3
 8000b38:	f7ff ff14 	bl	8000964 <__aeabi_d2iz>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	60bb      	str	r3, [r7, #8]

	return add_pwm;
 8000b40:	68bb      	ldr	r3, [r7, #8]

}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	f3af 8000 	nop.w
 8000b50:	df3b645a 	.word	0xdf3b645a
 8000b54:	4037ad4f 	.word	0x4037ad4f

08000b58 <_ZN8Feedback9I_controlEtt>:

int Feedback::I_control(uint16_t target_speed, uint16_t current_speed){
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	807b      	strh	r3, [r7, #2]
 8000b64:	4613      	mov	r3, r2
 8000b66:	803b      	strh	r3, [r7, #0]


	this -> integral_diff += ( target_speed - current_speed );
 8000b68:	887a      	ldrh	r2, [r7, #2]
 8000b6a:	883b      	ldrh	r3, [r7, #0]
 8000b6c:	1ad2      	subs	r2, r2, r3
 8000b6e:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <_ZN8Feedback9I_controlEtt+0x40>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4413      	add	r3, r2
 8000b74:	4a08      	ldr	r2, [pc, #32]	; (8000b98 <_ZN8Feedback9I_controlEtt+0x40>)
 8000b76:	6013      	str	r3, [r2, #0]

	return this -> integral_diff / 30;
 8000b78:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <_ZN8Feedback9I_controlEtt+0x40>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a07      	ldr	r2, [pc, #28]	; (8000b9c <_ZN8Feedback9I_controlEtt+0x44>)
 8000b7e:	fb82 1203 	smull	r1, r2, r2, r3
 8000b82:	441a      	add	r2, r3
 8000b84:	1112      	asrs	r2, r2, #4
 8000b86:	17db      	asrs	r3, r3, #31
 8000b88:	1ad3      	subs	r3, r2, r3

}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	2000008c 	.word	0x2000008c
 8000b9c:	88888889 	.word	0x88888889

08000ba0 <_ZN8Feedback9D_controlEt>:



int Feedback::D_control(uint16_t current_speed){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	460b      	mov	r3, r1
 8000baa:	807b      	strh	r3, [r7, #2]

	static uint16_t old_speed = current_speed;
 8000bac:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <_ZN8Feedback9D_controlEt+0x64>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	f3bf 8f5b 	dmb	ish
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	bf0c      	ite	eq
 8000bbe:	2301      	moveq	r3, #1
 8000bc0:	2300      	movne	r3, #0
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d010      	beq.n	8000bea <_ZN8Feedback9D_controlEt+0x4a>
 8000bc8:	480e      	ldr	r0, [pc, #56]	; (8000c04 <_ZN8Feedback9D_controlEt+0x64>)
 8000bca:	f004 ff87 	bl	8005adc <__cxa_guard_acquire>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	bf14      	ite	ne
 8000bd4:	2301      	movne	r3, #1
 8000bd6:	2300      	moveq	r3, #0
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d005      	beq.n	8000bea <_ZN8Feedback9D_controlEt+0x4a>
 8000bde:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <_ZN8Feedback9D_controlEt+0x68>)
 8000be0:	887b      	ldrh	r3, [r7, #2]
 8000be2:	8013      	strh	r3, [r2, #0]
 8000be4:	4807      	ldr	r0, [pc, #28]	; (8000c04 <_ZN8Feedback9D_controlEt+0x64>)
 8000be6:	f004 ff85 	bl	8005af4 <__cxa_guard_release>
	int diff = current_speed - old_speed;
 8000bea:	887b      	ldrh	r3, [r7, #2]
 8000bec:	4a06      	ldr	r2, [pc, #24]	; (8000c08 <_ZN8Feedback9D_controlEt+0x68>)
 8000bee:	8812      	ldrh	r2, [r2, #0]
 8000bf0:	1a9b      	subs	r3, r3, r2
 8000bf2:	60fb      	str	r3, [r7, #12]

	old_speed = current_speed;
 8000bf4:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <_ZN8Feedback9D_controlEt+0x68>)
 8000bf6:	887b      	ldrh	r3, [r7, #2]
 8000bf8:	8013      	strh	r3, [r2, #0]

	return diff;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	2000009c 	.word	0x2000009c
 8000c08:	20000098 	.word	0x20000098
 8000c0c:	00000000 	.word	0x00000000

08000c10 <_ZN8Feedback18current_speed_calcEv>:


uint16_t Feedback::current_speed_calc()
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	Encoder* encoder = new Encoder();
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f004 ff6e 	bl	8005afa <_Znwj>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	617b      	str	r3, [r7, #20]

	static int old_pulse_cnt = encoder -> get_pulse_cnt();
 8000c22:	4b2f      	ldr	r3, [pc, #188]	; (8000ce0 <_ZN8Feedback18current_speed_calcEv+0xd0>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	f3bf 8f5b 	dmb	ish
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	f003 0301 	and.w	r3, r3, #1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	bf0c      	ite	eq
 8000c34:	2301      	moveq	r3, #1
 8000c36:	2300      	movne	r3, #0
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d013      	beq.n	8000c66 <_ZN8Feedback18current_speed_calcEv+0x56>
 8000c3e:	4828      	ldr	r0, [pc, #160]	; (8000ce0 <_ZN8Feedback18current_speed_calcEv+0xd0>)
 8000c40:	f004 ff4c 	bl	8005adc <__cxa_guard_acquire>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	bf14      	ite	ne
 8000c4a:	2301      	movne	r3, #1
 8000c4c:	2300      	moveq	r3, #0
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d008      	beq.n	8000c66 <_ZN8Feedback18current_speed_calcEv+0x56>
 8000c54:	6978      	ldr	r0, [r7, #20]
 8000c56:	f000 fb87 	bl	8001368 <_ZN7Encoder13get_pulse_cntEv>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <_ZN8Feedback18current_speed_calcEv+0xd4>)
 8000c5e:	6013      	str	r3, [r2, #0]
 8000c60:	481f      	ldr	r0, [pc, #124]	; (8000ce0 <_ZN8Feedback18current_speed_calcEv+0xd0>)
 8000c62:	f004 ff47 	bl	8005af4 <__cxa_guard_release>
	int current_pulse_cnt = encoder -> get_pulse_cnt();
 8000c66:	6978      	ldr	r0, [r7, #20]
 8000c68:	f000 fb7e 	bl	8001368 <_ZN7Encoder13get_pulse_cntEv>
 8000c6c:	6138      	str	r0, [r7, #16]

	uint16_t current_speed = RADIUS * 2 * M_PI * abs( (int)(current_pulse_cnt - old_pulse_cnt) ) / ( PPR * DT );
 8000c6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ce4 <_ZN8Feedback18current_speed_calcEv+0xd4>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	bfb8      	it	lt
 8000c7a:	425b      	neglt	r3, r3
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fbf5 	bl	800046c <__aeabi_i2d>
 8000c82:	a313      	add	r3, pc, #76	; (adr r3, 8000cd0 <_ZN8Feedback18current_speed_calcEv+0xc0>)
 8000c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c88:	f7ff fc5a 	bl	8000540 <__aeabi_dmul>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	460b      	mov	r3, r1
 8000c90:	4610      	mov	r0, r2
 8000c92:	4619      	mov	r1, r3
 8000c94:	a310      	add	r3, pc, #64	; (adr r3, 8000cd8 <_ZN8Feedback18current_speed_calcEv+0xc8>)
 8000c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c9a:	f7ff fd7b 	bl	8000794 <__aeabi_ddiv>
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	4610      	mov	r0, r2
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	f7ff fe85 	bl	80009b4 <__aeabi_d2uiz>
 8000caa:	4603      	mov	r3, r0
 8000cac:	81fb      	strh	r3, [r7, #14]

	delete encoder;
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d003      	beq.n	8000cbc <_ZN8Feedback18current_speed_calcEv+0xac>
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f004 ff0e 	bl	8005ad8 <_ZdlPvj>
	old_pulse_cnt = current_pulse_cnt;
 8000cbc:	4a09      	ldr	r2, [pc, #36]	; (8000ce4 <_ZN8Feedback18current_speed_calcEv+0xd4>)
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	6013      	str	r3, [r2, #0]

	return current_speed;
 8000cc2:	89fb      	ldrh	r3, [r7, #14]

}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3718      	adds	r7, #24
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	f3af 8000 	nop.w
 8000cd0:	1870fdb2 	.word	0x1870fdb2
 8000cd4:	40750268 	.word	0x40750268
 8000cd8:	9999999a 	.word	0x9999999a
 8000cdc:	40699999 	.word	0x40699999
 8000ce0:	200000a4 	.word	0x200000a4
 8000ce4:	200000a0 	.word	0x200000a0

08000ce8 <_ZN8Function10outputPWM1Eh>:
#include "main.h"
#include "Function.hpp"
#include "PWM.hpp"


void Function::outputPWM1(uint8_t pwm){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	70fb      	strb	r3, [r7, #3]



	sConfigOC.Pulse = (uint32_t)((8)*pwm);
 8000cf4:	78fb      	ldrb	r3, [r7, #3]
 8000cf6:	00db      	lsls	r3, r3, #3
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <_ZN8Function10outputPWM1Eh+0x60>)
 8000cfc:	605a      	str	r2, [r3, #4]

	if( sConfigOC.Pulse >= 799 ){
 8000cfe:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <_ZN8Function10outputPWM1Eh+0x60>)
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f240 321e 	movw	r2, #798	; 0x31e
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d903      	bls.n	8000d12 <_ZN8Function10outputPWM1Eh+0x2a>
		sConfigOC.Pulse = 799;
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <_ZN8Function10outputPWM1Eh+0x60>)
 8000d0c:	f240 321f 	movw	r2, #799	; 0x31f
 8000d10:	605a      	str	r2, [r3, #4]
	}

	if ( sConfigOC.Pulse <= 0 ){
 8000d12:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <_ZN8Function10outputPWM1Eh+0x60>)
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d102      	bne.n	8000d20 <_ZN8Function10outputPWM1Eh+0x38>
		sConfigOC.Pulse = 0;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <_ZN8Function10outputPWM1Eh+0x60>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	605a      	str	r2, [r3, #4]
	}



	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 8000d20:	2204      	movs	r2, #4
 8000d22:	4909      	ldr	r1, [pc, #36]	; (8000d48 <_ZN8Function10outputPWM1Eh+0x60>)
 8000d24:	4809      	ldr	r0, [pc, #36]	; (8000d4c <_ZN8Function10outputPWM1Eh+0x64>)
 8000d26:	f003 f975 	bl	8004014 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000d2a:	2104      	movs	r1, #4
 8000d2c:	4807      	ldr	r0, [pc, #28]	; (8000d4c <_ZN8Function10outputPWM1Eh+0x64>)
 8000d2e:	f002 ff65 	bl	8003bfc <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 8000d32:	2104      	movs	r1, #4
 8000d34:	4805      	ldr	r0, [pc, #20]	; (8000d4c <_ZN8Function10outputPWM1Eh+0x64>)
 8000d36:	f003 fdf3 	bl	8004920 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Init(&htim1);
 8000d3a:	4804      	ldr	r0, [pc, #16]	; (8000d4c <_ZN8Function10outputPWM1Eh+0x64>)
 8000d3c:	f002 ff06 	bl	8003b4c <HAL_TIM_PWM_Init>


}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	200001cc 	.word	0x200001cc
 8000d4c:	200000b0 	.word	0x200000b0

08000d50 <_ZN8Function10outputPWM0Eh>:

void Function::outputPWM0(uint8_t pwm)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	70fb      	strb	r3, [r7, #3]


	sConfigOC.Pulse = (uint32_t)((8)*pwm);
 8000d5c:	78fb      	ldrb	r3, [r7, #3]
 8000d5e:	00db      	lsls	r3, r3, #3
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <_ZN8Function10outputPWM0Eh+0x60>)
 8000d64:	605a      	str	r2, [r3, #4]

	if( sConfigOC.Pulse >= 799 ){
 8000d66:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <_ZN8Function10outputPWM0Eh+0x60>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f240 321e 	movw	r2, #798	; 0x31e
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d903      	bls.n	8000d7a <_ZN8Function10outputPWM0Eh+0x2a>
		sConfigOC.Pulse = 799;
 8000d72:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <_ZN8Function10outputPWM0Eh+0x60>)
 8000d74:	f240 321f 	movw	r2, #799	; 0x31f
 8000d78:	605a      	str	r2, [r3, #4]
	}
	if ( sConfigOC.Pulse <= 0 ){
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <_ZN8Function10outputPWM0Eh+0x60>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d102      	bne.n	8000d88 <_ZN8Function10outputPWM0Eh+0x38>
		sConfigOC.Pulse = 0;
 8000d82:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <_ZN8Function10outputPWM0Eh+0x60>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	605a      	str	r2, [r3, #4]
	}

	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
 8000d88:	2208      	movs	r2, #8
 8000d8a:	4909      	ldr	r1, [pc, #36]	; (8000db0 <_ZN8Function10outputPWM0Eh+0x60>)
 8000d8c:	4809      	ldr	r0, [pc, #36]	; (8000db4 <_ZN8Function10outputPWM0Eh+0x64>)
 8000d8e:	f003 f941 	bl	8004014 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000d92:	2108      	movs	r1, #8
 8000d94:	4807      	ldr	r0, [pc, #28]	; (8000db4 <_ZN8Function10outputPWM0Eh+0x64>)
 8000d96:	f002 ff31 	bl	8003bfc <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3);
 8000d9a:	2108      	movs	r1, #8
 8000d9c:	4805      	ldr	r0, [pc, #20]	; (8000db4 <_ZN8Function10outputPWM0Eh+0x64>)
 8000d9e:	f003 fdbf 	bl	8004920 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Init(&htim1);
 8000da2:	4804      	ldr	r0, [pc, #16]	; (8000db4 <_ZN8Function10outputPWM0Eh+0x64>)
 8000da4:	f002 fed2 	bl	8003b4c <HAL_TIM_PWM_Init>



}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	200001cc 	.word	0x200001cc
 8000db4:	200000b0 	.word	0x200000b0

08000db8 <_ZN3PWM16set_motor_numberEv>:
#include "PWM.hpp"
#include "Feedback.hpp"
#include "Function.hpp"


uint8_t PWM::set_motor_number(){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	uint8_t motor_number = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	73fb      	strb	r3, [r7, #15]

	if (HAL_GPIO_ReadPin(MN_0_GPIO_Port, MN_0_Pin) == 0) motor_number = motor_number|0b1;
 8000dc4:	2110      	movs	r1, #16
 8000dc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dca:	f001 fb53 	bl	8002474 <HAL_GPIO_ReadPin>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	bf0c      	ite	eq
 8000dd4:	2301      	moveq	r3, #1
 8000dd6:	2300      	movne	r3, #0
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d003      	beq.n	8000de6 <_ZN3PWM16set_motor_numberEv+0x2e>
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	73fb      	strb	r3, [r7, #15]
	if (HAL_GPIO_ReadPin(MN_1_GPIO_Port, MN_1_Pin) == 0) motor_number = motor_number|(0b1<<1);
 8000de6:	2120      	movs	r1, #32
 8000de8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dec:	f001 fb42 	bl	8002474 <HAL_GPIO_ReadPin>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	bf0c      	ite	eq
 8000df6:	2301      	moveq	r3, #1
 8000df8:	2300      	movne	r3, #0
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d003      	beq.n	8000e08 <_ZN3PWM16set_motor_numberEv+0x50>
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	f043 0302 	orr.w	r3, r3, #2
 8000e06:	73fb      	strb	r3, [r7, #15]
	if (HAL_GPIO_ReadPin(MN_2_GPIO_Port, MN_2_Pin) == 0) motor_number = motor_number|(0b1<<2);
 8000e08:	2140      	movs	r1, #64	; 0x40
 8000e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0e:	f001 fb31 	bl	8002474 <HAL_GPIO_ReadPin>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	bf0c      	ite	eq
 8000e18:	2301      	moveq	r3, #1
 8000e1a:	2300      	movne	r3, #0
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d003      	beq.n	8000e2a <_ZN3PWM16set_motor_numberEv+0x72>
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	f043 0304 	orr.w	r3, r3, #4
 8000e28:	73fb      	strb	r3, [r7, #15]
	if (HAL_GPIO_ReadPin(MN_3_GPIO_Port, MN_3_Pin) == 0) motor_number = motor_number|(0b1<<3);
 8000e2a:	2180      	movs	r1, #128	; 0x80
 8000e2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e30:	f001 fb20 	bl	8002474 <HAL_GPIO_ReadPin>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	bf0c      	ite	eq
 8000e3a:	2301      	moveq	r3, #1
 8000e3c:	2300      	movne	r3, #0
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d003      	beq.n	8000e4c <_ZN3PWM16set_motor_numberEv+0x94>
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	f043 0308 	orr.w	r3, r3, #8
 8000e4a:	73fb      	strb	r3, [r7, #15]

	return motor_number;
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]


}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <_ZN3PWM11control_PWMEv>:
void PWM::control_PWM(void){
 8000e58:	b590      	push	{r4, r7, lr}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]

	this -> motor_number = (0b00111100&Rxdata[0])>>2;
 8000e60:	4b38      	ldr	r3, [pc, #224]	; (8000f44 <_ZN3PWM11control_PWMEv+0xec>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	109b      	asrs	r3, r3, #2
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	f003 030f 	and.w	r3, r3, #15
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	711a      	strb	r2, [r3, #4]

	if( this -> motor_number == this -> set_motor_number() )
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	791c      	ldrb	r4, [r3, #4]
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff ff9e 	bl	8000db8 <_ZN3PWM16set_motor_numberEv>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	429c      	cmp	r4, r3
 8000e80:	bf0c      	ite	eq
 8000e82:	2301      	moveq	r3, #1
 8000e84:	2300      	movne	r3, #0
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d01d      	beq.n	8000ec8 <_ZN3PWM11control_PWMEv+0x70>
	{
	    this -> direction = 0b00000011&Rxdata[0];
 8000e8c:	4b2d      	ldr	r3, [pc, #180]	; (8000f44 <_ZN3PWM11control_PWMEv+0xec>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	f003 0303 	and.w	r3, r3, #3
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	715a      	strb	r2, [r3, #5]
	    this -> target_buff = Rxdata[1];
 8000e9a:	4b2a      	ldr	r3, [pc, #168]	; (8000f44 <_ZN3PWM11control_PWMEv+0xec>)
 8000e9c:	785a      	ldrb	r2, [r3, #1]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	719a      	strb	r2, [r3, #6]

	    switch(this -> direction){
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	795b      	ldrb	r3, [r3, #5]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d002      	beq.n	8000eb0 <_ZN3PWM11control_PWMEv+0x58>
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d006      	beq.n	8000ebc <_ZN3PWM11control_PWMEv+0x64>
	    	break;
	    case CCW:
	    	this -> target = (-1) * (int)this -> target_buff;
	    	break;
	    default:
	    	break;
 8000eae:	e00b      	b.n	8000ec8 <_ZN3PWM11control_PWMEv+0x70>
	    	this -> target = (int)this -> target_buff;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	799b      	ldrb	r3, [r3, #6]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
	    	break;
 8000eba:	e005      	b.n	8000ec8 <_ZN3PWM11control_PWMEv+0x70>
	    	this -> target = (-1) * (int)this -> target_buff;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	799b      	ldrb	r3, [r3, #6]
 8000ec0:	425a      	negs	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
	    	break;
 8000ec6:	bf00      	nop
	    }


	}

    uint8_t pwm = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	73fb      	strb	r3, [r7, #15]

	pwm = this -> trapezoid_control(PERIOD, this -> target);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	2132      	movs	r1, #50	; 0x32
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f000 f838 	bl	8000f4c <_ZN3PWM17trapezoid_controlEhh>
 8000edc:	4603      	mov	r3, r0
 8000ede:	73fb      	strb	r3, [r7, #15]

	if (this -> direction == CW)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	795b      	ldrb	r3, [r3, #5]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d108      	bne.n	8000efa <_ZN3PWM11control_PWMEv+0xa2>
	{

		this -> cw(pwm);
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
 8000eea:	4619      	mov	r1, r3
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f000 f897 	bl	8001020 <_ZN3PWM2cwEh>
		this -> old_pwm = pwm;
 8000ef2:	7bfa      	ldrb	r2, [r7, #15]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	601a      	str	r2, [r3, #0]
	{
		this -> free();
		this -> old_pwm = Feedback::current_pwm;
	}

}
 8000ef8:	e01f      	b.n	8000f3a <_ZN3PWM11control_PWMEv+0xe2>
	else if (this -> direction == CCW)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	795b      	ldrb	r3, [r3, #5]
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d108      	bne.n	8000f14 <_ZN3PWM11control_PWMEv+0xbc>
		this -> ccw(pwm);
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	4619      	mov	r1, r3
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f000 f8d6 	bl	80010b8 <_ZN3PWM3ccwEh>
		this -> old_pwm = pwm;
 8000f0c:	7bfa      	ldrb	r2, [r7, #15]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	601a      	str	r2, [r3, #0]
}
 8000f12:	e012      	b.n	8000f3a <_ZN3PWM11control_PWMEv+0xe2>
	else if (this -> direction == BRAKE)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	795b      	ldrb	r3, [r3, #5]
 8000f18:	2b03      	cmp	r3, #3
 8000f1a:	d103      	bne.n	8000f24 <_ZN3PWM11control_PWMEv+0xcc>
		this -> brake();
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f000 f91b 	bl	8001158 <_ZN3PWM5brakeEv>
}
 8000f22:	e00a      	b.n	8000f3a <_ZN3PWM11control_PWMEv+0xe2>
	else if (this -> direction == FREE)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	795b      	ldrb	r3, [r3, #5]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d106      	bne.n	8000f3a <_ZN3PWM11control_PWMEv+0xe2>
		this -> free();
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f000 f949 	bl	80011c4 <_ZN3PWM4freeEv>
		this -> old_pwm = Feedback::current_pwm;
 8000f32:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <_ZN3PWM11control_PWMEv+0xf0>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	601a      	str	r2, [r3, #0]
}
 8000f3a:	bf00      	nop
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd90      	pop	{r4, r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200001e8 	.word	0x200001e8
 8000f48:	20000094 	.word	0x20000094

08000f4c <_ZN3PWM17trapezoid_controlEhh>:

uint8_t PWM::trapezoid_control(uint8_t period, uint8_t target){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	70fb      	strb	r3, [r7, #3]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	70bb      	strb	r3, [r7, #2]
	switch(this -> direction){
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	795b      	ldrb	r3, [r3, #5]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d003      	beq.n	8000f6c <_ZN3PWM17trapezoid_controlEhh+0x20>
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d028      	beq.n	8000fba <_ZN3PWM17trapezoid_controlEhh+0x6e>
		return (uint8_t)abs(this -> old_pwm);


		break;
	default:
		break;
 8000f68:	bf00      	nop

	}
}
 8000f6a:	e052      	b.n	8001012 <_ZN3PWM17trapezoid_controlEhh+0xc6>
		if(this -> old_pwm < 0){
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	da05      	bge.n	8000f80 <_ZN3PWM17trapezoid_controlEhh+0x34>
			this -> free();
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f000 f925 	bl	80011c4 <_ZN3PWM4freeEv>
			this -> old_pwm = 0;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
		if(this -> old_pwm >= this -> target){
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	db06      	blt.n	8000f9a <_ZN3PWM17trapezoid_controlEhh+0x4e>
			this -> Is_reached = true;
 8000f8c:	4b23      	ldr	r3, [pc, #140]	; (800101c <_ZN3PWM17trapezoid_controlEhh+0xd0>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	701a      	strb	r2, [r3, #0]
			return this -> target;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	e03b      	b.n	8001012 <_ZN3PWM17trapezoid_controlEhh+0xc6>
			this -> Is_reached = false;
 8000f9a:	4b20      	ldr	r3, [pc, #128]	; (800101c <_ZN3PWM17trapezoid_controlEhh+0xd0>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
		this -> old_pwm++;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	1c5a      	adds	r2, r3, #1
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	601a      	str	r2, [r3, #0]
		HAL_Delay(period);
 8000faa:	78fb      	ldrb	r3, [r7, #3]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 ff43 	bl	8001e38 <HAL_Delay>
		return (uint8_t)this -> old_pwm;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	e02b      	b.n	8001012 <_ZN3PWM17trapezoid_controlEhh+0xc6>
		if(this -> old_pwm > 0){
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	dd05      	ble.n	8000fce <_ZN3PWM17trapezoid_controlEhh+0x82>
			this -> free();
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 f8fe 	bl	80011c4 <_ZN3PWM4freeEv>
			this -> old_pwm = 0;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
		if(this -> old_pwm <= this -> target){
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	dc09      	bgt.n	8000fee <_ZN3PWM17trapezoid_controlEhh+0xa2>
			this -> Is_reached = true;
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <_ZN3PWM17trapezoid_controlEhh+0xd0>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	701a      	strb	r2, [r3, #0]
			return abs( this -> target);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	bfb8      	it	lt
 8000fe8:	425b      	neglt	r3, r3
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	e011      	b.n	8001012 <_ZN3PWM17trapezoid_controlEhh+0xc6>
			this -> Is_reached = false;
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <_ZN3PWM17trapezoid_controlEhh+0xd0>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
		this -> old_pwm--;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	1e5a      	subs	r2, r3, #1
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	601a      	str	r2, [r3, #0]
		HAL_Delay(period);
 8000ffe:	78fb      	ldrb	r3, [r7, #3]
 8001000:	4618      	mov	r0, r3
 8001002:	f000 ff19 	bl	8001e38 <HAL_Delay>
		return (uint8_t)abs(this -> old_pwm);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	bfb8      	it	lt
 800100e:	425b      	neglt	r3, r3
 8001010:	b2db      	uxtb	r3, r3
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200000a8 	.word	0x200000a8

08001020 <_ZN3PWM2cwEh>:


void PWM::cw(uint8_t pwm){
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	70fb      	strb	r3, [r7, #3]

	Function* function = new Function();
 800102c:	2001      	movs	r0, #1
 800102e:	f004 fd64 	bl	8005afa <_Znwj>
 8001032:	4603      	mov	r3, r0
 8001034:	60fb      	str	r3, [r7, #12]
	Feedback* feedback = new Feedback();
 8001036:	2001      	movs	r0, #1
 8001038:	f004 fd5f 	bl	8005afa <_Znwj>
 800103c:	4603      	mov	r3, r0
 800103e:	60bb      	str	r3, [r7, #8]

    if( this -> get_Is_reached() == true ){
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f000 f8f3 	bl	800122c <_ZN3PWM14get_Is_reachedEv>
 8001046:	4603      	mov	r3, r0
 8001048:	2b01      	cmp	r3, #1
 800104a:	bf0c      	ite	eq
 800104c:	2301      	moveq	r3, #1
 800104e:	2300      	movne	r3, #0
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	d007      	beq.n	8001066 <_ZN3PWM2cwEh+0x46>
    	pwm += feedback -> get_PID_pwm();
 8001056:	68b8      	ldr	r0, [r7, #8]
 8001058:	f7ff fce6 	bl	8000a28 <_ZN8Feedback11get_PID_pwmEv>
 800105c:	4603      	mov	r3, r0
 800105e:	b2da      	uxtb	r2, r3
 8001060:	78fb      	ldrb	r3, [r7, #3]
 8001062:	4413      	add	r3, r2
 8001064:	70fb      	strb	r3, [r7, #3]
    }


	function -> outputPWM0(pwm);
 8001066:	78fb      	ldrb	r3, [r7, #3]
 8001068:	4619      	mov	r1, r3
 800106a:	68f8      	ldr	r0, [r7, #12]
 800106c:	f7ff fe70 	bl	8000d50 <_ZN8Function10outputPWM0Eh>
	function -> outputPWM1(99);
 8001070:	2163      	movs	r1, #99	; 0x63
 8001072:	68f8      	ldr	r0, [r7, #12]
 8001074:	f7ff fe38 	bl	8000ce8 <_ZN8Function10outputPWM1Eh>


	HAL_GPIO_WritePin(LD_0_GPIO_Port, LD_0_Pin, GPIO_PIN_SET);
 8001078:	2201      	movs	r2, #1
 800107a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800107e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001082:	f001 fa0f 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD_1_GPIO_Port, LD_1_Pin, GPIO_PIN_RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800108c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001090:	f001 fa08 	bl	80024a4 <HAL_GPIO_WritePin>

	delete function;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <_ZN3PWM2cwEh+0x82>
 800109a:	2101      	movs	r1, #1
 800109c:	4618      	mov	r0, r3
 800109e:	f004 fd1b 	bl	8005ad8 <_ZdlPvj>
	delete feedback;
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <_ZN3PWM2cwEh+0x90>
 80010a8:	2101      	movs	r1, #1
 80010aa:	4618      	mov	r0, r3
 80010ac:	f004 fd14 	bl	8005ad8 <_ZdlPvj>

}
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <_ZN3PWM3ccwEh>:
void PWM::ccw(uint8_t pwm){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	70fb      	strb	r3, [r7, #3]

	Function * function = new Function();
 80010c4:	2001      	movs	r0, #1
 80010c6:	f004 fd18 	bl	8005afa <_Znwj>
 80010ca:	4603      	mov	r3, r0
 80010cc:	60fb      	str	r3, [r7, #12]
	Feedback* feedback = new Feedback();
 80010ce:	2001      	movs	r0, #1
 80010d0:	f004 fd13 	bl	8005afa <_Znwj>
 80010d4:	4603      	mov	r3, r0
 80010d6:	60bb      	str	r3, [r7, #8]

    if( this -> get_Is_reached() == true ){
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f000 f8a7 	bl	800122c <_ZN3PWM14get_Is_reachedEv>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	bf0c      	ite	eq
 80010e4:	2301      	moveq	r3, #1
 80010e6:	2300      	movne	r3, #0
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d007      	beq.n	80010fe <_ZN3PWM3ccwEh+0x46>
    	pwm +=  feedback -> get_PID_pwm();
 80010ee:	68b8      	ldr	r0, [r7, #8]
 80010f0:	f7ff fc9a 	bl	8000a28 <_ZN8Feedback11get_PID_pwmEv>
 80010f4:	4603      	mov	r3, r0
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	78fb      	ldrb	r3, [r7, #3]
 80010fa:	4413      	add	r3, r2
 80010fc:	70fb      	strb	r3, [r7, #3]
    }


	function -> outputPWM0(1);
 80010fe:	2101      	movs	r1, #1
 8001100:	68f8      	ldr	r0, [r7, #12]
 8001102:	f7ff fe25 	bl	8000d50 <_ZN8Function10outputPWM0Eh>
	function -> outputPWM1(100-pwm);
 8001106:	78fb      	ldrb	r3, [r7, #3]
 8001108:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800110c:	b2db      	uxtb	r3, r3
 800110e:	4619      	mov	r1, r3
 8001110:	68f8      	ldr	r0, [r7, #12]
 8001112:	f7ff fde9 	bl	8000ce8 <_ZN8Function10outputPWM1Eh>

	HAL_GPIO_WritePin(LD_0_GPIO_Port, LD_0_Pin, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800111c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001120:	f001 f9c0 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD_1_GPIO_Port, LD_1_Pin, GPIO_PIN_SET);
 8001124:	2201      	movs	r2, #1
 8001126:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800112a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800112e:	f001 f9b9 	bl	80024a4 <HAL_GPIO_WritePin>

	delete function;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <_ZN3PWM3ccwEh+0x88>
 8001138:	2101      	movs	r1, #1
 800113a:	4618      	mov	r0, r3
 800113c:	f004 fccc 	bl	8005ad8 <_ZdlPvj>
	delete feedback;
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <_ZN3PWM3ccwEh+0x96>
 8001146:	2101      	movs	r1, #1
 8001148:	4618      	mov	r0, r3
 800114a:	f004 fcc5 	bl	8005ad8 <_ZdlPvj>

}
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <_ZN3PWM5brakeEv>:
void PWM::brake(void){
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]

	Function * function = new Function();
 8001160:	2001      	movs	r0, #1
 8001162:	f004 fcca 	bl	8005afa <_Znwj>
 8001166:	4603      	mov	r3, r0
 8001168:	60fb      	str	r3, [r7, #12]

	this -> free();
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 f82a 	bl	80011c4 <_ZN3PWM4freeEv>

	function -> outputPWM0(0);
 8001170:	2100      	movs	r1, #0
 8001172:	68f8      	ldr	r0, [r7, #12]
 8001174:	f7ff fdec 	bl	8000d50 <_ZN8Function10outputPWM0Eh>
	function -> outputPWM1(100);
 8001178:	2164      	movs	r1, #100	; 0x64
 800117a:	68f8      	ldr	r0, [r7, #12]
 800117c:	f7ff fdb4 	bl	8000ce8 <_ZN8Function10outputPWM1Eh>

	HAL_GPIO_WritePin(LD_0_GPIO_Port, LD_0_Pin, GPIO_PIN_SET);
 8001180:	2201      	movs	r2, #1
 8001182:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001186:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800118a:	f001 f98b 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD_1_GPIO_Port, LD_1_Pin, GPIO_PIN_SET);
 800118e:	2201      	movs	r2, #1
 8001190:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001194:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001198:	f001 f984 	bl	80024a4 <HAL_GPIO_WritePin>

	this -> Is_reached = false;
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <_ZN3PWM5brakeEv+0x68>)
 800119e:	2200      	movs	r2, #0
 80011a0:	701a      	strb	r2, [r3, #0]

	this -> old_pwm = 0;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]

	delete function;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <_ZN3PWM5brakeEv+0x5e>
 80011ae:	2101      	movs	r1, #1
 80011b0:	4618      	mov	r0, r3
 80011b2:	f004 fc91 	bl	8005ad8 <_ZdlPvj>

}
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200000a8 	.word	0x200000a8

080011c4 <_ZN3PWM4freeEv>:
void PWM::free(void){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]

	Function * function = new Function();
 80011cc:	2001      	movs	r0, #1
 80011ce:	f004 fc94 	bl	8005afa <_Znwj>
 80011d2:	4603      	mov	r3, r0
 80011d4:	60fb      	str	r3, [r7, #12]

	function -> outputPWM0(0);
 80011d6:	2100      	movs	r1, #0
 80011d8:	68f8      	ldr	r0, [r7, #12]
 80011da:	f7ff fdb9 	bl	8000d50 <_ZN8Function10outputPWM0Eh>
	function -> outputPWM1(0);
 80011de:	2100      	movs	r1, #0
 80011e0:	68f8      	ldr	r0, [r7, #12]
 80011e2:	f7ff fd81 	bl	8000ce8 <_ZN8Function10outputPWM1Eh>

	HAL_GPIO_WritePin(LD_0_GPIO_Port, LD_0_Pin, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f0:	f001 f958 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD_1_GPIO_Port, LD_1_Pin, GPIO_PIN_RESET);
 80011f4:	2200      	movs	r2, #0
 80011f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fe:	f001 f951 	bl	80024a4 <HAL_GPIO_WritePin>

	this -> Is_reached = false;
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <_ZN3PWM4freeEv+0x64>)
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]

	HAL_Delay(500);
 8001208:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800120c:	f000 fe14 	bl	8001e38 <HAL_Delay>

	delete function;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <_ZN3PWM4freeEv+0x5a>
 8001216:	2101      	movs	r1, #1
 8001218:	4618      	mov	r0, r3
 800121a:	f004 fc5d 	bl	8005ad8 <_ZdlPvj>
}
 800121e:	bf00      	nop
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200000a8 	.word	0x200000a8

0800122c <_ZN3PWM14get_Is_reachedEv>:

bool PWM::get_Is_reached(){
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]

	return this -> Is_reached;
 8001234:	4b03      	ldr	r3, [pc, #12]	; (8001244 <_ZN3PWM14get_Is_reachedEv+0x18>)
 8001236:	781b      	ldrb	r3, [r3, #0]
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	200000a8 	.word	0x200000a8

08001248 <_ZN7Encoder4EN_1Ev>:

#include "main.h"
#include "Encoder.hpp"


void Encoder::EN_1(void){
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]



	if(HAL_GPIO_ReadPin(EN_A_GPIO_Port,EN_A_Pin))
 8001250:	2102      	movs	r1, #2
 8001252:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001256:	f001 f90d 	bl	8002474 <HAL_GPIO_ReadPin>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	bf14      	ite	ne
 8001260:	2301      	movne	r3, #1
 8001262:	2300      	moveq	r3, #0
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b00      	cmp	r3, #0
 8001268:	d018      	beq.n	800129c <_ZN7Encoder4EN_1Ev+0x54>
	  {
		  if(HAL_GPIO_ReadPin(EN_B_GPIO_Port,EN_B_Pin))
 800126a:	2108      	movs	r1, #8
 800126c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001270:	f001 f900 	bl	8002474 <HAL_GPIO_ReadPin>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	bf14      	ite	ne
 800127a:	2301      	movne	r3, #1
 800127c:	2300      	moveq	r3, #0
 800127e:	b2db      	uxtb	r3, r3
 8001280:	2b00      	cmp	r3, #0
 8001282:	d005      	beq.n	8001290 <_ZN7Encoder4EN_1Ev+0x48>
		  {
			  this -> pulse_cnt--;
 8001284:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <_ZN7Encoder4EN_1Ev+0x8c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	3b01      	subs	r3, #1
 800128a:	4a12      	ldr	r2, [pc, #72]	; (80012d4 <_ZN7Encoder4EN_1Ev+0x8c>)
 800128c:	6013      	str	r3, [r2, #0]
			  this -> pulse_cnt--;
		  }
	  }


}
 800128e:	e01d      	b.n	80012cc <_ZN7Encoder4EN_1Ev+0x84>
			  this -> pulse_cnt++;
 8001290:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <_ZN7Encoder4EN_1Ev+0x8c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	3301      	adds	r3, #1
 8001296:	4a0f      	ldr	r2, [pc, #60]	; (80012d4 <_ZN7Encoder4EN_1Ev+0x8c>)
 8001298:	6013      	str	r3, [r2, #0]
}
 800129a:	e017      	b.n	80012cc <_ZN7Encoder4EN_1Ev+0x84>
		  if(HAL_GPIO_ReadPin(EN_B_GPIO_Port,EN_B_Pin))
 800129c:	2108      	movs	r1, #8
 800129e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a2:	f001 f8e7 	bl	8002474 <HAL_GPIO_ReadPin>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	bf14      	ite	ne
 80012ac:	2301      	movne	r3, #1
 80012ae:	2300      	moveq	r3, #0
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d005      	beq.n	80012c2 <_ZN7Encoder4EN_1Ev+0x7a>
			  this -> pulse_cnt++;
 80012b6:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <_ZN7Encoder4EN_1Ev+0x8c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	3301      	adds	r3, #1
 80012bc:	4a05      	ldr	r2, [pc, #20]	; (80012d4 <_ZN7Encoder4EN_1Ev+0x8c>)
 80012be:	6013      	str	r3, [r2, #0]
}
 80012c0:	e004      	b.n	80012cc <_ZN7Encoder4EN_1Ev+0x84>
			  this -> pulse_cnt--;
 80012c2:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <_ZN7Encoder4EN_1Ev+0x8c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	4a02      	ldr	r2, [pc, #8]	; (80012d4 <_ZN7Encoder4EN_1Ev+0x8c>)
 80012ca:	6013      	str	r3, [r2, #0]
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	200000ac 	.word	0x200000ac

080012d8 <_ZN7Encoder4EN_3Ev>:
void Encoder::EN_3(void){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]



	if(HAL_GPIO_ReadPin(EN_B_GPIO_Port,EN_B_Pin))
 80012e0:	2108      	movs	r1, #8
 80012e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e6:	f001 f8c5 	bl	8002474 <HAL_GPIO_ReadPin>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	bf14      	ite	ne
 80012f0:	2301      	movne	r3, #1
 80012f2:	2300      	moveq	r3, #0
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d018      	beq.n	800132c <_ZN7Encoder4EN_3Ev+0x54>
	  {
		  if(HAL_GPIO_ReadPin(EN_A_GPIO_Port,EN_A_Pin))
 80012fa:	2102      	movs	r1, #2
 80012fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001300:	f001 f8b8 	bl	8002474 <HAL_GPIO_ReadPin>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	bf14      	ite	ne
 800130a:	2301      	movne	r3, #1
 800130c:	2300      	moveq	r3, #0
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	d005      	beq.n	8001320 <_ZN7Encoder4EN_3Ev+0x48>
		  {
			  this -> pulse_cnt++;
 8001314:	4b13      	ldr	r3, [pc, #76]	; (8001364 <_ZN7Encoder4EN_3Ev+0x8c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	3301      	adds	r3, #1
 800131a:	4a12      	ldr	r2, [pc, #72]	; (8001364 <_ZN7Encoder4EN_3Ev+0x8c>)
 800131c:	6013      	str	r3, [r2, #0]
			  this -> pulse_cnt++;
	  	  }
	  }


}
 800131e:	e01d      	b.n	800135c <_ZN7Encoder4EN_3Ev+0x84>
			  this -> pulse_cnt--;
 8001320:	4b10      	ldr	r3, [pc, #64]	; (8001364 <_ZN7Encoder4EN_3Ev+0x8c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	3b01      	subs	r3, #1
 8001326:	4a0f      	ldr	r2, [pc, #60]	; (8001364 <_ZN7Encoder4EN_3Ev+0x8c>)
 8001328:	6013      	str	r3, [r2, #0]
}
 800132a:	e017      	b.n	800135c <_ZN7Encoder4EN_3Ev+0x84>
		  if(HAL_GPIO_ReadPin(EN_A_GPIO_Port,EN_A_Pin))
 800132c:	2102      	movs	r1, #2
 800132e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001332:	f001 f89f 	bl	8002474 <HAL_GPIO_ReadPin>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	bf14      	ite	ne
 800133c:	2301      	movne	r3, #1
 800133e:	2300      	moveq	r3, #0
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	d005      	beq.n	8001352 <_ZN7Encoder4EN_3Ev+0x7a>
			  this -> pulse_cnt--;
 8001346:	4b07      	ldr	r3, [pc, #28]	; (8001364 <_ZN7Encoder4EN_3Ev+0x8c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	3b01      	subs	r3, #1
 800134c:	4a05      	ldr	r2, [pc, #20]	; (8001364 <_ZN7Encoder4EN_3Ev+0x8c>)
 800134e:	6013      	str	r3, [r2, #0]
}
 8001350:	e004      	b.n	800135c <_ZN7Encoder4EN_3Ev+0x84>
			  this -> pulse_cnt++;
 8001352:	4b04      	ldr	r3, [pc, #16]	; (8001364 <_ZN7Encoder4EN_3Ev+0x8c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	3301      	adds	r3, #1
 8001358:	4a02      	ldr	r2, [pc, #8]	; (8001364 <_ZN7Encoder4EN_3Ev+0x8c>)
 800135a:	6013      	str	r3, [r2, #0]
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	200000ac 	.word	0x200000ac

08001368 <_ZN7Encoder13get_pulse_cntEv>:

int Encoder::get_pulse_cnt(){
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	return this -> pulse_cnt;
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <_ZN7Encoder13get_pulse_cntEv+0x18>)
 8001372:	681b      	ldr	r3, [r3, #0]
}
 8001374:	4618      	mov	r0, r3
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	200000ac 	.word	0x200000ac

08001384 <HAL_UART_RxCpltCallback>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM6_Init(void);
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef*UartHandle){
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, (uint8_t*)Rxdata, sizeof(Rxdata));
 800138c:	2204      	movs	r2, #4
 800138e:	4904      	ldr	r1, [pc, #16]	; (80013a0 <HAL_UART_RxCpltCallback+0x1c>)
 8001390:	4804      	ldr	r0, [pc, #16]	; (80013a4 <HAL_UART_RxCpltCallback+0x20>)
 8001392:	f003 fce2 	bl	8004d5a <HAL_UART_Receive_IT>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	200001e8 	.word	0x200001e8
 80013a4:	20000148 	.word	0x20000148

080013a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ae:	f000 fcdd 	bl	8001d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b2:	f000 f823 	bl	80013fc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013b6:	f000 f9bf 	bl	8001738 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 80013ba:	f000 f989 	bl	80016d0 <_ZL19MX_USART2_UART_Initv>
  MX_TIM1_Init();
 80013be:	f000 f885 	bl	80014cc <_ZL12MX_TIM1_Initv>
  MX_TIM6_Init();
 80013c2:	f000 f945 	bl	8001650 <_ZL12MX_TIM6_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 80013c6:	480a      	ldr	r0, [pc, #40]	; (80013f0 <main+0x48>)
 80013c8:	f002 fb64 	bl	8003a94 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t*)Rxdata, sizeof(Rxdata));
 80013cc:	2204      	movs	r2, #4
 80013ce:	4909      	ldr	r1, [pc, #36]	; (80013f4 <main+0x4c>)
 80013d0:	4809      	ldr	r0, [pc, #36]	; (80013f8 <main+0x50>)
 80013d2:	f003 fcc2 	bl	8004d5a <HAL_UART_Receive_IT>
  PWM* pwm = new PWM();
 80013d6:	200c      	movs	r0, #12
 80013d8:	f004 fb8f 	bl	8005afa <_Znwj>
 80013dc:	4603      	mov	r3, r0
 80013de:	461c      	mov	r4, r3
 80013e0:	4620      	mov	r0, r4
 80013e2:	f7ff fb07 	bl	80009f4 <_ZN3PWMC1Ev>
 80013e6:	607c      	str	r4, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  pwm -> control_PWM();
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff fd35 	bl	8000e58 <_ZN3PWM11control_PWMEv>
 80013ee:	e7fb      	b.n	80013e8 <main+0x40>
 80013f0:	200000fc 	.word	0x200000fc
 80013f4:	200001e8 	.word	0x200001e8
 80013f8:	20000148 	.word	0x20000148

080013fc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b096      	sub	sp, #88	; 0x58
 8001400:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001402:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001406:	2228      	movs	r2, #40	; 0x28
 8001408:	2100      	movs	r1, #0
 800140a:	4618      	mov	r0, r3
 800140c:	f004 fbd2 	bl	8005bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001410:	f107 031c 	add.w	r3, r7, #28
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
 800142c:	611a      	str	r2, [r3, #16]
 800142e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001430:	2302      	movs	r3, #2
 8001432:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001434:	2301      	movs	r3, #1
 8001436:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001438:	2310      	movs	r3, #16
 800143a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800143c:	2302      	movs	r3, #2
 800143e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001440:	2300      	movs	r3, #0
 8001442:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001444:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001448:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800144a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800144e:	4618      	mov	r0, r3
 8001450:	f001 f864 	bl	800251c <HAL_RCC_OscConfig>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	bf14      	ite	ne
 800145a:	2301      	movne	r3, #1
 800145c:	2300      	moveq	r3, #0
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <_Z18SystemClock_Configv+0x6c>
  {
    Error_Handler();
 8001464:	f000 fa04 	bl	8001870 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001468:	230f      	movs	r3, #15
 800146a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800146c:	2302      	movs	r3, #2
 800146e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001470:	2300      	movs	r3, #0
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001474:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001478:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800147a:	2300      	movs	r3, #0
 800147c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	2100      	movs	r1, #0
 8001484:	4618      	mov	r0, r3
 8001486:	f001 ff51 	bl	800332c <HAL_RCC_ClockConfig>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	bf14      	ite	ne
 8001490:	2301      	movne	r3, #1
 8001492:	2300      	moveq	r3, #0
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800149a:	f000 f9e9 	bl	8001870 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800149e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	4618      	mov	r0, r3
 80014ac:	f002 f974 	bl	8003798 <HAL_RCCEx_PeriphCLKConfig>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	bf14      	ite	ne
 80014b6:	2301      	movne	r3, #1
 80014b8:	2300      	moveq	r3, #0
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <_Z18SystemClock_Configv+0xc8>
  {
    Error_Handler();
 80014c0:	f000 f9d6 	bl	8001870 <Error_Handler>
  }
}
 80014c4:	bf00      	nop
 80014c6:	3758      	adds	r7, #88	; 0x58
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08e      	sub	sp, #56	; 0x38
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014de:	463b      	mov	r3, r7
 80014e0:	222c      	movs	r2, #44	; 0x2c
 80014e2:	2100      	movs	r1, #0
 80014e4:	4618      	mov	r0, r3
 80014e6:	f004 fb65 	bl	8005bb4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014ea:	4b55      	ldr	r3, [pc, #340]	; (8001640 <_ZL12MX_TIM1_Initv+0x174>)
 80014ec:	4a55      	ldr	r2, [pc, #340]	; (8001644 <_ZL12MX_TIM1_Initv+0x178>)
 80014ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014f0:	4b53      	ldr	r3, [pc, #332]	; (8001640 <_ZL12MX_TIM1_Initv+0x174>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f6:	4b52      	ldr	r3, [pc, #328]	; (8001640 <_ZL12MX_TIM1_Initv+0x174>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 799;
 80014fc:	4b50      	ldr	r3, [pc, #320]	; (8001640 <_ZL12MX_TIM1_Initv+0x174>)
 80014fe:	f240 321f 	movw	r2, #799	; 0x31f
 8001502:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001504:	4b4e      	ldr	r3, [pc, #312]	; (8001640 <_ZL12MX_TIM1_Initv+0x174>)
 8001506:	2200      	movs	r2, #0
 8001508:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800150a:	4b4d      	ldr	r3, [pc, #308]	; (8001640 <_ZL12MX_TIM1_Initv+0x174>)
 800150c:	2200      	movs	r2, #0
 800150e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001510:	4b4b      	ldr	r3, [pc, #300]	; (8001640 <_ZL12MX_TIM1_Initv+0x174>)
 8001512:	2280      	movs	r2, #128	; 0x80
 8001514:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001516:	484a      	ldr	r0, [pc, #296]	; (8001640 <_ZL12MX_TIM1_Initv+0x174>)
 8001518:	f002 fb18 	bl	8003b4c <HAL_TIM_PWM_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	bf14      	ite	ne
 8001522:	2301      	movne	r3, #1
 8001524:	2300      	moveq	r3, #0
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <_ZL12MX_TIM1_Initv+0x64>
  {
    Error_Handler();
 800152c:	f000 f9a0 	bl	8001870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001530:	2300      	movs	r3, #0
 8001532:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001534:	2300      	movs	r3, #0
 8001536:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800153c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001540:	4619      	mov	r1, r3
 8001542:	483f      	ldr	r0, [pc, #252]	; (8001640 <_ZL12MX_TIM1_Initv+0x174>)
 8001544:	f003 fa92 	bl	8004a6c <HAL_TIMEx_MasterConfigSynchronization>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	bf14      	ite	ne
 800154e:	2301      	movne	r3, #1
 8001550:	2300      	moveq	r3, #0
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <_ZL12MX_TIM1_Initv+0x90>
  {
    Error_Handler();
 8001558:	f000 f98a 	bl	8001870 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ASSYMETRIC_PWM1;
 800155c:	4b3a      	ldr	r3, [pc, #232]	; (8001648 <_ZL12MX_TIM1_Initv+0x17c>)
 800155e:	4a3b      	ldr	r2, [pc, #236]	; (800164c <_ZL12MX_TIM1_Initv+0x180>)
 8001560:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001562:	4b39      	ldr	r3, [pc, #228]	; (8001648 <_ZL12MX_TIM1_Initv+0x17c>)
 8001564:	2200      	movs	r2, #0
 8001566:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001568:	4b37      	ldr	r3, [pc, #220]	; (8001648 <_ZL12MX_TIM1_Initv+0x17c>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800156e:	4b36      	ldr	r3, [pc, #216]	; (8001648 <_ZL12MX_TIM1_Initv+0x17c>)
 8001570:	2200      	movs	r2, #0
 8001572:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001574:	4b34      	ldr	r3, [pc, #208]	; (8001648 <_ZL12MX_TIM1_Initv+0x17c>)
 8001576:	2200      	movs	r2, #0
 8001578:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800157a:	4b33      	ldr	r3, [pc, #204]	; (8001648 <_ZL12MX_TIM1_Initv+0x17c>)
 800157c:	2200      	movs	r2, #0
 800157e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001580:	4b31      	ldr	r3, [pc, #196]	; (8001648 <_ZL12MX_TIM1_Initv+0x17c>)
 8001582:	2200      	movs	r2, #0
 8001584:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001586:	2204      	movs	r2, #4
 8001588:	492f      	ldr	r1, [pc, #188]	; (8001648 <_ZL12MX_TIM1_Initv+0x17c>)
 800158a:	482d      	ldr	r0, [pc, #180]	; (8001640 <_ZL12MX_TIM1_Initv+0x174>)
 800158c:	f002 fd42 	bl	8004014 <HAL_TIM_PWM_ConfigChannel>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	bf14      	ite	ne
 8001596:	2301      	movne	r3, #1
 8001598:	2300      	moveq	r3, #0
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <_ZL12MX_TIM1_Initv+0xd8>
  {
    Error_Handler();
 80015a0:	f000 f966 	bl	8001870 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 80015a4:	4b26      	ldr	r3, [pc, #152]	; (8001640 <_ZL12MX_TIM1_Initv+0x174>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	699a      	ldr	r2, [r3, #24]
 80015aa:	4b25      	ldr	r3, [pc, #148]	; (8001640 <_ZL12MX_TIM1_Initv+0x174>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015b4:	2208      	movs	r2, #8
 80015b6:	4924      	ldr	r1, [pc, #144]	; (8001648 <_ZL12MX_TIM1_Initv+0x17c>)
 80015b8:	4821      	ldr	r0, [pc, #132]	; (8001640 <_ZL12MX_TIM1_Initv+0x174>)
 80015ba:	f002 fd2b 	bl	8004014 <HAL_TIM_PWM_ConfigChannel>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	bf14      	ite	ne
 80015c4:	2301      	movne	r3, #1
 80015c6:	2300      	moveq	r3, #0
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <_ZL12MX_TIM1_Initv+0x106>
  {
    Error_Handler();
 80015ce:	f000 f94f 	bl	8001870 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_3);
 80015d2:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <_ZL12MX_TIM1_Initv+0x174>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	69da      	ldr	r2, [r3, #28]
 80015d8:	4b19      	ldr	r3, [pc, #100]	; (8001640 <_ZL12MX_TIM1_Initv+0x174>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 0208 	bic.w	r2, r2, #8
 80015e0:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 13;
 80015ee:	230d      	movs	r3, #13
 80015f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001604:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001608:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800160e:	2300      	movs	r3, #0
 8001610:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001612:	463b      	mov	r3, r7
 8001614:	4619      	mov	r1, r3
 8001616:	480a      	ldr	r0, [pc, #40]	; (8001640 <_ZL12MX_TIM1_Initv+0x174>)
 8001618:	f003 fa96 	bl	8004b48 <HAL_TIMEx_ConfigBreakDeadTime>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	bf14      	ite	ne
 8001622:	2301      	movne	r3, #1
 8001624:	2300      	moveq	r3, #0
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <_ZL12MX_TIM1_Initv+0x164>
  {
    Error_Handler();
 800162c:	f000 f920 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001630:	4803      	ldr	r0, [pc, #12]	; (8001640 <_ZL12MX_TIM1_Initv+0x174>)
 8001632:	f000 f98d 	bl	8001950 <HAL_TIM_MspPostInit>

}
 8001636:	bf00      	nop
 8001638:	3738      	adds	r7, #56	; 0x38
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200000b0 	.word	0x200000b0
 8001644:	40012c00 	.word	0x40012c00
 8001648:	200001cc 	.word	0x200001cc
 800164c:	00010060 	.word	0x00010060

08001650 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001660:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <_ZL12MX_TIM6_Initv+0x78>)
 8001662:	4a1a      	ldr	r2, [pc, #104]	; (80016cc <_ZL12MX_TIM6_Initv+0x7c>)
 8001664:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9999;
 8001666:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <_ZL12MX_TIM6_Initv+0x78>)
 8001668:	f242 720f 	movw	r2, #9999	; 0x270f
 800166c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166e:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <_ZL12MX_TIM6_Initv+0x78>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 159;
 8001674:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <_ZL12MX_TIM6_Initv+0x78>)
 8001676:	229f      	movs	r2, #159	; 0x9f
 8001678:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800167a:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <_ZL12MX_TIM6_Initv+0x78>)
 800167c:	2280      	movs	r2, #128	; 0x80
 800167e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001680:	4811      	ldr	r0, [pc, #68]	; (80016c8 <_ZL12MX_TIM6_Initv+0x78>)
 8001682:	f002 f9af 	bl	80039e4 <HAL_TIM_Base_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	bf14      	ite	ne
 800168c:	2301      	movne	r3, #1
 800168e:	2300      	moveq	r3, #0
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 8001696:	f000 f8eb 	bl	8001870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800169a:	2300      	movs	r3, #0
 800169c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	4619      	mov	r1, r3
 80016a6:	4808      	ldr	r0, [pc, #32]	; (80016c8 <_ZL12MX_TIM6_Initv+0x78>)
 80016a8:	f003 f9e0 	bl	8004a6c <HAL_TIMEx_MasterConfigSynchronization>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	bf14      	ite	ne
 80016b2:	2301      	movne	r3, #1
 80016b4:	2300      	moveq	r3, #0
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 80016bc:	f000 f8d8 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80016c0:	bf00      	nop
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	200000fc 	.word	0x200000fc
 80016cc:	40001000 	.word	0x40001000

080016d0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016d4:	4b16      	ldr	r3, [pc, #88]	; (8001730 <_ZL19MX_USART2_UART_Initv+0x60>)
 80016d6:	4a17      	ldr	r2, [pc, #92]	; (8001734 <_ZL19MX_USART2_UART_Initv+0x64>)
 80016d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <_ZL19MX_USART2_UART_Initv+0x60>)
 80016dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016e2:	4b13      	ldr	r3, [pc, #76]	; (8001730 <_ZL19MX_USART2_UART_Initv+0x60>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <_ZL19MX_USART2_UART_Initv+0x60>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016ee:	4b10      	ldr	r3, [pc, #64]	; (8001730 <_ZL19MX_USART2_UART_Initv+0x60>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016f4:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <_ZL19MX_USART2_UART_Initv+0x60>)
 80016f6:	220c      	movs	r2, #12
 80016f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fa:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <_ZL19MX_USART2_UART_Initv+0x60>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001700:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001702:	2200      	movs	r2, #0
 8001704:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001706:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001708:	2200      	movs	r2, #0
 800170a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800170c:	4b08      	ldr	r3, [pc, #32]	; (8001730 <_ZL19MX_USART2_UART_Initv+0x60>)
 800170e:	2200      	movs	r2, #0
 8001710:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001712:	4807      	ldr	r0, [pc, #28]	; (8001730 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001714:	f003 fad3 	bl	8004cbe <HAL_UART_Init>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	bf14      	ite	ne
 800171e:	2301      	movne	r3, #1
 8001720:	2300      	moveq	r3, #0
 8001722:	b2db      	uxtb	r3, r3
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8001728:	f000 f8a2 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000148 	.word	0x20000148
 8001734:	40004400 	.word	0x40004400

08001738 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173e:	f107 030c 	add.w	r3, r7, #12
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
 800174c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800174e:	4b45      	ldr	r3, [pc, #276]	; (8001864 <_ZL12MX_GPIO_Initv+0x12c>)
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	4a44      	ldr	r2, [pc, #272]	; (8001864 <_ZL12MX_GPIO_Initv+0x12c>)
 8001754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001758:	6153      	str	r3, [r2, #20]
 800175a:	4b42      	ldr	r3, [pc, #264]	; (8001864 <_ZL12MX_GPIO_Initv+0x12c>)
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001766:	4b3f      	ldr	r3, [pc, #252]	; (8001864 <_ZL12MX_GPIO_Initv+0x12c>)
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	4a3e      	ldr	r2, [pc, #248]	; (8001864 <_ZL12MX_GPIO_Initv+0x12c>)
 800176c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001770:	6153      	str	r3, [r2, #20]
 8001772:	4b3c      	ldr	r3, [pc, #240]	; (8001864 <_ZL12MX_GPIO_Initv+0x12c>)
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD_0_Pin|LD_1_Pin, GPIO_PIN_RESET);
 800177e:	2200      	movs	r2, #0
 8001780:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001784:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001788:	f000 fe8c 	bl	80024a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EN_A_Pin EN_B_Pin */
  GPIO_InitStruct.Pin = EN_A_Pin|EN_B_Pin;
 800178c:	230a      	movs	r3, #10
 800178e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001790:	4b35      	ldr	r3, [pc, #212]	; (8001868 <_ZL12MX_GPIO_Initv+0x130>)
 8001792:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001798:	f107 030c 	add.w	r3, r7, #12
 800179c:	4619      	mov	r1, r3
 800179e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a2:	f000 fcf5 	bl	8002190 <HAL_GPIO_Init>

  /*Configure GPIO pin : MN_0_Pin */
  GPIO_InitStruct.Pin = MN_0_Pin;
 80017a6:	2310      	movs	r3, #16
 80017a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MN_0_GPIO_Port, &GPIO_InitStruct);
 80017b2:	f107 030c 	add.w	r3, r7, #12
 80017b6:	4619      	mov	r1, r3
 80017b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017bc:	f000 fce8 	bl	8002190 <HAL_GPIO_Init>

  /*Configure GPIO pins : MN_1_Pin MN_2_Pin MN_3_Pin */
  GPIO_InitStruct.Pin = MN_1_Pin|MN_2_Pin|MN_3_Pin;
 80017c0:	23e0      	movs	r3, #224	; 0xe0
 80017c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c4:	2300      	movs	r3, #0
 80017c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017c8:	2301      	movs	r3, #1
 80017ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017cc:	f107 030c 	add.w	r3, r7, #12
 80017d0:	4619      	mov	r1, r3
 80017d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d6:	f000 fcdb 	bl	8002190 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_0_Pin LD_1_Pin */
  GPIO_InitStruct.Pin = LD_0_Pin|LD_1_Pin;
 80017da:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80017de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e0:	2301      	movs	r3, #1
 80017e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e8:	2300      	movs	r3, #0
 80017ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ec:	f107 030c 	add.w	r3, r7, #12
 80017f0:	4619      	mov	r1, r3
 80017f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f6:	f000 fccb 	bl	8002190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017fa:	2308      	movs	r3, #8
 80017fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fe:	2302      	movs	r3, #2
 8001800:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001806:	2300      	movs	r3, #0
 8001808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800180a:	2301      	movs	r3, #1
 800180c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180e:	f107 030c 	add.w	r3, r7, #12
 8001812:	4619      	mov	r1, r3
 8001814:	4815      	ldr	r0, [pc, #84]	; (800186c <_ZL12MX_GPIO_Initv+0x134>)
 8001816:	f000 fcbb 	bl	8002190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800181a:	2320      	movs	r3, #32
 800181c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2300      	movs	r3, #0
 8001828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800182a:	2302      	movs	r3, #2
 800182c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182e:	f107 030c 	add.w	r3, r7, #12
 8001832:	4619      	mov	r1, r3
 8001834:	480d      	ldr	r0, [pc, #52]	; (800186c <_ZL12MX_GPIO_Initv+0x134>)
 8001836:	f000 fcab 	bl	8002190 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2100      	movs	r1, #0
 800183e:	2007      	movs	r0, #7
 8001840:	f000 fbf9 	bl	8002036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001844:	2007      	movs	r0, #7
 8001846:	f000 fc12 	bl	800206e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	2100      	movs	r1, #0
 800184e:	2009      	movs	r0, #9
 8001850:	f000 fbf1 	bl	8002036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001854:	2009      	movs	r0, #9
 8001856:	f000 fc0a 	bl	800206e <HAL_NVIC_EnableIRQ>

}
 800185a:	bf00      	nop
 800185c:	3720      	adds	r7, #32
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40021000 	.word	0x40021000
 8001868:	10110000 	.word	0x10110000
 800186c:	48000400 	.word	0x48000400

08001870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001874:	b672      	cpsid	i
}
 8001876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001878:	e7fe      	b.n	8001878 <Error_Handler+0x8>
	...

0800187c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001882:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <HAL_MspInit+0x44>)
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	4a0e      	ldr	r2, [pc, #56]	; (80018c0 <HAL_MspInit+0x44>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	6193      	str	r3, [r2, #24]
 800188e:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <HAL_MspInit+0x44>)
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	607b      	str	r3, [r7, #4]
 8001898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <HAL_MspInit+0x44>)
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	4a08      	ldr	r2, [pc, #32]	; (80018c0 <HAL_MspInit+0x44>)
 80018a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a4:	61d3      	str	r3, [r2, #28]
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <HAL_MspInit+0x44>)
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ae:	603b      	str	r3, [r7, #0]
 80018b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	40021000 	.word	0x40021000

080018c4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <HAL_TIM_PWM_MspInit+0x38>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d10b      	bne.n	80018ee <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018d6:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <HAL_TIM_PWM_MspInit+0x3c>)
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	4a09      	ldr	r2, [pc, #36]	; (8001900 <HAL_TIM_PWM_MspInit+0x3c>)
 80018dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018e0:	6193      	str	r3, [r2, #24]
 80018e2:	4b07      	ldr	r3, [pc, #28]	; (8001900 <HAL_TIM_PWM_MspInit+0x3c>)
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80018ee:	bf00      	nop
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	40012c00 	.word	0x40012c00
 8001900:	40021000 	.word	0x40021000

08001904 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a0d      	ldr	r2, [pc, #52]	; (8001948 <HAL_TIM_Base_MspInit+0x44>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d113      	bne.n	800193e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001916:	4b0d      	ldr	r3, [pc, #52]	; (800194c <HAL_TIM_Base_MspInit+0x48>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	4a0c      	ldr	r2, [pc, #48]	; (800194c <HAL_TIM_Base_MspInit+0x48>)
 800191c:	f043 0310 	orr.w	r3, r3, #16
 8001920:	61d3      	str	r3, [r2, #28]
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <HAL_TIM_Base_MspInit+0x48>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	f003 0310 	and.w	r3, r3, #16
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 800192e:	2200      	movs	r2, #0
 8001930:	2100      	movs	r1, #0
 8001932:	2036      	movs	r0, #54	; 0x36
 8001934:	f000 fb7f 	bl	8002036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8001938:	2036      	movs	r0, #54	; 0x36
 800193a:	f000 fb98 	bl	800206e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40001000 	.word	0x40001000
 800194c:	40021000 	.word	0x40021000

08001950 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08a      	sub	sp, #40	; 0x28
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a31      	ldr	r2, [pc, #196]	; (8001a34 <HAL_TIM_MspPostInit+0xe4>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d15b      	bne.n	8001a2a <HAL_TIM_MspPostInit+0xda>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001972:	4b31      	ldr	r3, [pc, #196]	; (8001a38 <HAL_TIM_MspPostInit+0xe8>)
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	4a30      	ldr	r2, [pc, #192]	; (8001a38 <HAL_TIM_MspPostInit+0xe8>)
 8001978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800197c:	6153      	str	r3, [r2, #20]
 800197e:	4b2e      	ldr	r3, [pc, #184]	; (8001a38 <HAL_TIM_MspPostInit+0xe8>)
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198a:	4b2b      	ldr	r3, [pc, #172]	; (8001a38 <HAL_TIM_MspPostInit+0xe8>)
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	4a2a      	ldr	r2, [pc, #168]	; (8001a38 <HAL_TIM_MspPostInit+0xe8>)
 8001990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001994:	6153      	str	r3, [r2, #20]
 8001996:	4b28      	ldr	r3, [pc, #160]	; (8001a38 <HAL_TIM_MspPostInit+0xe8>)
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019a2:	2301      	movs	r3, #1
 80019a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a6:	2302      	movs	r3, #2
 80019a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019aa:	2301      	movs	r3, #1
 80019ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ae:	2300      	movs	r3, #0
 80019b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80019b2:	2306      	movs	r3, #6
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b6:	f107 0314 	add.w	r3, r7, #20
 80019ba:	4619      	mov	r1, r3
 80019bc:	481f      	ldr	r0, [pc, #124]	; (8001a3c <HAL_TIM_MspPostInit+0xec>)
 80019be:	f000 fbe7 	bl	8002190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019c2:	2302      	movs	r3, #2
 80019c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c6:	2302      	movs	r3, #2
 80019c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ce:	2300      	movs	r3, #0
 80019d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80019d2:	2306      	movs	r3, #6
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d6:	f107 0314 	add.w	r3, r7, #20
 80019da:	4619      	mov	r1, r3
 80019dc:	4817      	ldr	r0, [pc, #92]	; (8001a3c <HAL_TIM_MspPostInit+0xec>)
 80019de:	f000 fbd7 	bl	8002190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ec:	2301      	movs	r3, #1
 80019ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f0:	2300      	movs	r3, #0
 80019f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80019f4:	2306      	movs	r3, #6
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	4619      	mov	r1, r3
 80019fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a02:	f000 fbc5 	bl	8002190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	2300      	movs	r3, #0
 8001a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001a18:	2306      	movs	r3, #6
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	4619      	mov	r1, r3
 8001a22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a26:	f000 fbb3 	bl	8002190 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a2a:	bf00      	nop
 8001a2c:	3728      	adds	r7, #40	; 0x28
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40012c00 	.word	0x40012c00
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	48000400 	.word	0x48000400

08001a40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08a      	sub	sp, #40	; 0x28
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a48:	f107 0314 	add.w	r3, r7, #20
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a1c      	ldr	r2, [pc, #112]	; (8001ad0 <HAL_UART_MspInit+0x90>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d131      	bne.n	8001ac6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a62:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <HAL_UART_MspInit+0x94>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	4a1b      	ldr	r2, [pc, #108]	; (8001ad4 <HAL_UART_MspInit+0x94>)
 8001a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a6c:	61d3      	str	r3, [r2, #28]
 8001a6e:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <HAL_UART_MspInit+0x94>)
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a76:	613b      	str	r3, [r7, #16]
 8001a78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7a:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <HAL_UART_MspInit+0x94>)
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	4a15      	ldr	r2, [pc, #84]	; (8001ad4 <HAL_UART_MspInit+0x94>)
 8001a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a84:	6153      	str	r3, [r2, #20]
 8001a86:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <HAL_UART_MspInit+0x94>)
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8001a92:	f248 0304 	movw	r3, #32772	; 0x8004
 8001a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001aa4:	2307      	movs	r3, #7
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa8:	f107 0314 	add.w	r3, r7, #20
 8001aac:	4619      	mov	r1, r3
 8001aae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ab2:	f000 fb6d 	bl	8002190 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2100      	movs	r1, #0
 8001aba:	2026      	movs	r0, #38	; 0x26
 8001abc:	f000 fabb 	bl	8002036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ac0:	2026      	movs	r0, #38	; 0x26
 8001ac2:	f000 fad4 	bl	800206e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ac6:	bf00      	nop
 8001ac8:	3728      	adds	r7, #40	; 0x28
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40004400 	.word	0x40004400
 8001ad4:	40021000 	.word	0x40021000

08001ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001adc:	e7fe      	b.n	8001adc <NMI_Handler+0x4>

08001ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ae2:	e7fe      	b.n	8001ae2 <HardFault_Handler+0x4>

08001ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <MemManage_Handler+0x4>

08001aea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aee:	e7fe      	b.n	8001aee <BusFault_Handler+0x4>

08001af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001af4:	e7fe      	b.n	8001af4 <UsageFault_Handler+0x4>

08001af6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b24:	f000 f968 	bl	8001df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001b30:	2002      	movs	r0, #2
 8001b32:	f000 fccf 	bl	80024d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
  encoder -> EN_1();
 8001b36:	4b03      	ldr	r3, [pc, #12]	; (8001b44 <EXTI1_IRQHandler+0x18>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fb84 	bl	8001248 <_ZN7Encoder4EN_1Ev>
  /* USER CODE END EXTI1_IRQn 1 */
}
 8001b40:	bf00      	nop
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	200001ec 	.word	0x200001ec

08001b48 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001b4c:	2008      	movs	r0, #8
 8001b4e:	f000 fcc1 	bl	80024d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  encoder -> EN_3();
 8001b52:	4b03      	ldr	r3, [pc, #12]	; (8001b60 <EXTI3_IRQHandler+0x18>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fbbe 	bl	80012d8 <_ZN7Encoder4EN_3Ev>
  /* USER CODE END EXTI3_IRQn 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	200001ec 	.word	0x200001ec

08001b64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b68:	4802      	ldr	r0, [pc, #8]	; (8001b74 <USART2_IRQHandler+0x10>)
 8001b6a:	f003 f933 	bl	8004dd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000148 	.word	0x20000148

08001b78 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b7c:	4811      	ldr	r0, [pc, #68]	; (8001bc4 <TIM6_DAC1_IRQHandler+0x4c>)
 8001b7e:	f002 f929 	bl	8003dd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  Feedback::PID_pwm = feedback -> PID_control();
 8001b82:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <TIM6_DAC1_IRQHandler+0x50>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe ff6c 	bl	8000a64 <_ZN8Feedback11PID_controlEv>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <TIM6_DAC1_IRQHandler+0x54>)
 8001b92:	701a      	strb	r2, [r3, #0]

  if( pwm -> get_Is_reached() == false )
 8001b94:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <TIM6_DAC1_IRQHandler+0x58>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff fb47 	bl	800122c <_ZN3PWM14get_Is_reachedEv>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	bf0c      	ite	eq
 8001ba4:	2301      	moveq	r3, #1
 8001ba6:	2300      	movne	r3, #0
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d007      	beq.n	8001bbe <TIM6_DAC1_IRQHandler+0x46>
  {

	  Feedback::PID_pwm = 0;
 8001bae:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <TIM6_DAC1_IRQHandler+0x54>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	701a      	strb	r2, [r3, #0]
	  feedback -> reset_integral_diff();
 8001bb4:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <TIM6_DAC1_IRQHandler+0x50>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7fe ff43 	bl	8000a44 <_ZN8Feedback19reset_integral_diffEv>

  }

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	200000fc 	.word	0x200000fc
 8001bc8:	200001f4 	.word	0x200001f4
 8001bcc:	20000090 	.word	0x20000090
 8001bd0:	200001f0 	.word	0x200001f0

08001bd4 <_Z41__static_initialization_and_destruction_0ii>:
 8001bd4:	b590      	push	{r4, r7, lr}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d11c      	bne.n	8001c1e <_Z41__static_initialization_and_destruction_0ii+0x4a>
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d117      	bne.n	8001c1e <_Z41__static_initialization_and_destruction_0ii+0x4a>
Encoder* encoder = new Encoder();
 8001bee:	2001      	movs	r0, #1
 8001bf0:	f003 ff83 	bl	8005afa <_Znwj>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001bfa:	601a      	str	r2, [r3, #0]
PWM* pwm = new PWM();
 8001bfc:	200c      	movs	r0, #12
 8001bfe:	f003 ff7c 	bl	8005afa <_Znwj>
 8001c02:	4603      	mov	r3, r0
 8001c04:	461c      	mov	r4, r3
 8001c06:	4620      	mov	r0, r4
 8001c08:	f7fe fef4 	bl	80009f4 <_ZN3PWMC1Ev>
 8001c0c:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001c0e:	601c      	str	r4, [r3, #0]
Feedback* feedback = new Feedback();
 8001c10:	2001      	movs	r0, #1
 8001c12:	f003 ff72 	bl	8005afa <_Znwj>
 8001c16:	4603      	mov	r3, r0
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001c1c:	601a      	str	r2, [r3, #0]
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd90      	pop	{r4, r7, pc}
 8001c26:	bf00      	nop
 8001c28:	200001ec 	.word	0x200001ec
 8001c2c:	200001f0 	.word	0x200001f0
 8001c30:	200001f4 	.word	0x200001f4

08001c34 <_GLOBAL__sub_I_encoder>:
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001c3c:	2001      	movs	r0, #1
 8001c3e:	f7ff ffc9 	bl	8001bd4 <_Z41__static_initialization_and_destruction_0ii>
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
	return 1;
 8001c48:	2301      	movs	r3, #1
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <_kill>:

int _kill(int pid, int sig)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c5e:	f003 ff6f 	bl	8005b40 <__errno>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2216      	movs	r2, #22
 8001c66:	601a      	str	r2, [r3, #0]
	return -1;
 8001c68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <_exit>:

void _exit (int status)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff ffe7 	bl	8001c54 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c86:	e7fe      	b.n	8001c86 <_exit+0x12>

08001c88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c90:	4a14      	ldr	r2, [pc, #80]	; (8001ce4 <_sbrk+0x5c>)
 8001c92:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <_sbrk+0x60>)
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c9c:	4b13      	ldr	r3, [pc, #76]	; (8001cec <_sbrk+0x64>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d102      	bne.n	8001caa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ca4:	4b11      	ldr	r3, [pc, #68]	; (8001cec <_sbrk+0x64>)
 8001ca6:	4a12      	ldr	r2, [pc, #72]	; (8001cf0 <_sbrk+0x68>)
 8001ca8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001caa:	4b10      	ldr	r3, [pc, #64]	; (8001cec <_sbrk+0x64>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d207      	bcs.n	8001cc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cb8:	f003 ff42 	bl	8005b40 <__errno>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	220c      	movs	r2, #12
 8001cc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc6:	e009      	b.n	8001cdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cc8:	4b08      	ldr	r3, [pc, #32]	; (8001cec <_sbrk+0x64>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cce:	4b07      	ldr	r3, [pc, #28]	; (8001cec <_sbrk+0x64>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	4a05      	ldr	r2, [pc, #20]	; (8001cec <_sbrk+0x64>)
 8001cd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cda:	68fb      	ldr	r3, [r7, #12]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20003000 	.word	0x20003000
 8001ce8:	00000400 	.word	0x00000400
 8001cec:	200001f8 	.word	0x200001f8
 8001cf0:	20000220 	.word	0x20000220

08001cf4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <SystemInit+0x20>)
 8001cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cfe:	4a05      	ldr	r2, [pc, #20]	; (8001d14 <SystemInit+0x20>)
 8001d00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d50 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d1c:	480d      	ldr	r0, [pc, #52]	; (8001d54 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d1e:	490e      	ldr	r1, [pc, #56]	; (8001d58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d20:	4a0e      	ldr	r2, [pc, #56]	; (8001d5c <LoopForever+0xe>)
  movs r3, #0
 8001d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d24:	e002      	b.n	8001d2c <LoopCopyDataInit>

08001d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d2a:	3304      	adds	r3, #4

08001d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d30:	d3f9      	bcc.n	8001d26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d32:	4a0b      	ldr	r2, [pc, #44]	; (8001d60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d34:	4c0b      	ldr	r4, [pc, #44]	; (8001d64 <LoopForever+0x16>)
  movs r3, #0
 8001d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d38:	e001      	b.n	8001d3e <LoopFillZerobss>

08001d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d3c:	3204      	adds	r2, #4

08001d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d40:	d3fb      	bcc.n	8001d3a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d42:	f7ff ffd7 	bl	8001cf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d46:	f003 ff01 	bl	8005b4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d4a:	f7ff fb2d 	bl	80013a8 <main>

08001d4e <LoopForever>:

LoopForever:
    b LoopForever
 8001d4e:	e7fe      	b.n	8001d4e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d50:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d58:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001d5c:	08005e38 	.word	0x08005e38
  ldr r2, =_sbss
 8001d60:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001d64:	2000021c 	.word	0x2000021c

08001d68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d68:	e7fe      	b.n	8001d68 <ADC1_2_IRQHandler>
	...

08001d6c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d70:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <HAL_Init+0x28>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a07      	ldr	r2, [pc, #28]	; (8001d94 <HAL_Init+0x28>)
 8001d76:	f043 0310 	orr.w	r3, r3, #16
 8001d7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d7c:	2003      	movs	r0, #3
 8001d7e:	f000 f94f 	bl	8002020 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d82:	2000      	movs	r0, #0
 8001d84:	f000 f808 	bl	8001d98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d88:	f7ff fd78 	bl	800187c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40022000 	.word	0x40022000

08001d98 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001da0:	4b12      	ldr	r3, [pc, #72]	; (8001dec <HAL_InitTick+0x54>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <HAL_InitTick+0x58>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	4619      	mov	r1, r3
 8001daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db6:	4618      	mov	r0, r3
 8001db8:	f000 f967 	bl	800208a <HAL_SYSTICK_Config>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e00e      	b.n	8001de4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b0f      	cmp	r3, #15
 8001dca:	d80a      	bhi.n	8001de2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd4:	f000 f92f 	bl	8002036 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dd8:	4a06      	ldr	r2, [pc, #24]	; (8001df4 <HAL_InitTick+0x5c>)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	e000      	b.n	8001de4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000000 	.word	0x20000000
 8001df0:	20000008 	.word	0x20000008
 8001df4:	20000004 	.word	0x20000004

08001df8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_IncTick+0x20>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_IncTick+0x24>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4413      	add	r3, r2
 8001e08:	4a04      	ldr	r2, [pc, #16]	; (8001e1c <HAL_IncTick+0x24>)
 8001e0a:	6013      	str	r3, [r2, #0]
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	20000008 	.word	0x20000008
 8001e1c:	20000208 	.word	0x20000208

08001e20 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return uwTick;  
 8001e24:	4b03      	ldr	r3, [pc, #12]	; (8001e34 <HAL_GetTick+0x14>)
 8001e26:	681b      	ldr	r3, [r3, #0]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	20000208 	.word	0x20000208

08001e38 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e40:	f7ff ffee 	bl	8001e20 <HAL_GetTick>
 8001e44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e50:	d005      	beq.n	8001e5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e52:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <HAL_Delay+0x44>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	461a      	mov	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001e5e:	bf00      	nop
 8001e60:	f7ff ffde 	bl	8001e20 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d8f7      	bhi.n	8001e60 <HAL_Delay+0x28>
  {
  }
}
 8001e70:	bf00      	nop
 8001e72:	bf00      	nop
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000008 	.word	0x20000008

08001e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e90:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ea8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eb2:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	60d3      	str	r3, [r2, #12]
}
 8001eb8:	bf00      	nop
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ecc:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	0a1b      	lsrs	r3, r3, #8
 8001ed2:	f003 0307 	and.w	r3, r3, #7
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	db0b      	blt.n	8001f0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	f003 021f 	and.w	r2, r3, #31
 8001efc:	4907      	ldr	r1, [pc, #28]	; (8001f1c <__NVIC_EnableIRQ+0x38>)
 8001efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f02:	095b      	lsrs	r3, r3, #5
 8001f04:	2001      	movs	r0, #1
 8001f06:	fa00 f202 	lsl.w	r2, r0, r2
 8001f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	e000e100 	.word	0xe000e100

08001f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	6039      	str	r1, [r7, #0]
 8001f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	db0a      	blt.n	8001f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	490c      	ldr	r1, [pc, #48]	; (8001f6c <__NVIC_SetPriority+0x4c>)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	0112      	lsls	r2, r2, #4
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	440b      	add	r3, r1
 8001f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f48:	e00a      	b.n	8001f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	4908      	ldr	r1, [pc, #32]	; (8001f70 <__NVIC_SetPriority+0x50>)
 8001f50:	79fb      	ldrb	r3, [r7, #7]
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	3b04      	subs	r3, #4
 8001f58:	0112      	lsls	r2, r2, #4
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	761a      	strb	r2, [r3, #24]
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	e000e100 	.word	0xe000e100
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b089      	sub	sp, #36	; 0x24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f1c3 0307 	rsb	r3, r3, #7
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	bf28      	it	cs
 8001f92:	2304      	movcs	r3, #4
 8001f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3304      	adds	r3, #4
 8001f9a:	2b06      	cmp	r3, #6
 8001f9c:	d902      	bls.n	8001fa4 <NVIC_EncodePriority+0x30>
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	3b03      	subs	r3, #3
 8001fa2:	e000      	b.n	8001fa6 <NVIC_EncodePriority+0x32>
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43da      	mvns	r2, r3
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	401a      	ands	r2, r3
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc6:	43d9      	mvns	r1, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fcc:	4313      	orrs	r3, r2
         );
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3724      	adds	r7, #36	; 0x24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
	...

08001fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fec:	d301      	bcc.n	8001ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e00f      	b.n	8002012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ff2:	4a0a      	ldr	r2, [pc, #40]	; (800201c <SysTick_Config+0x40>)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ffa:	210f      	movs	r1, #15
 8001ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8002000:	f7ff ff8e 	bl	8001f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002004:	4b05      	ldr	r3, [pc, #20]	; (800201c <SysTick_Config+0x40>)
 8002006:	2200      	movs	r2, #0
 8002008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800200a:	4b04      	ldr	r3, [pc, #16]	; (800201c <SysTick_Config+0x40>)
 800200c:	2207      	movs	r2, #7
 800200e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	e000e010 	.word	0xe000e010

08002020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7ff ff29 	bl	8001e80 <__NVIC_SetPriorityGrouping>
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b086      	sub	sp, #24
 800203a:	af00      	add	r7, sp, #0
 800203c:	4603      	mov	r3, r0
 800203e:	60b9      	str	r1, [r7, #8]
 8002040:	607a      	str	r2, [r7, #4]
 8002042:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002048:	f7ff ff3e 	bl	8001ec8 <__NVIC_GetPriorityGrouping>
 800204c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	68b9      	ldr	r1, [r7, #8]
 8002052:	6978      	ldr	r0, [r7, #20]
 8002054:	f7ff ff8e 	bl	8001f74 <NVIC_EncodePriority>
 8002058:	4602      	mov	r2, r0
 800205a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800205e:	4611      	mov	r1, r2
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff ff5d 	bl	8001f20 <__NVIC_SetPriority>
}
 8002066:	bf00      	nop
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
 8002074:	4603      	mov	r3, r0
 8002076:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff ff31 	bl	8001ee4 <__NVIC_EnableIRQ>
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7ff ffa2 	bl	8001fdc <SysTick_Config>
 8002098:	4603      	mov	r3, r0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d008      	beq.n	80020c6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2204      	movs	r2, #4
 80020b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e020      	b.n	8002108 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 020e 	bic.w	r2, r2, #14
 80020d4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 0201 	bic.w	r2, r2, #1
 80020e4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ee:	2101      	movs	r1, #1
 80020f0:	fa01 f202 	lsl.w	r2, r1, r2
 80020f4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800211c:	2300      	movs	r3, #0
 800211e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002126:	2b02      	cmp	r3, #2
 8002128:	d005      	beq.n	8002136 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2204      	movs	r2, #4
 800212e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	73fb      	strb	r3, [r7, #15]
 8002134:	e027      	b.n	8002186 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 020e 	bic.w	r2, r2, #14
 8002144:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 0201 	bic.w	r2, r2, #1
 8002154:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800215e:	2101      	movs	r1, #1
 8002160:	fa01 f202 	lsl.w	r2, r1, r2
 8002164:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	4798      	blx	r3
    } 
  }
  return status;
 8002186:	7bfb      	ldrb	r3, [r7, #15]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002190:	b480      	push	{r7}
 8002192:	b087      	sub	sp, #28
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800219e:	e14e      	b.n	800243e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	2101      	movs	r1, #1
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	fa01 f303 	lsl.w	r3, r1, r3
 80021ac:	4013      	ands	r3, r2
 80021ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 8140 	beq.w	8002438 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d00b      	beq.n	80021d8 <HAL_GPIO_Init+0x48>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d007      	beq.n	80021d8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021cc:	2b11      	cmp	r3, #17
 80021ce:	d003      	beq.n	80021d8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b12      	cmp	r3, #18
 80021d6:	d130      	bne.n	800223a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	2203      	movs	r2, #3
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	4013      	ands	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	68da      	ldr	r2, [r3, #12]
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	4313      	orrs	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800220e:	2201      	movs	r2, #1
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	4013      	ands	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	091b      	lsrs	r3, r3, #4
 8002224:	f003 0201 	and.w	r2, r3, #1
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	2203      	movs	r2, #3
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	4013      	ands	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	4313      	orrs	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b02      	cmp	r3, #2
 8002270:	d003      	beq.n	800227a <HAL_GPIO_Init+0xea>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b12      	cmp	r3, #18
 8002278:	d123      	bne.n	80022c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	08da      	lsrs	r2, r3, #3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	3208      	adds	r2, #8
 8002282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002286:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	220f      	movs	r2, #15
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43db      	mvns	r3, r3
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	4013      	ands	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	691a      	ldr	r2, [r3, #16]
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	08da      	lsrs	r2, r3, #3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3208      	adds	r2, #8
 80022bc:	6939      	ldr	r1, [r7, #16]
 80022be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	2203      	movs	r2, #3
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43db      	mvns	r3, r3
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	4013      	ands	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f003 0203 	and.w	r2, r3, #3
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 809a 	beq.w	8002438 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002304:	4b55      	ldr	r3, [pc, #340]	; (800245c <HAL_GPIO_Init+0x2cc>)
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	4a54      	ldr	r2, [pc, #336]	; (800245c <HAL_GPIO_Init+0x2cc>)
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	6193      	str	r3, [r2, #24]
 8002310:	4b52      	ldr	r3, [pc, #328]	; (800245c <HAL_GPIO_Init+0x2cc>)
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800231c:	4a50      	ldr	r2, [pc, #320]	; (8002460 <HAL_GPIO_Init+0x2d0>)
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	089b      	lsrs	r3, r3, #2
 8002322:	3302      	adds	r3, #2
 8002324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002328:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	220f      	movs	r2, #15
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4013      	ands	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002346:	d013      	beq.n	8002370 <HAL_GPIO_Init+0x1e0>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a46      	ldr	r2, [pc, #280]	; (8002464 <HAL_GPIO_Init+0x2d4>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d00d      	beq.n	800236c <HAL_GPIO_Init+0x1dc>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a45      	ldr	r2, [pc, #276]	; (8002468 <HAL_GPIO_Init+0x2d8>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d007      	beq.n	8002368 <HAL_GPIO_Init+0x1d8>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a44      	ldr	r2, [pc, #272]	; (800246c <HAL_GPIO_Init+0x2dc>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d101      	bne.n	8002364 <HAL_GPIO_Init+0x1d4>
 8002360:	2303      	movs	r3, #3
 8002362:	e006      	b.n	8002372 <HAL_GPIO_Init+0x1e2>
 8002364:	2305      	movs	r3, #5
 8002366:	e004      	b.n	8002372 <HAL_GPIO_Init+0x1e2>
 8002368:	2302      	movs	r3, #2
 800236a:	e002      	b.n	8002372 <HAL_GPIO_Init+0x1e2>
 800236c:	2301      	movs	r3, #1
 800236e:	e000      	b.n	8002372 <HAL_GPIO_Init+0x1e2>
 8002370:	2300      	movs	r3, #0
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	f002 0203 	and.w	r2, r2, #3
 8002378:	0092      	lsls	r2, r2, #2
 800237a:	4093      	lsls	r3, r2
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	4313      	orrs	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002382:	4937      	ldr	r1, [pc, #220]	; (8002460 <HAL_GPIO_Init+0x2d0>)
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	089b      	lsrs	r3, r3, #2
 8002388:	3302      	adds	r3, #2
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002390:	4b37      	ldr	r3, [pc, #220]	; (8002470 <HAL_GPIO_Init+0x2e0>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	43db      	mvns	r3, r3
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	4013      	ands	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80023b4:	4a2e      	ldr	r2, [pc, #184]	; (8002470 <HAL_GPIO_Init+0x2e0>)
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023ba:	4b2d      	ldr	r3, [pc, #180]	; (8002470 <HAL_GPIO_Init+0x2e0>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	43db      	mvns	r3, r3
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	4013      	ands	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4313      	orrs	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80023de:	4a24      	ldr	r2, [pc, #144]	; (8002470 <HAL_GPIO_Init+0x2e0>)
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023e4:	4b22      	ldr	r3, [pc, #136]	; (8002470 <HAL_GPIO_Init+0x2e0>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	43db      	mvns	r3, r3
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	4013      	ands	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	4313      	orrs	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002408:	4a19      	ldr	r2, [pc, #100]	; (8002470 <HAL_GPIO_Init+0x2e0>)
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800240e:	4b18      	ldr	r3, [pc, #96]	; (8002470 <HAL_GPIO_Init+0x2e0>)
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	43db      	mvns	r3, r3
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	4013      	ands	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4313      	orrs	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002432:	4a0f      	ldr	r2, [pc, #60]	; (8002470 <HAL_GPIO_Init+0x2e0>)
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	3301      	adds	r3, #1
 800243c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	fa22 f303 	lsr.w	r3, r2, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	f47f aea9 	bne.w	80021a0 <HAL_GPIO_Init+0x10>
  }
}
 800244e:	bf00      	nop
 8002450:	bf00      	nop
 8002452:	371c      	adds	r7, #28
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	40021000 	.word	0x40021000
 8002460:	40010000 	.word	0x40010000
 8002464:	48000400 	.word	0x48000400
 8002468:	48000800 	.word	0x48000800
 800246c:	48000c00 	.word	0x48000c00
 8002470:	40010400 	.word	0x40010400

08002474 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691a      	ldr	r2, [r3, #16]
 8002484:	887b      	ldrh	r3, [r7, #2]
 8002486:	4013      	ands	r3, r2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d002      	beq.n	8002492 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800248c:	2301      	movs	r3, #1
 800248e:	73fb      	strb	r3, [r7, #15]
 8002490:	e001      	b.n	8002496 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002492:	2300      	movs	r3, #0
 8002494:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002496:	7bfb      	ldrb	r3, [r7, #15]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	807b      	strh	r3, [r7, #2]
 80024b0:	4613      	mov	r3, r2
 80024b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024b4:	787b      	ldrb	r3, [r7, #1]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024ba:	887a      	ldrh	r2, [r7, #2]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024c0:	e002      	b.n	80024c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024c2:	887a      	ldrh	r2, [r7, #2]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024de:	4b08      	ldr	r3, [pc, #32]	; (8002500 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024e0:	695a      	ldr	r2, [r3, #20]
 80024e2:	88fb      	ldrh	r3, [r7, #6]
 80024e4:	4013      	ands	r3, r2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d006      	beq.n	80024f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024ea:	4a05      	ldr	r2, [pc, #20]	; (8002500 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024ec:	88fb      	ldrh	r3, [r7, #6]
 80024ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024f0:	88fb      	ldrh	r3, [r7, #6]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 f806 	bl	8002504 <HAL_GPIO_EXTI_Callback>
  }
}
 80024f8:	bf00      	nop
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40010400 	.word	0x40010400

08002504 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
	...

0800251c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002522:	af00      	add	r7, sp, #0
 8002524:	1d3b      	adds	r3, r7, #4
 8002526:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002528:	1d3b      	adds	r3, r7, #4
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d102      	bne.n	8002536 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	f000 bef4 	b.w	800331e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002536:	1d3b      	adds	r3, r7, #4
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 816a 	beq.w	800281a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002546:	4bb3      	ldr	r3, [pc, #716]	; (8002814 <HAL_RCC_OscConfig+0x2f8>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f003 030c 	and.w	r3, r3, #12
 800254e:	2b04      	cmp	r3, #4
 8002550:	d00c      	beq.n	800256c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002552:	4bb0      	ldr	r3, [pc, #704]	; (8002814 <HAL_RCC_OscConfig+0x2f8>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f003 030c 	and.w	r3, r3, #12
 800255a:	2b08      	cmp	r3, #8
 800255c:	d159      	bne.n	8002612 <HAL_RCC_OscConfig+0xf6>
 800255e:	4bad      	ldr	r3, [pc, #692]	; (8002814 <HAL_RCC_OscConfig+0x2f8>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800256a:	d152      	bne.n	8002612 <HAL_RCC_OscConfig+0xf6>
 800256c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002570:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002574:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002578:	fa93 f3a3 	rbit	r3, r3
 800257c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002580:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002584:	fab3 f383 	clz	r3, r3
 8002588:	b2db      	uxtb	r3, r3
 800258a:	095b      	lsrs	r3, r3, #5
 800258c:	b2db      	uxtb	r3, r3
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b01      	cmp	r3, #1
 8002596:	d102      	bne.n	800259e <HAL_RCC_OscConfig+0x82>
 8002598:	4b9e      	ldr	r3, [pc, #632]	; (8002814 <HAL_RCC_OscConfig+0x2f8>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	e015      	b.n	80025ca <HAL_RCC_OscConfig+0xae>
 800259e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025a2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80025aa:	fa93 f3a3 	rbit	r3, r3
 80025ae:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80025b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025b6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80025ba:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80025be:	fa93 f3a3 	rbit	r3, r3
 80025c2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80025c6:	4b93      	ldr	r3, [pc, #588]	; (8002814 <HAL_RCC_OscConfig+0x2f8>)
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025ce:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80025d2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80025d6:	fa92 f2a2 	rbit	r2, r2
 80025da:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80025de:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80025e2:	fab2 f282 	clz	r2, r2
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	f042 0220 	orr.w	r2, r2, #32
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	f002 021f 	and.w	r2, r2, #31
 80025f2:	2101      	movs	r1, #1
 80025f4:	fa01 f202 	lsl.w	r2, r1, r2
 80025f8:	4013      	ands	r3, r2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 810c 	beq.w	8002818 <HAL_RCC_OscConfig+0x2fc>
 8002600:	1d3b      	adds	r3, r7, #4
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	f040 8106 	bne.w	8002818 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	f000 be86 	b.w	800331e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002612:	1d3b      	adds	r3, r7, #4
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800261c:	d106      	bne.n	800262c <HAL_RCC_OscConfig+0x110>
 800261e:	4b7d      	ldr	r3, [pc, #500]	; (8002814 <HAL_RCC_OscConfig+0x2f8>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a7c      	ldr	r2, [pc, #496]	; (8002814 <HAL_RCC_OscConfig+0x2f8>)
 8002624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	e030      	b.n	800268e <HAL_RCC_OscConfig+0x172>
 800262c:	1d3b      	adds	r3, r7, #4
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10c      	bne.n	8002650 <HAL_RCC_OscConfig+0x134>
 8002636:	4b77      	ldr	r3, [pc, #476]	; (8002814 <HAL_RCC_OscConfig+0x2f8>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a76      	ldr	r2, [pc, #472]	; (8002814 <HAL_RCC_OscConfig+0x2f8>)
 800263c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	4b74      	ldr	r3, [pc, #464]	; (8002814 <HAL_RCC_OscConfig+0x2f8>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a73      	ldr	r2, [pc, #460]	; (8002814 <HAL_RCC_OscConfig+0x2f8>)
 8002648:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	e01e      	b.n	800268e <HAL_RCC_OscConfig+0x172>
 8002650:	1d3b      	adds	r3, r7, #4
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800265a:	d10c      	bne.n	8002676 <HAL_RCC_OscConfig+0x15a>
 800265c:	4b6d      	ldr	r3, [pc, #436]	; (8002814 <HAL_RCC_OscConfig+0x2f8>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a6c      	ldr	r2, [pc, #432]	; (8002814 <HAL_RCC_OscConfig+0x2f8>)
 8002662:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	4b6a      	ldr	r3, [pc, #424]	; (8002814 <HAL_RCC_OscConfig+0x2f8>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a69      	ldr	r2, [pc, #420]	; (8002814 <HAL_RCC_OscConfig+0x2f8>)
 800266e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002672:	6013      	str	r3, [r2, #0]
 8002674:	e00b      	b.n	800268e <HAL_RCC_OscConfig+0x172>
 8002676:	4b67      	ldr	r3, [pc, #412]	; (8002814 <HAL_RCC_OscConfig+0x2f8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a66      	ldr	r2, [pc, #408]	; (8002814 <HAL_RCC_OscConfig+0x2f8>)
 800267c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	4b64      	ldr	r3, [pc, #400]	; (8002814 <HAL_RCC_OscConfig+0x2f8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a63      	ldr	r2, [pc, #396]	; (8002814 <HAL_RCC_OscConfig+0x2f8>)
 8002688:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800268c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800268e:	4b61      	ldr	r3, [pc, #388]	; (8002814 <HAL_RCC_OscConfig+0x2f8>)
 8002690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002692:	f023 020f 	bic.w	r2, r3, #15
 8002696:	1d3b      	adds	r3, r7, #4
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	495d      	ldr	r1, [pc, #372]	; (8002814 <HAL_RCC_OscConfig+0x2f8>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026a2:	1d3b      	adds	r3, r7, #4
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d059      	beq.n	8002760 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ac:	f7ff fbb8 	bl	8001e20 <HAL_GetTick>
 80026b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b4:	e00a      	b.n	80026cc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026b6:	f7ff fbb3 	bl	8001e20 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b64      	cmp	r3, #100	; 0x64
 80026c4:	d902      	bls.n	80026cc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	f000 be29 	b.w	800331e <HAL_RCC_OscConfig+0xe02>
 80026cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026d0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80026d8:	fa93 f3a3 	rbit	r3, r3
 80026dc:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80026e0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e4:	fab3 f383 	clz	r3, r3
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	095b      	lsrs	r3, r3, #5
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d102      	bne.n	80026fe <HAL_RCC_OscConfig+0x1e2>
 80026f8:	4b46      	ldr	r3, [pc, #280]	; (8002814 <HAL_RCC_OscConfig+0x2f8>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	e015      	b.n	800272a <HAL_RCC_OscConfig+0x20e>
 80026fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002702:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002706:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800270a:	fa93 f3a3 	rbit	r3, r3
 800270e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002712:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002716:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800271a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800271e:	fa93 f3a3 	rbit	r3, r3
 8002722:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002726:	4b3b      	ldr	r3, [pc, #236]	; (8002814 <HAL_RCC_OscConfig+0x2f8>)
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800272e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002732:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002736:	fa92 f2a2 	rbit	r2, r2
 800273a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800273e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002742:	fab2 f282 	clz	r2, r2
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	f042 0220 	orr.w	r2, r2, #32
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	f002 021f 	and.w	r2, r2, #31
 8002752:	2101      	movs	r1, #1
 8002754:	fa01 f202 	lsl.w	r2, r1, r2
 8002758:	4013      	ands	r3, r2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0ab      	beq.n	80026b6 <HAL_RCC_OscConfig+0x19a>
 800275e:	e05c      	b.n	800281a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002760:	f7ff fb5e 	bl	8001e20 <HAL_GetTick>
 8002764:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002768:	e00a      	b.n	8002780 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800276a:	f7ff fb59 	bl	8001e20 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b64      	cmp	r3, #100	; 0x64
 8002778:	d902      	bls.n	8002780 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	f000 bdcf 	b.w	800331e <HAL_RCC_OscConfig+0xe02>
 8002780:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002784:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002788:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800278c:	fa93 f3a3 	rbit	r3, r3
 8002790:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002794:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002798:	fab3 f383 	clz	r3, r3
 800279c:	b2db      	uxtb	r3, r3
 800279e:	095b      	lsrs	r3, r3, #5
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d102      	bne.n	80027b2 <HAL_RCC_OscConfig+0x296>
 80027ac:	4b19      	ldr	r3, [pc, #100]	; (8002814 <HAL_RCC_OscConfig+0x2f8>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	e015      	b.n	80027de <HAL_RCC_OscConfig+0x2c2>
 80027b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027b6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ba:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80027be:	fa93 f3a3 	rbit	r3, r3
 80027c2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80027c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027ca:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80027ce:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80027d2:	fa93 f3a3 	rbit	r3, r3
 80027d6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80027da:	4b0e      	ldr	r3, [pc, #56]	; (8002814 <HAL_RCC_OscConfig+0x2f8>)
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027e2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80027e6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80027ea:	fa92 f2a2 	rbit	r2, r2
 80027ee:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80027f2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80027f6:	fab2 f282 	clz	r2, r2
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	f042 0220 	orr.w	r2, r2, #32
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	f002 021f 	and.w	r2, r2, #31
 8002806:	2101      	movs	r1, #1
 8002808:	fa01 f202 	lsl.w	r2, r1, r2
 800280c:	4013      	ands	r3, r2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1ab      	bne.n	800276a <HAL_RCC_OscConfig+0x24e>
 8002812:	e002      	b.n	800281a <HAL_RCC_OscConfig+0x2fe>
 8002814:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800281a:	1d3b      	adds	r3, r7, #4
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 816f 	beq.w	8002b08 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800282a:	4bd0      	ldr	r3, [pc, #832]	; (8002b6c <HAL_RCC_OscConfig+0x650>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f003 030c 	and.w	r3, r3, #12
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00b      	beq.n	800284e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002836:	4bcd      	ldr	r3, [pc, #820]	; (8002b6c <HAL_RCC_OscConfig+0x650>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f003 030c 	and.w	r3, r3, #12
 800283e:	2b08      	cmp	r3, #8
 8002840:	d16c      	bne.n	800291c <HAL_RCC_OscConfig+0x400>
 8002842:	4bca      	ldr	r3, [pc, #808]	; (8002b6c <HAL_RCC_OscConfig+0x650>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d166      	bne.n	800291c <HAL_RCC_OscConfig+0x400>
 800284e:	2302      	movs	r3, #2
 8002850:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002858:	fa93 f3a3 	rbit	r3, r3
 800285c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002860:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002864:	fab3 f383 	clz	r3, r3
 8002868:	b2db      	uxtb	r3, r3
 800286a:	095b      	lsrs	r3, r3, #5
 800286c:	b2db      	uxtb	r3, r3
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b01      	cmp	r3, #1
 8002876:	d102      	bne.n	800287e <HAL_RCC_OscConfig+0x362>
 8002878:	4bbc      	ldr	r3, [pc, #752]	; (8002b6c <HAL_RCC_OscConfig+0x650>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	e013      	b.n	80028a6 <HAL_RCC_OscConfig+0x38a>
 800287e:	2302      	movs	r3, #2
 8002880:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002884:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002888:	fa93 f3a3 	rbit	r3, r3
 800288c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002890:	2302      	movs	r3, #2
 8002892:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002896:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800289a:	fa93 f3a3 	rbit	r3, r3
 800289e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80028a2:	4bb2      	ldr	r3, [pc, #712]	; (8002b6c <HAL_RCC_OscConfig+0x650>)
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	2202      	movs	r2, #2
 80028a8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80028ac:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80028b0:	fa92 f2a2 	rbit	r2, r2
 80028b4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80028b8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80028bc:	fab2 f282 	clz	r2, r2
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	f042 0220 	orr.w	r2, r2, #32
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	f002 021f 	and.w	r2, r2, #31
 80028cc:	2101      	movs	r1, #1
 80028ce:	fa01 f202 	lsl.w	r2, r1, r2
 80028d2:	4013      	ands	r3, r2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d007      	beq.n	80028e8 <HAL_RCC_OscConfig+0x3cc>
 80028d8:	1d3b      	adds	r3, r7, #4
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d002      	beq.n	80028e8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	f000 bd1b 	b.w	800331e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e8:	4ba0      	ldr	r3, [pc, #640]	; (8002b6c <HAL_RCC_OscConfig+0x650>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028f0:	1d3b      	adds	r3, r7, #4
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	21f8      	movs	r1, #248	; 0xf8
 80028f8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002900:	fa91 f1a1 	rbit	r1, r1
 8002904:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002908:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800290c:	fab1 f181 	clz	r1, r1
 8002910:	b2c9      	uxtb	r1, r1
 8002912:	408b      	lsls	r3, r1
 8002914:	4995      	ldr	r1, [pc, #596]	; (8002b6c <HAL_RCC_OscConfig+0x650>)
 8002916:	4313      	orrs	r3, r2
 8002918:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800291a:	e0f5      	b.n	8002b08 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800291c:	1d3b      	adds	r3, r7, #4
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 8085 	beq.w	8002a32 <HAL_RCC_OscConfig+0x516>
 8002928:	2301      	movs	r3, #1
 800292a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002932:	fa93 f3a3 	rbit	r3, r3
 8002936:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800293a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800293e:	fab3 f383 	clz	r3, r3
 8002942:	b2db      	uxtb	r3, r3
 8002944:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002948:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	461a      	mov	r2, r3
 8002950:	2301      	movs	r3, #1
 8002952:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002954:	f7ff fa64 	bl	8001e20 <HAL_GetTick>
 8002958:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800295c:	e00a      	b.n	8002974 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800295e:	f7ff fa5f 	bl	8001e20 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d902      	bls.n	8002974 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	f000 bcd5 	b.w	800331e <HAL_RCC_OscConfig+0xe02>
 8002974:	2302      	movs	r3, #2
 8002976:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800297e:	fa93 f3a3 	rbit	r3, r3
 8002982:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002986:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800298a:	fab3 f383 	clz	r3, r3
 800298e:	b2db      	uxtb	r3, r3
 8002990:	095b      	lsrs	r3, r3, #5
 8002992:	b2db      	uxtb	r3, r3
 8002994:	f043 0301 	orr.w	r3, r3, #1
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b01      	cmp	r3, #1
 800299c:	d102      	bne.n	80029a4 <HAL_RCC_OscConfig+0x488>
 800299e:	4b73      	ldr	r3, [pc, #460]	; (8002b6c <HAL_RCC_OscConfig+0x650>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	e013      	b.n	80029cc <HAL_RCC_OscConfig+0x4b0>
 80029a4:	2302      	movs	r3, #2
 80029a6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029aa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80029ae:	fa93 f3a3 	rbit	r3, r3
 80029b2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80029b6:	2302      	movs	r3, #2
 80029b8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80029bc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80029c0:	fa93 f3a3 	rbit	r3, r3
 80029c4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80029c8:	4b68      	ldr	r3, [pc, #416]	; (8002b6c <HAL_RCC_OscConfig+0x650>)
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	2202      	movs	r2, #2
 80029ce:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80029d2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80029d6:	fa92 f2a2 	rbit	r2, r2
 80029da:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80029de:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80029e2:	fab2 f282 	clz	r2, r2
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	f042 0220 	orr.w	r2, r2, #32
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	f002 021f 	and.w	r2, r2, #31
 80029f2:	2101      	movs	r1, #1
 80029f4:	fa01 f202 	lsl.w	r2, r1, r2
 80029f8:	4013      	ands	r3, r2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0af      	beq.n	800295e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fe:	4b5b      	ldr	r3, [pc, #364]	; (8002b6c <HAL_RCC_OscConfig+0x650>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a06:	1d3b      	adds	r3, r7, #4
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	21f8      	movs	r1, #248	; 0xf8
 8002a0e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a12:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002a16:	fa91 f1a1 	rbit	r1, r1
 8002a1a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002a1e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002a22:	fab1 f181 	clz	r1, r1
 8002a26:	b2c9      	uxtb	r1, r1
 8002a28:	408b      	lsls	r3, r1
 8002a2a:	4950      	ldr	r1, [pc, #320]	; (8002b6c <HAL_RCC_OscConfig+0x650>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	600b      	str	r3, [r1, #0]
 8002a30:	e06a      	b.n	8002b08 <HAL_RCC_OscConfig+0x5ec>
 8002a32:	2301      	movs	r3, #1
 8002a34:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a38:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002a3c:	fa93 f3a3 	rbit	r3, r3
 8002a40:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002a44:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a48:	fab3 f383 	clz	r3, r3
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a52:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	461a      	mov	r2, r3
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5e:	f7ff f9df 	bl	8001e20 <HAL_GetTick>
 8002a62:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a66:	e00a      	b.n	8002a7e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a68:	f7ff f9da 	bl	8001e20 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d902      	bls.n	8002a7e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	f000 bc50 	b.w	800331e <HAL_RCC_OscConfig+0xe02>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a84:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002a88:	fa93 f3a3 	rbit	r3, r3
 8002a8c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002a90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a94:	fab3 f383 	clz	r3, r3
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	095b      	lsrs	r3, r3, #5
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	f043 0301 	orr.w	r3, r3, #1
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d102      	bne.n	8002aae <HAL_RCC_OscConfig+0x592>
 8002aa8:	4b30      	ldr	r3, [pc, #192]	; (8002b6c <HAL_RCC_OscConfig+0x650>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	e013      	b.n	8002ad6 <HAL_RCC_OscConfig+0x5ba>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002ab8:	fa93 f3a3 	rbit	r3, r3
 8002abc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002ac6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002aca:	fa93 f3a3 	rbit	r3, r3
 8002ace:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002ad2:	4b26      	ldr	r3, [pc, #152]	; (8002b6c <HAL_RCC_OscConfig+0x650>)
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002adc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002ae0:	fa92 f2a2 	rbit	r2, r2
 8002ae4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002ae8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002aec:	fab2 f282 	clz	r2, r2
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	f042 0220 	orr.w	r2, r2, #32
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	f002 021f 	and.w	r2, r2, #31
 8002afc:	2101      	movs	r1, #1
 8002afe:	fa01 f202 	lsl.w	r2, r1, r2
 8002b02:	4013      	ands	r3, r2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1af      	bne.n	8002a68 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b08:	1d3b      	adds	r3, r7, #4
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f000 80da 	beq.w	8002ccc <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b18:	1d3b      	adds	r3, r7, #4
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d069      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x6da>
 8002b22:	2301      	movs	r3, #1
 8002b24:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b28:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002b2c:	fa93 f3a3 	rbit	r3, r3
 8002b30:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002b34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b38:	fab3 f383 	clz	r3, r3
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	461a      	mov	r2, r3
 8002b40:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <HAL_RCC_OscConfig+0x654>)
 8002b42:	4413      	add	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	461a      	mov	r2, r3
 8002b48:	2301      	movs	r3, #1
 8002b4a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b4c:	f7ff f968 	bl	8001e20 <HAL_GetTick>
 8002b50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b54:	e00e      	b.n	8002b74 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b56:	f7ff f963 	bl	8001e20 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d906      	bls.n	8002b74 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e3d9      	b.n	800331e <HAL_RCC_OscConfig+0xe02>
 8002b6a:	bf00      	nop
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	10908120 	.word	0x10908120
 8002b74:	2302      	movs	r3, #2
 8002b76:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002b7e:	fa93 f3a3 	rbit	r3, r3
 8002b82:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002b86:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	fa93 f2a3 	rbit	r2, r3
 8002b98:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	fa93 f2a3 	rbit	r2, r3
 8002bb0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002bb4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb6:	4ba5      	ldr	r3, [pc, #660]	; (8002e4c <HAL_RCC_OscConfig+0x930>)
 8002bb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bba:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002bbe:	2102      	movs	r1, #2
 8002bc0:	6019      	str	r1, [r3, #0]
 8002bc2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	fa93 f1a3 	rbit	r1, r3
 8002bcc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002bd0:	6019      	str	r1, [r3, #0]
  return result;
 8002bd2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	fab3 f383 	clz	r3, r3
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	f003 031f 	and.w	r3, r3, #31
 8002be8:	2101      	movs	r1, #1
 8002bea:	fa01 f303 	lsl.w	r3, r1, r3
 8002bee:	4013      	ands	r3, r2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0b0      	beq.n	8002b56 <HAL_RCC_OscConfig+0x63a>
 8002bf4:	e06a      	b.n	8002ccc <HAL_RCC_OscConfig+0x7b0>
 8002bf6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfe:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	fa93 f2a3 	rbit	r2, r3
 8002c08:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002c0c:	601a      	str	r2, [r3, #0]
  return result;
 8002c0e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002c12:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c14:	fab3 f383 	clz	r3, r3
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	4b8c      	ldr	r3, [pc, #560]	; (8002e50 <HAL_RCC_OscConfig+0x934>)
 8002c1e:	4413      	add	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	461a      	mov	r2, r3
 8002c24:	2300      	movs	r3, #0
 8002c26:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c28:	f7ff f8fa 	bl	8001e20 <HAL_GetTick>
 8002c2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c30:	e009      	b.n	8002c46 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c32:	f7ff f8f5 	bl	8001e20 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e36b      	b.n	800331e <HAL_RCC_OscConfig+0xe02>
 8002c46:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	fa93 f2a3 	rbit	r2, r3
 8002c58:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002c62:	2202      	movs	r2, #2
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	fa93 f2a3 	rbit	r2, r3
 8002c70:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	fa93 f2a3 	rbit	r2, r3
 8002c88:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c8c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c8e:	4b6f      	ldr	r3, [pc, #444]	; (8002e4c <HAL_RCC_OscConfig+0x930>)
 8002c90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c92:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002c96:	2102      	movs	r1, #2
 8002c98:	6019      	str	r1, [r3, #0]
 8002c9a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	fa93 f1a3 	rbit	r1, r3
 8002ca4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002ca8:	6019      	str	r1, [r3, #0]
  return result;
 8002caa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	fab3 f383 	clz	r3, r3
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	f003 031f 	and.w	r3, r3, #31
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1b2      	bne.n	8002c32 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ccc:	1d3b      	adds	r3, r7, #4
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 8158 	beq.w	8002f8c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ce2:	4b5a      	ldr	r3, [pc, #360]	; (8002e4c <HAL_RCC_OscConfig+0x930>)
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d112      	bne.n	8002d14 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cee:	4b57      	ldr	r3, [pc, #348]	; (8002e4c <HAL_RCC_OscConfig+0x930>)
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	4a56      	ldr	r2, [pc, #344]	; (8002e4c <HAL_RCC_OscConfig+0x930>)
 8002cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf8:	61d3      	str	r3, [r2, #28]
 8002cfa:	4b54      	ldr	r3, [pc, #336]	; (8002e4c <HAL_RCC_OscConfig+0x930>)
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002d02:	f107 0308 	add.w	r3, r7, #8
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	f107 0308 	add.w	r3, r7, #8
 8002d0c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d14:	4b4f      	ldr	r3, [pc, #316]	; (8002e54 <HAL_RCC_OscConfig+0x938>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d11a      	bne.n	8002d56 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d20:	4b4c      	ldr	r3, [pc, #304]	; (8002e54 <HAL_RCC_OscConfig+0x938>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a4b      	ldr	r2, [pc, #300]	; (8002e54 <HAL_RCC_OscConfig+0x938>)
 8002d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d2a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d2c:	f7ff f878 	bl	8001e20 <HAL_GetTick>
 8002d30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d34:	e009      	b.n	8002d4a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d36:	f7ff f873 	bl	8001e20 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b64      	cmp	r3, #100	; 0x64
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e2e9      	b.n	800331e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d4a:	4b42      	ldr	r3, [pc, #264]	; (8002e54 <HAL_RCC_OscConfig+0x938>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0ef      	beq.n	8002d36 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d56:	1d3b      	adds	r3, r7, #4
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d106      	bne.n	8002d6e <HAL_RCC_OscConfig+0x852>
 8002d60:	4b3a      	ldr	r3, [pc, #232]	; (8002e4c <HAL_RCC_OscConfig+0x930>)
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	4a39      	ldr	r2, [pc, #228]	; (8002e4c <HAL_RCC_OscConfig+0x930>)
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	6213      	str	r3, [r2, #32]
 8002d6c:	e02f      	b.n	8002dce <HAL_RCC_OscConfig+0x8b2>
 8002d6e:	1d3b      	adds	r3, r7, #4
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d10c      	bne.n	8002d92 <HAL_RCC_OscConfig+0x876>
 8002d78:	4b34      	ldr	r3, [pc, #208]	; (8002e4c <HAL_RCC_OscConfig+0x930>)
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	4a33      	ldr	r2, [pc, #204]	; (8002e4c <HAL_RCC_OscConfig+0x930>)
 8002d7e:	f023 0301 	bic.w	r3, r3, #1
 8002d82:	6213      	str	r3, [r2, #32]
 8002d84:	4b31      	ldr	r3, [pc, #196]	; (8002e4c <HAL_RCC_OscConfig+0x930>)
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	4a30      	ldr	r2, [pc, #192]	; (8002e4c <HAL_RCC_OscConfig+0x930>)
 8002d8a:	f023 0304 	bic.w	r3, r3, #4
 8002d8e:	6213      	str	r3, [r2, #32]
 8002d90:	e01d      	b.n	8002dce <HAL_RCC_OscConfig+0x8b2>
 8002d92:	1d3b      	adds	r3, r7, #4
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	2b05      	cmp	r3, #5
 8002d9a:	d10c      	bne.n	8002db6 <HAL_RCC_OscConfig+0x89a>
 8002d9c:	4b2b      	ldr	r3, [pc, #172]	; (8002e4c <HAL_RCC_OscConfig+0x930>)
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	4a2a      	ldr	r2, [pc, #168]	; (8002e4c <HAL_RCC_OscConfig+0x930>)
 8002da2:	f043 0304 	orr.w	r3, r3, #4
 8002da6:	6213      	str	r3, [r2, #32]
 8002da8:	4b28      	ldr	r3, [pc, #160]	; (8002e4c <HAL_RCC_OscConfig+0x930>)
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	4a27      	ldr	r2, [pc, #156]	; (8002e4c <HAL_RCC_OscConfig+0x930>)
 8002dae:	f043 0301 	orr.w	r3, r3, #1
 8002db2:	6213      	str	r3, [r2, #32]
 8002db4:	e00b      	b.n	8002dce <HAL_RCC_OscConfig+0x8b2>
 8002db6:	4b25      	ldr	r3, [pc, #148]	; (8002e4c <HAL_RCC_OscConfig+0x930>)
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	4a24      	ldr	r2, [pc, #144]	; (8002e4c <HAL_RCC_OscConfig+0x930>)
 8002dbc:	f023 0301 	bic.w	r3, r3, #1
 8002dc0:	6213      	str	r3, [r2, #32]
 8002dc2:	4b22      	ldr	r3, [pc, #136]	; (8002e4c <HAL_RCC_OscConfig+0x930>)
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	4a21      	ldr	r2, [pc, #132]	; (8002e4c <HAL_RCC_OscConfig+0x930>)
 8002dc8:	f023 0304 	bic.w	r3, r3, #4
 8002dcc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dce:	1d3b      	adds	r3, r7, #4
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d06b      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd8:	f7ff f822 	bl	8001e20 <HAL_GetTick>
 8002ddc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de0:	e00b      	b.n	8002dfa <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002de2:	f7ff f81d 	bl	8001e20 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e291      	b.n	800331e <HAL_RCC_OscConfig+0xe02>
 8002dfa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002dfe:	2202      	movs	r2, #2
 8002e00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e02:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	fa93 f2a3 	rbit	r2, r3
 8002e0c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002e16:	2202      	movs	r2, #2
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	fa93 f2a3 	rbit	r2, r3
 8002e24:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002e28:	601a      	str	r2, [r3, #0]
  return result;
 8002e2a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002e2e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e30:	fab3 f383 	clz	r3, r3
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	095b      	lsrs	r3, r3, #5
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	f043 0302 	orr.w	r3, r3, #2
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d109      	bne.n	8002e58 <HAL_RCC_OscConfig+0x93c>
 8002e44:	4b01      	ldr	r3, [pc, #4]	; (8002e4c <HAL_RCC_OscConfig+0x930>)
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	e014      	b.n	8002e74 <HAL_RCC_OscConfig+0x958>
 8002e4a:	bf00      	nop
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	10908120 	.word	0x10908120
 8002e54:	40007000 	.word	0x40007000
 8002e58:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e60:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	fa93 f2a3 	rbit	r2, r3
 8002e6a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	4bbb      	ldr	r3, [pc, #748]	; (8003160 <HAL_RCC_OscConfig+0xc44>)
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002e78:	2102      	movs	r1, #2
 8002e7a:	6011      	str	r1, [r2, #0]
 8002e7c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002e80:	6812      	ldr	r2, [r2, #0]
 8002e82:	fa92 f1a2 	rbit	r1, r2
 8002e86:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002e8a:	6011      	str	r1, [r2, #0]
  return result;
 8002e8c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002e90:	6812      	ldr	r2, [r2, #0]
 8002e92:	fab2 f282 	clz	r2, r2
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	f002 021f 	and.w	r2, r2, #31
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d099      	beq.n	8002de2 <HAL_RCC_OscConfig+0x8c6>
 8002eae:	e063      	b.n	8002f78 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb0:	f7fe ffb6 	bl	8001e20 <HAL_GetTick>
 8002eb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb8:	e00b      	b.n	8002ed2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eba:	f7fe ffb1 	bl	8001e20 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e225      	b.n	800331e <HAL_RCC_OscConfig+0xe02>
 8002ed2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eda:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	fa93 f2a3 	rbit	r2, r3
 8002ee4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002eee:	2202      	movs	r2, #2
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	fa93 f2a3 	rbit	r2, r3
 8002efc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002f00:	601a      	str	r2, [r3, #0]
  return result;
 8002f02:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002f06:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f08:	fab3 f383 	clz	r3, r3
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	095b      	lsrs	r3, r3, #5
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	f043 0302 	orr.w	r3, r3, #2
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d102      	bne.n	8002f22 <HAL_RCC_OscConfig+0xa06>
 8002f1c:	4b90      	ldr	r3, [pc, #576]	; (8003160 <HAL_RCC_OscConfig+0xc44>)
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	e00d      	b.n	8002f3e <HAL_RCC_OscConfig+0xa22>
 8002f22:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002f26:	2202      	movs	r2, #2
 8002f28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	fa93 f2a3 	rbit	r2, r3
 8002f34:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	4b89      	ldr	r3, [pc, #548]	; (8003160 <HAL_RCC_OscConfig+0xc44>)
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002f42:	2102      	movs	r1, #2
 8002f44:	6011      	str	r1, [r2, #0]
 8002f46:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002f4a:	6812      	ldr	r2, [r2, #0]
 8002f4c:	fa92 f1a2 	rbit	r1, r2
 8002f50:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002f54:	6011      	str	r1, [r2, #0]
  return result;
 8002f56:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	fab2 f282 	clz	r2, r2
 8002f60:	b2d2      	uxtb	r2, r2
 8002f62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	f002 021f 	and.w	r2, r2, #31
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f72:	4013      	ands	r3, r2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1a0      	bne.n	8002eba <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f78:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d105      	bne.n	8002f8c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f80:	4b77      	ldr	r3, [pc, #476]	; (8003160 <HAL_RCC_OscConfig+0xc44>)
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	4a76      	ldr	r2, [pc, #472]	; (8003160 <HAL_RCC_OscConfig+0xc44>)
 8002f86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f8a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f8c:	1d3b      	adds	r3, r7, #4
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f000 81c2 	beq.w	800331c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f98:	4b71      	ldr	r3, [pc, #452]	; (8003160 <HAL_RCC_OscConfig+0xc44>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f003 030c 	and.w	r3, r3, #12
 8002fa0:	2b08      	cmp	r3, #8
 8002fa2:	f000 819c 	beq.w	80032de <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fa6:	1d3b      	adds	r3, r7, #4
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	f040 8114 	bne.w	80031da <HAL_RCC_OscConfig+0xcbe>
 8002fb2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002fb6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	fa93 f2a3 	rbit	r2, r3
 8002fc6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002fca:	601a      	str	r2, [r3, #0]
  return result;
 8002fcc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002fd0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd2:	fab3 f383 	clz	r3, r3
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fdc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe8:	f7fe ff1a 	bl	8001e20 <HAL_GetTick>
 8002fec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ff0:	e009      	b.n	8003006 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff2:	f7fe ff15 	bl	8001e20 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e18b      	b.n	800331e <HAL_RCC_OscConfig+0xe02>
 8003006:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800300a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800300e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003010:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	fa93 f2a3 	rbit	r2, r3
 800301a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800301e:	601a      	str	r2, [r3, #0]
  return result;
 8003020:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003024:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003026:	fab3 f383 	clz	r3, r3
 800302a:	b2db      	uxtb	r3, r3
 800302c:	095b      	lsrs	r3, r3, #5
 800302e:	b2db      	uxtb	r3, r3
 8003030:	f043 0301 	orr.w	r3, r3, #1
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b01      	cmp	r3, #1
 8003038:	d102      	bne.n	8003040 <HAL_RCC_OscConfig+0xb24>
 800303a:	4b49      	ldr	r3, [pc, #292]	; (8003160 <HAL_RCC_OscConfig+0xc44>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	e01b      	b.n	8003078 <HAL_RCC_OscConfig+0xb5c>
 8003040:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003044:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003048:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	fa93 f2a3 	rbit	r2, r3
 8003054:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800305e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	fa93 f2a3 	rbit	r2, r3
 800306e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	4b3a      	ldr	r3, [pc, #232]	; (8003160 <HAL_RCC_OscConfig+0xc44>)
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800307c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003080:	6011      	str	r1, [r2, #0]
 8003082:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003086:	6812      	ldr	r2, [r2, #0]
 8003088:	fa92 f1a2 	rbit	r1, r2
 800308c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003090:	6011      	str	r1, [r2, #0]
  return result;
 8003092:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003096:	6812      	ldr	r2, [r2, #0]
 8003098:	fab2 f282 	clz	r2, r2
 800309c:	b2d2      	uxtb	r2, r2
 800309e:	f042 0220 	orr.w	r2, r2, #32
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	f002 021f 	and.w	r2, r2, #31
 80030a8:	2101      	movs	r1, #1
 80030aa:	fa01 f202 	lsl.w	r2, r1, r2
 80030ae:	4013      	ands	r3, r2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d19e      	bne.n	8002ff2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030b4:	4b2a      	ldr	r3, [pc, #168]	; (8003160 <HAL_RCC_OscConfig+0xc44>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80030bc:	1d3b      	adds	r3, r7, #4
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80030c2:	1d3b      	adds	r3, r7, #4
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	430b      	orrs	r3, r1
 80030ca:	4925      	ldr	r1, [pc, #148]	; (8003160 <HAL_RCC_OscConfig+0xc44>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	604b      	str	r3, [r1, #4]
 80030d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80030d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	fa93 f2a3 	rbit	r2, r3
 80030e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80030e8:	601a      	str	r2, [r3, #0]
  return result;
 80030ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80030ee:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030f0:	fab3 f383 	clz	r3, r3
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030fa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	461a      	mov	r2, r3
 8003102:	2301      	movs	r3, #1
 8003104:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003106:	f7fe fe8b 	bl	8001e20 <HAL_GetTick>
 800310a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800310e:	e009      	b.n	8003124 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003110:	f7fe fe86 	bl	8001e20 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e0fc      	b.n	800331e <HAL_RCC_OscConfig+0xe02>
 8003124:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003128:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800312c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	fa93 f2a3 	rbit	r2, r3
 8003138:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800313c:	601a      	str	r2, [r3, #0]
  return result;
 800313e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003142:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003144:	fab3 f383 	clz	r3, r3
 8003148:	b2db      	uxtb	r3, r3
 800314a:	095b      	lsrs	r3, r3, #5
 800314c:	b2db      	uxtb	r3, r3
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b01      	cmp	r3, #1
 8003156:	d105      	bne.n	8003164 <HAL_RCC_OscConfig+0xc48>
 8003158:	4b01      	ldr	r3, [pc, #4]	; (8003160 <HAL_RCC_OscConfig+0xc44>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	e01e      	b.n	800319c <HAL_RCC_OscConfig+0xc80>
 800315e:	bf00      	nop
 8003160:	40021000 	.word	0x40021000
 8003164:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003168:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800316c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	fa93 f2a3 	rbit	r2, r3
 8003178:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003182:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	fa93 f2a3 	rbit	r2, r3
 8003192:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	4b63      	ldr	r3, [pc, #396]	; (8003328 <HAL_RCC_OscConfig+0xe0c>)
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80031a0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031a4:	6011      	str	r1, [r2, #0]
 80031a6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80031aa:	6812      	ldr	r2, [r2, #0]
 80031ac:	fa92 f1a2 	rbit	r1, r2
 80031b0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80031b4:	6011      	str	r1, [r2, #0]
  return result;
 80031b6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80031ba:	6812      	ldr	r2, [r2, #0]
 80031bc:	fab2 f282 	clz	r2, r2
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	f042 0220 	orr.w	r2, r2, #32
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	f002 021f 	and.w	r2, r2, #31
 80031cc:	2101      	movs	r1, #1
 80031ce:	fa01 f202 	lsl.w	r2, r1, r2
 80031d2:	4013      	ands	r3, r2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d09b      	beq.n	8003110 <HAL_RCC_OscConfig+0xbf4>
 80031d8:	e0a0      	b.n	800331c <HAL_RCC_OscConfig+0xe00>
 80031da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80031de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	fa93 f2a3 	rbit	r2, r3
 80031ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031f2:	601a      	str	r2, [r3, #0]
  return result;
 80031f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031f8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031fa:	fab3 f383 	clz	r3, r3
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003204:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	461a      	mov	r2, r3
 800320c:	2300      	movs	r3, #0
 800320e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003210:	f7fe fe06 	bl	8001e20 <HAL_GetTick>
 8003214:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003218:	e009      	b.n	800322e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800321a:	f7fe fe01 	bl	8001e20 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e077      	b.n	800331e <HAL_RCC_OscConfig+0xe02>
 800322e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003232:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003236:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003238:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	fa93 f2a3 	rbit	r2, r3
 8003242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003246:	601a      	str	r2, [r3, #0]
  return result;
 8003248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800324c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800324e:	fab3 f383 	clz	r3, r3
 8003252:	b2db      	uxtb	r3, r3
 8003254:	095b      	lsrs	r3, r3, #5
 8003256:	b2db      	uxtb	r3, r3
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b01      	cmp	r3, #1
 8003260:	d102      	bne.n	8003268 <HAL_RCC_OscConfig+0xd4c>
 8003262:	4b31      	ldr	r3, [pc, #196]	; (8003328 <HAL_RCC_OscConfig+0xe0c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	e01b      	b.n	80032a0 <HAL_RCC_OscConfig+0xd84>
 8003268:	f107 0320 	add.w	r3, r7, #32
 800326c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003270:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003272:	f107 0320 	add.w	r3, r7, #32
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	fa93 f2a3 	rbit	r2, r3
 800327c:	f107 031c 	add.w	r3, r7, #28
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	f107 0318 	add.w	r3, r7, #24
 8003286:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	f107 0318 	add.w	r3, r7, #24
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	fa93 f2a3 	rbit	r2, r3
 8003296:	f107 0314 	add.w	r3, r7, #20
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	4b22      	ldr	r3, [pc, #136]	; (8003328 <HAL_RCC_OscConfig+0xe0c>)
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	f107 0210 	add.w	r2, r7, #16
 80032a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032a8:	6011      	str	r1, [r2, #0]
 80032aa:	f107 0210 	add.w	r2, r7, #16
 80032ae:	6812      	ldr	r2, [r2, #0]
 80032b0:	fa92 f1a2 	rbit	r1, r2
 80032b4:	f107 020c 	add.w	r2, r7, #12
 80032b8:	6011      	str	r1, [r2, #0]
  return result;
 80032ba:	f107 020c 	add.w	r2, r7, #12
 80032be:	6812      	ldr	r2, [r2, #0]
 80032c0:	fab2 f282 	clz	r2, r2
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	f042 0220 	orr.w	r2, r2, #32
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	f002 021f 	and.w	r2, r2, #31
 80032d0:	2101      	movs	r1, #1
 80032d2:	fa01 f202 	lsl.w	r2, r1, r2
 80032d6:	4013      	ands	r3, r2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d19e      	bne.n	800321a <HAL_RCC_OscConfig+0xcfe>
 80032dc:	e01e      	b.n	800331c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032de:	1d3b      	adds	r3, r7, #4
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d101      	bne.n	80032ec <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e018      	b.n	800331e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032ec:	4b0e      	ldr	r3, [pc, #56]	; (8003328 <HAL_RCC_OscConfig+0xe0c>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80032f4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80032f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032fc:	1d3b      	adds	r3, r7, #4
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	429a      	cmp	r2, r3
 8003304:	d108      	bne.n	8003318 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003306:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800330a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800330e:	1d3b      	adds	r3, r7, #4
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003314:	429a      	cmp	r2, r3
 8003316:	d001      	beq.n	800331c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e000      	b.n	800331e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40021000 	.word	0x40021000

0800332c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b09e      	sub	sp, #120	; 0x78
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003336:	2300      	movs	r3, #0
 8003338:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e162      	b.n	800360a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003344:	4b90      	ldr	r3, [pc, #576]	; (8003588 <HAL_RCC_ClockConfig+0x25c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d910      	bls.n	8003374 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003352:	4b8d      	ldr	r3, [pc, #564]	; (8003588 <HAL_RCC_ClockConfig+0x25c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f023 0207 	bic.w	r2, r3, #7
 800335a:	498b      	ldr	r1, [pc, #556]	; (8003588 <HAL_RCC_ClockConfig+0x25c>)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	4313      	orrs	r3, r2
 8003360:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003362:	4b89      	ldr	r3, [pc, #548]	; (8003588 <HAL_RCC_ClockConfig+0x25c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	429a      	cmp	r2, r3
 800336e:	d001      	beq.n	8003374 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e14a      	b.n	800360a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d008      	beq.n	8003392 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003380:	4b82      	ldr	r3, [pc, #520]	; (800358c <HAL_RCC_ClockConfig+0x260>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	497f      	ldr	r1, [pc, #508]	; (800358c <HAL_RCC_ClockConfig+0x260>)
 800338e:	4313      	orrs	r3, r2
 8003390:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 80dc 	beq.w	8003558 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d13c      	bne.n	8003422 <HAL_RCC_ClockConfig+0xf6>
 80033a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033ac:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033b0:	fa93 f3a3 	rbit	r3, r3
 80033b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80033b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b8:	fab3 f383 	clz	r3, r3
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	095b      	lsrs	r3, r3, #5
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	f043 0301 	orr.w	r3, r3, #1
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d102      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xa6>
 80033cc:	4b6f      	ldr	r3, [pc, #444]	; (800358c <HAL_RCC_ClockConfig+0x260>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	e00f      	b.n	80033f2 <HAL_RCC_ClockConfig+0xc6>
 80033d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033da:	fa93 f3a3 	rbit	r3, r3
 80033de:	667b      	str	r3, [r7, #100]	; 0x64
 80033e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033e4:	663b      	str	r3, [r7, #96]	; 0x60
 80033e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033e8:	fa93 f3a3 	rbit	r3, r3
 80033ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033ee:	4b67      	ldr	r3, [pc, #412]	; (800358c <HAL_RCC_ClockConfig+0x260>)
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033f6:	65ba      	str	r2, [r7, #88]	; 0x58
 80033f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033fa:	fa92 f2a2 	rbit	r2, r2
 80033fe:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003400:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003402:	fab2 f282 	clz	r2, r2
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	f042 0220 	orr.w	r2, r2, #32
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	f002 021f 	and.w	r2, r2, #31
 8003412:	2101      	movs	r1, #1
 8003414:	fa01 f202 	lsl.w	r2, r1, r2
 8003418:	4013      	ands	r3, r2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d17b      	bne.n	8003516 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e0f3      	b.n	800360a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b02      	cmp	r3, #2
 8003428:	d13c      	bne.n	80034a4 <HAL_RCC_ClockConfig+0x178>
 800342a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800342e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003430:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003432:	fa93 f3a3 	rbit	r3, r3
 8003436:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800343a:	fab3 f383 	clz	r3, r3
 800343e:	b2db      	uxtb	r3, r3
 8003440:	095b      	lsrs	r3, r3, #5
 8003442:	b2db      	uxtb	r3, r3
 8003444:	f043 0301 	orr.w	r3, r3, #1
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b01      	cmp	r3, #1
 800344c:	d102      	bne.n	8003454 <HAL_RCC_ClockConfig+0x128>
 800344e:	4b4f      	ldr	r3, [pc, #316]	; (800358c <HAL_RCC_ClockConfig+0x260>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	e00f      	b.n	8003474 <HAL_RCC_ClockConfig+0x148>
 8003454:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003458:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800345c:	fa93 f3a3 	rbit	r3, r3
 8003460:	647b      	str	r3, [r7, #68]	; 0x44
 8003462:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003466:	643b      	str	r3, [r7, #64]	; 0x40
 8003468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800346a:	fa93 f3a3 	rbit	r3, r3
 800346e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003470:	4b46      	ldr	r3, [pc, #280]	; (800358c <HAL_RCC_ClockConfig+0x260>)
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003478:	63ba      	str	r2, [r7, #56]	; 0x38
 800347a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800347c:	fa92 f2a2 	rbit	r2, r2
 8003480:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003482:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003484:	fab2 f282 	clz	r2, r2
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	f042 0220 	orr.w	r2, r2, #32
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	f002 021f 	and.w	r2, r2, #31
 8003494:	2101      	movs	r1, #1
 8003496:	fa01 f202 	lsl.w	r2, r1, r2
 800349a:	4013      	ands	r3, r2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d13a      	bne.n	8003516 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e0b2      	b.n	800360a <HAL_RCC_ClockConfig+0x2de>
 80034a4:	2302      	movs	r3, #2
 80034a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034aa:	fa93 f3a3 	rbit	r3, r3
 80034ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80034b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b2:	fab3 f383 	clz	r3, r3
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	095b      	lsrs	r3, r3, #5
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	f043 0301 	orr.w	r3, r3, #1
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d102      	bne.n	80034cc <HAL_RCC_ClockConfig+0x1a0>
 80034c6:	4b31      	ldr	r3, [pc, #196]	; (800358c <HAL_RCC_ClockConfig+0x260>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	e00d      	b.n	80034e8 <HAL_RCC_ClockConfig+0x1bc>
 80034cc:	2302      	movs	r3, #2
 80034ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d2:	fa93 f3a3 	rbit	r3, r3
 80034d6:	627b      	str	r3, [r7, #36]	; 0x24
 80034d8:	2302      	movs	r3, #2
 80034da:	623b      	str	r3, [r7, #32]
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	fa93 f3a3 	rbit	r3, r3
 80034e2:	61fb      	str	r3, [r7, #28]
 80034e4:	4b29      	ldr	r3, [pc, #164]	; (800358c <HAL_RCC_ClockConfig+0x260>)
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	2202      	movs	r2, #2
 80034ea:	61ba      	str	r2, [r7, #24]
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	fa92 f2a2 	rbit	r2, r2
 80034f2:	617a      	str	r2, [r7, #20]
  return result;
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	fab2 f282 	clz	r2, r2
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	f042 0220 	orr.w	r2, r2, #32
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	f002 021f 	and.w	r2, r2, #31
 8003506:	2101      	movs	r1, #1
 8003508:	fa01 f202 	lsl.w	r2, r1, r2
 800350c:	4013      	ands	r3, r2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e079      	b.n	800360a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003516:	4b1d      	ldr	r3, [pc, #116]	; (800358c <HAL_RCC_ClockConfig+0x260>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f023 0203 	bic.w	r2, r3, #3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	491a      	ldr	r1, [pc, #104]	; (800358c <HAL_RCC_ClockConfig+0x260>)
 8003524:	4313      	orrs	r3, r2
 8003526:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003528:	f7fe fc7a 	bl	8001e20 <HAL_GetTick>
 800352c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800352e:	e00a      	b.n	8003546 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003530:	f7fe fc76 	bl	8001e20 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	f241 3288 	movw	r2, #5000	; 0x1388
 800353e:	4293      	cmp	r3, r2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e061      	b.n	800360a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003546:	4b11      	ldr	r3, [pc, #68]	; (800358c <HAL_RCC_ClockConfig+0x260>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f003 020c 	and.w	r2, r3, #12
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	429a      	cmp	r2, r3
 8003556:	d1eb      	bne.n	8003530 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003558:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <HAL_RCC_ClockConfig+0x25c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	429a      	cmp	r2, r3
 8003564:	d214      	bcs.n	8003590 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003566:	4b08      	ldr	r3, [pc, #32]	; (8003588 <HAL_RCC_ClockConfig+0x25c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f023 0207 	bic.w	r2, r3, #7
 800356e:	4906      	ldr	r1, [pc, #24]	; (8003588 <HAL_RCC_ClockConfig+0x25c>)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	4313      	orrs	r3, r2
 8003574:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003576:	4b04      	ldr	r3, [pc, #16]	; (8003588 <HAL_RCC_ClockConfig+0x25c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d005      	beq.n	8003590 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e040      	b.n	800360a <HAL_RCC_ClockConfig+0x2de>
 8003588:	40022000 	.word	0x40022000
 800358c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b00      	cmp	r3, #0
 800359a:	d008      	beq.n	80035ae <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800359c:	4b1d      	ldr	r3, [pc, #116]	; (8003614 <HAL_RCC_ClockConfig+0x2e8>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	491a      	ldr	r1, [pc, #104]	; (8003614 <HAL_RCC_ClockConfig+0x2e8>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d009      	beq.n	80035ce <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035ba:	4b16      	ldr	r3, [pc, #88]	; (8003614 <HAL_RCC_ClockConfig+0x2e8>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	4912      	ldr	r1, [pc, #72]	; (8003614 <HAL_RCC_ClockConfig+0x2e8>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80035ce:	f000 f829 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 80035d2:	4601      	mov	r1, r0
 80035d4:	4b0f      	ldr	r3, [pc, #60]	; (8003614 <HAL_RCC_ClockConfig+0x2e8>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035dc:	22f0      	movs	r2, #240	; 0xf0
 80035de:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	fa92 f2a2 	rbit	r2, r2
 80035e6:	60fa      	str	r2, [r7, #12]
  return result;
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	fab2 f282 	clz	r2, r2
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	40d3      	lsrs	r3, r2
 80035f2:	4a09      	ldr	r2, [pc, #36]	; (8003618 <HAL_RCC_ClockConfig+0x2ec>)
 80035f4:	5cd3      	ldrb	r3, [r2, r3]
 80035f6:	fa21 f303 	lsr.w	r3, r1, r3
 80035fa:	4a08      	ldr	r2, [pc, #32]	; (800361c <HAL_RCC_ClockConfig+0x2f0>)
 80035fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80035fe:	4b08      	ldr	r3, [pc, #32]	; (8003620 <HAL_RCC_ClockConfig+0x2f4>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f7fe fbc8 	bl	8001d98 <HAL_InitTick>
  
  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3778      	adds	r7, #120	; 0x78
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40021000 	.word	0x40021000
 8003618:	08005df4 	.word	0x08005df4
 800361c:	20000000 	.word	0x20000000
 8003620:	20000004 	.word	0x20000004

08003624 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003624:	b480      	push	{r7}
 8003626:	b08b      	sub	sp, #44	; 0x2c
 8003628:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800362a:	2300      	movs	r3, #0
 800362c:	61fb      	str	r3, [r7, #28]
 800362e:	2300      	movs	r3, #0
 8003630:	61bb      	str	r3, [r7, #24]
 8003632:	2300      	movs	r3, #0
 8003634:	627b      	str	r3, [r7, #36]	; 0x24
 8003636:	2300      	movs	r3, #0
 8003638:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800363a:	2300      	movs	r3, #0
 800363c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800363e:	4b29      	ldr	r3, [pc, #164]	; (80036e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	f003 030c 	and.w	r3, r3, #12
 800364a:	2b04      	cmp	r3, #4
 800364c:	d002      	beq.n	8003654 <HAL_RCC_GetSysClockFreq+0x30>
 800364e:	2b08      	cmp	r3, #8
 8003650:	d003      	beq.n	800365a <HAL_RCC_GetSysClockFreq+0x36>
 8003652:	e03c      	b.n	80036ce <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003654:	4b24      	ldr	r3, [pc, #144]	; (80036e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003656:	623b      	str	r3, [r7, #32]
      break;
 8003658:	e03c      	b.n	80036d4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003660:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003664:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	fa92 f2a2 	rbit	r2, r2
 800366c:	607a      	str	r2, [r7, #4]
  return result;
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	fab2 f282 	clz	r2, r2
 8003674:	b2d2      	uxtb	r2, r2
 8003676:	40d3      	lsrs	r3, r2
 8003678:	4a1c      	ldr	r2, [pc, #112]	; (80036ec <HAL_RCC_GetSysClockFreq+0xc8>)
 800367a:	5cd3      	ldrb	r3, [r2, r3]
 800367c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800367e:	4b19      	ldr	r3, [pc, #100]	; (80036e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	220f      	movs	r2, #15
 8003688:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	fa92 f2a2 	rbit	r2, r2
 8003690:	60fa      	str	r2, [r7, #12]
  return result;
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	fab2 f282 	clz	r2, r2
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	40d3      	lsrs	r3, r2
 800369c:	4a14      	ldr	r2, [pc, #80]	; (80036f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800369e:	5cd3      	ldrb	r3, [r2, r3]
 80036a0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d008      	beq.n	80036be <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80036ac:	4a0e      	ldr	r2, [pc, #56]	; (80036e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	fb02 f303 	mul.w	r3, r2, r3
 80036ba:	627b      	str	r3, [r7, #36]	; 0x24
 80036bc:	e004      	b.n	80036c8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	4a0c      	ldr	r2, [pc, #48]	; (80036f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80036c2:	fb02 f303 	mul.w	r3, r2, r3
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	623b      	str	r3, [r7, #32]
      break;
 80036cc:	e002      	b.n	80036d4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036ce:	4b06      	ldr	r3, [pc, #24]	; (80036e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80036d0:	623b      	str	r3, [r7, #32]
      break;
 80036d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036d4:	6a3b      	ldr	r3, [r7, #32]
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	372c      	adds	r7, #44	; 0x2c
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	40021000 	.word	0x40021000
 80036e8:	007a1200 	.word	0x007a1200
 80036ec:	08005e0c 	.word	0x08005e0c
 80036f0:	08005e1c 	.word	0x08005e1c
 80036f4:	003d0900 	.word	0x003d0900

080036f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036fc:	4b03      	ldr	r3, [pc, #12]	; (800370c <HAL_RCC_GetHCLKFreq+0x14>)
 80036fe:	681b      	ldr	r3, [r3, #0]
}
 8003700:	4618      	mov	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	20000000 	.word	0x20000000

08003710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003716:	f7ff ffef 	bl	80036f8 <HAL_RCC_GetHCLKFreq>
 800371a:	4601      	mov	r1, r0
 800371c:	4b0b      	ldr	r3, [pc, #44]	; (800374c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003724:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003728:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	fa92 f2a2 	rbit	r2, r2
 8003730:	603a      	str	r2, [r7, #0]
  return result;
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	fab2 f282 	clz	r2, r2
 8003738:	b2d2      	uxtb	r2, r2
 800373a:	40d3      	lsrs	r3, r2
 800373c:	4a04      	ldr	r2, [pc, #16]	; (8003750 <HAL_RCC_GetPCLK1Freq+0x40>)
 800373e:	5cd3      	ldrb	r3, [r2, r3]
 8003740:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003744:	4618      	mov	r0, r3
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40021000 	.word	0x40021000
 8003750:	08005e04 	.word	0x08005e04

08003754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800375a:	f7ff ffcd 	bl	80036f8 <HAL_RCC_GetHCLKFreq>
 800375e:	4601      	mov	r1, r0
 8003760:	4b0b      	ldr	r3, [pc, #44]	; (8003790 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003768:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800376c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	fa92 f2a2 	rbit	r2, r2
 8003774:	603a      	str	r2, [r7, #0]
  return result;
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	fab2 f282 	clz	r2, r2
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	40d3      	lsrs	r3, r2
 8003780:	4a04      	ldr	r2, [pc, #16]	; (8003794 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003782:	5cd3      	ldrb	r3, [r2, r3]
 8003784:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003788:	4618      	mov	r0, r3
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40021000 	.word	0x40021000
 8003794:	08005e04 	.word	0x08005e04

08003798 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b092      	sub	sp, #72	; 0x48
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80037a8:	2300      	movs	r3, #0
 80037aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 80cd 	beq.w	8003956 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037bc:	4b86      	ldr	r3, [pc, #536]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037be:	69db      	ldr	r3, [r3, #28]
 80037c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10e      	bne.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037c8:	4b83      	ldr	r3, [pc, #524]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	4a82      	ldr	r2, [pc, #520]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d2:	61d3      	str	r3, [r2, #28]
 80037d4:	4b80      	ldr	r3, [pc, #512]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037dc:	60bb      	str	r3, [r7, #8]
 80037de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037e0:	2301      	movs	r3, #1
 80037e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e6:	4b7d      	ldr	r3, [pc, #500]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d118      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037f2:	4b7a      	ldr	r3, [pc, #488]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a79      	ldr	r2, [pc, #484]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80037f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037fc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037fe:	f7fe fb0f 	bl	8001e20 <HAL_GetTick>
 8003802:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003804:	e008      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003806:	f7fe fb0b 	bl	8001e20 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b64      	cmp	r3, #100	; 0x64
 8003812:	d901      	bls.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e0db      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003818:	4b70      	ldr	r3, [pc, #448]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0f0      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003824:	4b6c      	ldr	r3, [pc, #432]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800382c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800382e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003830:	2b00      	cmp	r3, #0
 8003832:	d07d      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800383c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800383e:	429a      	cmp	r2, r3
 8003840:	d076      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003842:	4b65      	ldr	r3, [pc, #404]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800384a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800384c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003850:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003854:	fa93 f3a3 	rbit	r3, r3
 8003858:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800385a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800385c:	fab3 f383 	clz	r3, r3
 8003860:	b2db      	uxtb	r3, r3
 8003862:	461a      	mov	r2, r3
 8003864:	4b5e      	ldr	r3, [pc, #376]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003866:	4413      	add	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	461a      	mov	r2, r3
 800386c:	2301      	movs	r3, #1
 800386e:	6013      	str	r3, [r2, #0]
 8003870:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003874:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003878:	fa93 f3a3 	rbit	r3, r3
 800387c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800387e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003880:	fab3 f383 	clz	r3, r3
 8003884:	b2db      	uxtb	r3, r3
 8003886:	461a      	mov	r2, r3
 8003888:	4b55      	ldr	r3, [pc, #340]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800388a:	4413      	add	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	461a      	mov	r2, r3
 8003890:	2300      	movs	r3, #0
 8003892:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003894:	4a50      	ldr	r2, [pc, #320]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003898:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800389a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d045      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a4:	f7fe fabc 	bl	8001e20 <HAL_GetTick>
 80038a8:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038aa:	e00a      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ac:	f7fe fab8 	bl	8001e20 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e086      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80038c2:	2302      	movs	r3, #2
 80038c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c8:	fa93 f3a3 	rbit	r3, r3
 80038cc:	627b      	str	r3, [r7, #36]	; 0x24
 80038ce:	2302      	movs	r3, #2
 80038d0:	623b      	str	r3, [r7, #32]
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	fa93 f3a3 	rbit	r3, r3
 80038d8:	61fb      	str	r3, [r7, #28]
  return result;
 80038da:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038dc:	fab3 f383 	clz	r3, r3
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	095b      	lsrs	r3, r3, #5
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	f043 0302 	orr.w	r3, r3, #2
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d102      	bne.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80038f0:	4b39      	ldr	r3, [pc, #228]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	e007      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80038f6:	2302      	movs	r3, #2
 80038f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	fa93 f3a3 	rbit	r3, r3
 8003900:	617b      	str	r3, [r7, #20]
 8003902:	4b35      	ldr	r3, [pc, #212]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	2202      	movs	r2, #2
 8003908:	613a      	str	r2, [r7, #16]
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	fa92 f2a2 	rbit	r2, r2
 8003910:	60fa      	str	r2, [r7, #12]
  return result;
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	fab2 f282 	clz	r2, r2
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800391e:	b2d2      	uxtb	r2, r2
 8003920:	f002 021f 	and.w	r2, r2, #31
 8003924:	2101      	movs	r1, #1
 8003926:	fa01 f202 	lsl.w	r2, r1, r2
 800392a:	4013      	ands	r3, r2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0bd      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003930:	4b29      	ldr	r3, [pc, #164]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	4926      	ldr	r1, [pc, #152]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800393e:	4313      	orrs	r3, r2
 8003940:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003942:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003946:	2b01      	cmp	r3, #1
 8003948:	d105      	bne.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800394a:	4b23      	ldr	r3, [pc, #140]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	4a22      	ldr	r2, [pc, #136]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003954:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d008      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003962:	4b1d      	ldr	r3, [pc, #116]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	f023 0203 	bic.w	r2, r3, #3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	491a      	ldr	r1, [pc, #104]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003970:	4313      	orrs	r3, r2
 8003972:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0320 	and.w	r3, r3, #32
 800397c:	2b00      	cmp	r3, #0
 800397e:	d008      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003980:	4b15      	ldr	r3, [pc, #84]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003984:	f023 0210 	bic.w	r2, r3, #16
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	4912      	ldr	r1, [pc, #72]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800398e:	4313      	orrs	r3, r2
 8003990:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399a:	2b00      	cmp	r3, #0
 800399c:	d008      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800399e:	4b0e      	ldr	r3, [pc, #56]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	490b      	ldr	r1, [pc, #44]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d008      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80039bc:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	4903      	ldr	r1, [pc, #12]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3748      	adds	r7, #72	; 0x48
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	40021000 	.word	0x40021000
 80039dc:	40007000 	.word	0x40007000
 80039e0:	10908100 	.word	0x10908100

080039e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e049      	b.n	8003a8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d106      	bne.n	8003a10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7fd ff7a 	bl	8001904 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2202      	movs	r2, #2
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3304      	adds	r3, #4
 8003a20:	4619      	mov	r1, r3
 8003a22:	4610      	mov	r0, r2
 8003a24:	f000 fc38 	bl	8004298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
	...

08003a94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d001      	beq.n	8003aac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e040      	b.n	8003b2e <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68da      	ldr	r2, [r3, #12]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f042 0201 	orr.w	r2, r2, #1
 8003ac2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a1c      	ldr	r2, [pc, #112]	; (8003b3c <HAL_TIM_Base_Start_IT+0xa8>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d00e      	beq.n	8003aec <HAL_TIM_Base_Start_IT+0x58>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad6:	d009      	beq.n	8003aec <HAL_TIM_Base_Start_IT+0x58>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a18      	ldr	r2, [pc, #96]	; (8003b40 <HAL_TIM_Base_Start_IT+0xac>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d004      	beq.n	8003aec <HAL_TIM_Base_Start_IT+0x58>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a17      	ldr	r2, [pc, #92]	; (8003b44 <HAL_TIM_Base_Start_IT+0xb0>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d115      	bne.n	8003b18 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	4b15      	ldr	r3, [pc, #84]	; (8003b48 <HAL_TIM_Base_Start_IT+0xb4>)
 8003af4:	4013      	ands	r3, r2
 8003af6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b06      	cmp	r3, #6
 8003afc:	d015      	beq.n	8003b2a <HAL_TIM_Base_Start_IT+0x96>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b04:	d011      	beq.n	8003b2a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f042 0201 	orr.w	r2, r2, #1
 8003b14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b16:	e008      	b.n	8003b2a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0201 	orr.w	r2, r2, #1
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	e000      	b.n	8003b2c <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	40012c00 	.word	0x40012c00
 8003b40:	40000400 	.word	0x40000400
 8003b44:	40014000 	.word	0x40014000
 8003b48:	00010007 	.word	0x00010007

08003b4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e049      	b.n	8003bf2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d106      	bne.n	8003b78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7fd fea6 	bl	80018c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	3304      	adds	r3, #4
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4610      	mov	r0, r2
 8003b8c:	f000 fb84 	bl	8004298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
	...

08003bfc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d109      	bne.n	8003c20 <HAL_TIM_PWM_Start+0x24>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	bf14      	ite	ne
 8003c18:	2301      	movne	r3, #1
 8003c1a:	2300      	moveq	r3, #0
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	e03c      	b.n	8003c9a <HAL_TIM_PWM_Start+0x9e>
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	2b04      	cmp	r3, #4
 8003c24:	d109      	bne.n	8003c3a <HAL_TIM_PWM_Start+0x3e>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	bf14      	ite	ne
 8003c32:	2301      	movne	r3, #1
 8003c34:	2300      	moveq	r3, #0
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	e02f      	b.n	8003c9a <HAL_TIM_PWM_Start+0x9e>
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d109      	bne.n	8003c54 <HAL_TIM_PWM_Start+0x58>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	bf14      	ite	ne
 8003c4c:	2301      	movne	r3, #1
 8003c4e:	2300      	moveq	r3, #0
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	e022      	b.n	8003c9a <HAL_TIM_PWM_Start+0x9e>
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	2b0c      	cmp	r3, #12
 8003c58:	d109      	bne.n	8003c6e <HAL_TIM_PWM_Start+0x72>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	bf14      	ite	ne
 8003c66:	2301      	movne	r3, #1
 8003c68:	2300      	moveq	r3, #0
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	e015      	b.n	8003c9a <HAL_TIM_PWM_Start+0x9e>
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	2b10      	cmp	r3, #16
 8003c72:	d109      	bne.n	8003c88 <HAL_TIM_PWM_Start+0x8c>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	bf14      	ite	ne
 8003c80:	2301      	movne	r3, #1
 8003c82:	2300      	moveq	r3, #0
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	e008      	b.n	8003c9a <HAL_TIM_PWM_Start+0x9e>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	bf14      	ite	ne
 8003c94:	2301      	movne	r3, #1
 8003c96:	2300      	moveq	r3, #0
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e088      	b.n	8003db4 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d104      	bne.n	8003cb2 <HAL_TIM_PWM_Start+0xb6>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cb0:	e023      	b.n	8003cfa <HAL_TIM_PWM_Start+0xfe>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	2b04      	cmp	r3, #4
 8003cb6:	d104      	bne.n	8003cc2 <HAL_TIM_PWM_Start+0xc6>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cc0:	e01b      	b.n	8003cfa <HAL_TIM_PWM_Start+0xfe>
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d104      	bne.n	8003cd2 <HAL_TIM_PWM_Start+0xd6>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cd0:	e013      	b.n	8003cfa <HAL_TIM_PWM_Start+0xfe>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	2b0c      	cmp	r3, #12
 8003cd6:	d104      	bne.n	8003ce2 <HAL_TIM_PWM_Start+0xe6>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ce0:	e00b      	b.n	8003cfa <HAL_TIM_PWM_Start+0xfe>
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	2b10      	cmp	r3, #16
 8003ce6:	d104      	bne.n	8003cf2 <HAL_TIM_PWM_Start+0xf6>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2202      	movs	r2, #2
 8003cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cf0:	e003      	b.n	8003cfa <HAL_TIM_PWM_Start+0xfe>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2202      	movs	r2, #2
 8003cf6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	6839      	ldr	r1, [r7, #0]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 fde6 	bl	80048d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a2b      	ldr	r2, [pc, #172]	; (8003dbc <HAL_TIM_PWM_Start+0x1c0>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d00e      	beq.n	8003d30 <HAL_TIM_PWM_Start+0x134>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a2a      	ldr	r2, [pc, #168]	; (8003dc0 <HAL_TIM_PWM_Start+0x1c4>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d009      	beq.n	8003d30 <HAL_TIM_PWM_Start+0x134>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a28      	ldr	r2, [pc, #160]	; (8003dc4 <HAL_TIM_PWM_Start+0x1c8>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d004      	beq.n	8003d30 <HAL_TIM_PWM_Start+0x134>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a27      	ldr	r2, [pc, #156]	; (8003dc8 <HAL_TIM_PWM_Start+0x1cc>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d101      	bne.n	8003d34 <HAL_TIM_PWM_Start+0x138>
 8003d30:	2301      	movs	r3, #1
 8003d32:	e000      	b.n	8003d36 <HAL_TIM_PWM_Start+0x13a>
 8003d34:	2300      	movs	r3, #0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d007      	beq.n	8003d4a <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a1b      	ldr	r2, [pc, #108]	; (8003dbc <HAL_TIM_PWM_Start+0x1c0>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d00e      	beq.n	8003d72 <HAL_TIM_PWM_Start+0x176>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d5c:	d009      	beq.n	8003d72 <HAL_TIM_PWM_Start+0x176>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a1a      	ldr	r2, [pc, #104]	; (8003dcc <HAL_TIM_PWM_Start+0x1d0>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d004      	beq.n	8003d72 <HAL_TIM_PWM_Start+0x176>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a14      	ldr	r2, [pc, #80]	; (8003dc0 <HAL_TIM_PWM_Start+0x1c4>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d115      	bne.n	8003d9e <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	4b15      	ldr	r3, [pc, #84]	; (8003dd0 <HAL_TIM_PWM_Start+0x1d4>)
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2b06      	cmp	r3, #6
 8003d82:	d015      	beq.n	8003db0 <HAL_TIM_PWM_Start+0x1b4>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d8a:	d011      	beq.n	8003db0 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f042 0201 	orr.w	r2, r2, #1
 8003d9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d9c:	e008      	b.n	8003db0 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f042 0201 	orr.w	r2, r2, #1
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	e000      	b.n	8003db2 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003db0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	40012c00 	.word	0x40012c00
 8003dc0:	40014000 	.word	0x40014000
 8003dc4:	40014400 	.word	0x40014400
 8003dc8:	40014800 	.word	0x40014800
 8003dcc:	40000400 	.word	0x40000400
 8003dd0:	00010007 	.word	0x00010007

08003dd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d122      	bne.n	8003e30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d11b      	bne.n	8003e30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f06f 0202 	mvn.w	r2, #2
 8003e00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	f003 0303 	and.w	r3, r3, #3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 fa20 	bl	800425c <HAL_TIM_IC_CaptureCallback>
 8003e1c:	e005      	b.n	8003e2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 fa12 	bl	8004248 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 fa23 	bl	8004270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	f003 0304 	and.w	r3, r3, #4
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	d122      	bne.n	8003e84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b04      	cmp	r3, #4
 8003e4a:	d11b      	bne.n	8003e84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f06f 0204 	mvn.w	r2, #4
 8003e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2202      	movs	r2, #2
 8003e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f9f6 	bl	800425c <HAL_TIM_IC_CaptureCallback>
 8003e70:	e005      	b.n	8003e7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f9e8 	bl	8004248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f9f9 	bl	8004270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	f003 0308 	and.w	r3, r3, #8
 8003e8e:	2b08      	cmp	r3, #8
 8003e90:	d122      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	f003 0308 	and.w	r3, r3, #8
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	d11b      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f06f 0208 	mvn.w	r2, #8
 8003ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2204      	movs	r2, #4
 8003eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	f003 0303 	and.w	r3, r3, #3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f9cc 	bl	800425c <HAL_TIM_IC_CaptureCallback>
 8003ec4:	e005      	b.n	8003ed2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f9be 	bl	8004248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f9cf 	bl	8004270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	f003 0310 	and.w	r3, r3, #16
 8003ee2:	2b10      	cmp	r3, #16
 8003ee4:	d122      	bne.n	8003f2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f003 0310 	and.w	r3, r3, #16
 8003ef0:	2b10      	cmp	r3, #16
 8003ef2:	d11b      	bne.n	8003f2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f06f 0210 	mvn.w	r2, #16
 8003efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2208      	movs	r2, #8
 8003f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f9a2 	bl	800425c <HAL_TIM_IC_CaptureCallback>
 8003f18:	e005      	b.n	8003f26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f994 	bl	8004248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f9a5 	bl	8004270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d10e      	bne.n	8003f58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d107      	bne.n	8003f58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f06f 0201 	mvn.w	r2, #1
 8003f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f96e 	bl	8004234 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f62:	2b80      	cmp	r3, #128	; 0x80
 8003f64:	d10e      	bne.n	8003f84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f70:	2b80      	cmp	r3, #128	; 0x80
 8003f72:	d107      	bne.n	8003f84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 fe64 	bl	8004c4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f92:	d10e      	bne.n	8003fb2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f9e:	2b80      	cmp	r3, #128	; 0x80
 8003fa0:	d107      	bne.n	8003fb2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003faa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 fe57 	bl	8004c60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fbc:	2b40      	cmp	r3, #64	; 0x40
 8003fbe:	d10e      	bne.n	8003fde <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fca:	2b40      	cmp	r3, #64	; 0x40
 8003fcc:	d107      	bne.n	8003fde <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f953 	bl	8004284 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	f003 0320 	and.w	r3, r3, #32
 8003fe8:	2b20      	cmp	r3, #32
 8003fea:	d10e      	bne.n	800400a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f003 0320 	and.w	r3, r3, #32
 8003ff6:	2b20      	cmp	r3, #32
 8003ff8:	d107      	bne.n	800400a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f06f 0220 	mvn.w	r2, #32
 8004002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 fe17 	bl	8004c38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800400a:	bf00      	nop
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
	...

08004014 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004026:	2b01      	cmp	r3, #1
 8004028:	d101      	bne.n	800402e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800402a:	2302      	movs	r3, #2
 800402c:	e0fd      	b.n	800422a <HAL_TIM_PWM_ConfigChannel+0x216>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b14      	cmp	r3, #20
 800403a:	f200 80f0 	bhi.w	800421e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800403e:	a201      	add	r2, pc, #4	; (adr r2, 8004044 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004044:	08004099 	.word	0x08004099
 8004048:	0800421f 	.word	0x0800421f
 800404c:	0800421f 	.word	0x0800421f
 8004050:	0800421f 	.word	0x0800421f
 8004054:	080040d9 	.word	0x080040d9
 8004058:	0800421f 	.word	0x0800421f
 800405c:	0800421f 	.word	0x0800421f
 8004060:	0800421f 	.word	0x0800421f
 8004064:	0800411b 	.word	0x0800411b
 8004068:	0800421f 	.word	0x0800421f
 800406c:	0800421f 	.word	0x0800421f
 8004070:	0800421f 	.word	0x0800421f
 8004074:	0800415b 	.word	0x0800415b
 8004078:	0800421f 	.word	0x0800421f
 800407c:	0800421f 	.word	0x0800421f
 8004080:	0800421f 	.word	0x0800421f
 8004084:	0800419d 	.word	0x0800419d
 8004088:	0800421f 	.word	0x0800421f
 800408c:	0800421f 	.word	0x0800421f
 8004090:	0800421f 	.word	0x0800421f
 8004094:	080041dd 	.word	0x080041dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68b9      	ldr	r1, [r7, #8]
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 f972 	bl	8004388 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	699a      	ldr	r2, [r3, #24]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f042 0208 	orr.w	r2, r2, #8
 80040b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	699a      	ldr	r2, [r3, #24]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 0204 	bic.w	r2, r2, #4
 80040c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6999      	ldr	r1, [r3, #24]
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	691a      	ldr	r2, [r3, #16]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	619a      	str	r2, [r3, #24]
      break;
 80040d6:	e0a3      	b.n	8004220 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68b9      	ldr	r1, [r7, #8]
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 f9d8 	bl	8004494 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	699a      	ldr	r2, [r3, #24]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699a      	ldr	r2, [r3, #24]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004102:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6999      	ldr	r1, [r3, #24]
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	021a      	lsls	r2, r3, #8
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	430a      	orrs	r2, r1
 8004116:	619a      	str	r2, [r3, #24]
      break;
 8004118:	e082      	b.n	8004220 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68b9      	ldr	r1, [r7, #8]
 8004120:	4618      	mov	r0, r3
 8004122:	f000 fa37 	bl	8004594 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	69da      	ldr	r2, [r3, #28]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f042 0208 	orr.w	r2, r2, #8
 8004134:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	69da      	ldr	r2, [r3, #28]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 0204 	bic.w	r2, r2, #4
 8004144:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	69d9      	ldr	r1, [r3, #28]
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	691a      	ldr	r2, [r3, #16]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	61da      	str	r2, [r3, #28]
      break;
 8004158:	e062      	b.n	8004220 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68b9      	ldr	r1, [r7, #8]
 8004160:	4618      	mov	r0, r3
 8004162:	f000 fa95 	bl	8004690 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	69da      	ldr	r2, [r3, #28]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004174:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	69da      	ldr	r2, [r3, #28]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004184:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	69d9      	ldr	r1, [r3, #28]
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	021a      	lsls	r2, r3, #8
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	61da      	str	r2, [r3, #28]
      break;
 800419a:	e041      	b.n	8004220 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68b9      	ldr	r1, [r7, #8]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 fad8 	bl	8004758 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f042 0208 	orr.w	r2, r2, #8
 80041b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0204 	bic.w	r2, r2, #4
 80041c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	691a      	ldr	r2, [r3, #16]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80041da:	e021      	b.n	8004220 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68b9      	ldr	r1, [r7, #8]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f000 fb16 	bl	8004814 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004206:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	021a      	lsls	r2, r3, #8
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800421c:	e000      	b.n	8004220 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 800421e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop

08004234 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a32      	ldr	r2, [pc, #200]	; (8004374 <TIM_Base_SetConfig+0xdc>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d007      	beq.n	80042c0 <TIM_Base_SetConfig+0x28>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b6:	d003      	beq.n	80042c0 <TIM_Base_SetConfig+0x28>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a2f      	ldr	r2, [pc, #188]	; (8004378 <TIM_Base_SetConfig+0xe0>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d108      	bne.n	80042d2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a27      	ldr	r2, [pc, #156]	; (8004374 <TIM_Base_SetConfig+0xdc>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d013      	beq.n	8004302 <TIM_Base_SetConfig+0x6a>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e0:	d00f      	beq.n	8004302 <TIM_Base_SetConfig+0x6a>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a24      	ldr	r2, [pc, #144]	; (8004378 <TIM_Base_SetConfig+0xe0>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d00b      	beq.n	8004302 <TIM_Base_SetConfig+0x6a>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a23      	ldr	r2, [pc, #140]	; (800437c <TIM_Base_SetConfig+0xe4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d007      	beq.n	8004302 <TIM_Base_SetConfig+0x6a>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a22      	ldr	r2, [pc, #136]	; (8004380 <TIM_Base_SetConfig+0xe8>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d003      	beq.n	8004302 <TIM_Base_SetConfig+0x6a>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a21      	ldr	r2, [pc, #132]	; (8004384 <TIM_Base_SetConfig+0xec>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d108      	bne.n	8004314 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	4313      	orrs	r3, r2
 8004312:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	4313      	orrs	r3, r2
 8004320:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a0e      	ldr	r2, [pc, #56]	; (8004374 <TIM_Base_SetConfig+0xdc>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d00b      	beq.n	8004358 <TIM_Base_SetConfig+0xc0>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a0e      	ldr	r2, [pc, #56]	; (800437c <TIM_Base_SetConfig+0xe4>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d007      	beq.n	8004358 <TIM_Base_SetConfig+0xc0>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a0d      	ldr	r2, [pc, #52]	; (8004380 <TIM_Base_SetConfig+0xe8>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d003      	beq.n	8004358 <TIM_Base_SetConfig+0xc0>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a0c      	ldr	r2, [pc, #48]	; (8004384 <TIM_Base_SetConfig+0xec>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d103      	bne.n	8004360 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	691a      	ldr	r2, [r3, #16]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	615a      	str	r2, [r3, #20]
}
 8004366:	bf00      	nop
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	40012c00 	.word	0x40012c00
 8004378:	40000400 	.word	0x40000400
 800437c:	40014000 	.word	0x40014000
 8004380:	40014400 	.word	0x40014400
 8004384:	40014800 	.word	0x40014800

08004388 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004388:	b480      	push	{r7}
 800438a:	b087      	sub	sp, #28
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	f023 0201 	bic.w	r2, r3, #1
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f023 0303 	bic.w	r3, r3, #3
 80043c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f023 0302 	bic.w	r3, r3, #2
 80043d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	4313      	orrs	r3, r2
 80043de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a28      	ldr	r2, [pc, #160]	; (8004484 <TIM_OC1_SetConfig+0xfc>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d00b      	beq.n	8004400 <TIM_OC1_SetConfig+0x78>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a27      	ldr	r2, [pc, #156]	; (8004488 <TIM_OC1_SetConfig+0x100>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d007      	beq.n	8004400 <TIM_OC1_SetConfig+0x78>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a26      	ldr	r2, [pc, #152]	; (800448c <TIM_OC1_SetConfig+0x104>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d003      	beq.n	8004400 <TIM_OC1_SetConfig+0x78>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a25      	ldr	r2, [pc, #148]	; (8004490 <TIM_OC1_SetConfig+0x108>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d10c      	bne.n	800441a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f023 0308 	bic.w	r3, r3, #8
 8004406:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	4313      	orrs	r3, r2
 8004410:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f023 0304 	bic.w	r3, r3, #4
 8004418:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a19      	ldr	r2, [pc, #100]	; (8004484 <TIM_OC1_SetConfig+0xfc>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d00b      	beq.n	800443a <TIM_OC1_SetConfig+0xb2>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a18      	ldr	r2, [pc, #96]	; (8004488 <TIM_OC1_SetConfig+0x100>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d007      	beq.n	800443a <TIM_OC1_SetConfig+0xb2>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a17      	ldr	r2, [pc, #92]	; (800448c <TIM_OC1_SetConfig+0x104>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d003      	beq.n	800443a <TIM_OC1_SetConfig+0xb2>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a16      	ldr	r2, [pc, #88]	; (8004490 <TIM_OC1_SetConfig+0x108>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d111      	bne.n	800445e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004440:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004448:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	4313      	orrs	r3, r2
 8004452:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	621a      	str	r2, [r3, #32]
}
 8004478:	bf00      	nop
 800447a:	371c      	adds	r7, #28
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	40012c00 	.word	0x40012c00
 8004488:	40014000 	.word	0x40014000
 800448c:	40014400 	.word	0x40014400
 8004490:	40014800 	.word	0x40014800

08004494 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004494:	b480      	push	{r7}
 8004496:	b087      	sub	sp, #28
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	f023 0210 	bic.w	r2, r3, #16
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	021b      	lsls	r3, r3, #8
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	4313      	orrs	r3, r2
 80044da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f023 0320 	bic.w	r3, r3, #32
 80044e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	011b      	lsls	r3, r3, #4
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a24      	ldr	r2, [pc, #144]	; (8004584 <TIM_OC2_SetConfig+0xf0>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d10d      	bne.n	8004514 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	011b      	lsls	r3, r3, #4
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	4313      	orrs	r3, r2
 800450a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004512:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a1b      	ldr	r2, [pc, #108]	; (8004584 <TIM_OC2_SetConfig+0xf0>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d00b      	beq.n	8004534 <TIM_OC2_SetConfig+0xa0>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a1a      	ldr	r2, [pc, #104]	; (8004588 <TIM_OC2_SetConfig+0xf4>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d007      	beq.n	8004534 <TIM_OC2_SetConfig+0xa0>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a19      	ldr	r2, [pc, #100]	; (800458c <TIM_OC2_SetConfig+0xf8>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d003      	beq.n	8004534 <TIM_OC2_SetConfig+0xa0>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a18      	ldr	r2, [pc, #96]	; (8004590 <TIM_OC2_SetConfig+0xfc>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d113      	bne.n	800455c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800453a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004542:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	4313      	orrs	r3, r2
 800454e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	4313      	orrs	r3, r2
 800455a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	621a      	str	r2, [r3, #32]
}
 8004576:	bf00      	nop
 8004578:	371c      	adds	r7, #28
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	40012c00 	.word	0x40012c00
 8004588:	40014000 	.word	0x40014000
 800458c:	40014400 	.word	0x40014400
 8004590:	40014800 	.word	0x40014800

08004594 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004594:	b480      	push	{r7}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f023 0303 	bic.w	r3, r3, #3
 80045ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	021b      	lsls	r3, r3, #8
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a23      	ldr	r2, [pc, #140]	; (8004680 <TIM_OC3_SetConfig+0xec>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d10d      	bne.n	8004612 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	021b      	lsls	r3, r3, #8
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	4313      	orrs	r3, r2
 8004608:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004610:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a1a      	ldr	r2, [pc, #104]	; (8004680 <TIM_OC3_SetConfig+0xec>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d00b      	beq.n	8004632 <TIM_OC3_SetConfig+0x9e>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a19      	ldr	r2, [pc, #100]	; (8004684 <TIM_OC3_SetConfig+0xf0>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d007      	beq.n	8004632 <TIM_OC3_SetConfig+0x9e>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a18      	ldr	r2, [pc, #96]	; (8004688 <TIM_OC3_SetConfig+0xf4>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d003      	beq.n	8004632 <TIM_OC3_SetConfig+0x9e>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a17      	ldr	r2, [pc, #92]	; (800468c <TIM_OC3_SetConfig+0xf8>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d113      	bne.n	800465a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004638:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004640:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	011b      	lsls	r3, r3, #4
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	4313      	orrs	r3, r2
 800464c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	011b      	lsls	r3, r3, #4
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	4313      	orrs	r3, r2
 8004658:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	621a      	str	r2, [r3, #32]
}
 8004674:	bf00      	nop
 8004676:	371c      	adds	r7, #28
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	40012c00 	.word	0x40012c00
 8004684:	40014000 	.word	0x40014000
 8004688:	40014400 	.word	0x40014400
 800468c:	40014800 	.word	0x40014800

08004690 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	021b      	lsls	r3, r3, #8
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	031b      	lsls	r3, r3, #12
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a16      	ldr	r2, [pc, #88]	; (8004748 <TIM_OC4_SetConfig+0xb8>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d00b      	beq.n	800470c <TIM_OC4_SetConfig+0x7c>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a15      	ldr	r2, [pc, #84]	; (800474c <TIM_OC4_SetConfig+0xbc>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d007      	beq.n	800470c <TIM_OC4_SetConfig+0x7c>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a14      	ldr	r2, [pc, #80]	; (8004750 <TIM_OC4_SetConfig+0xc0>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d003      	beq.n	800470c <TIM_OC4_SetConfig+0x7c>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a13      	ldr	r2, [pc, #76]	; (8004754 <TIM_OC4_SetConfig+0xc4>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d109      	bne.n	8004720 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004712:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	019b      	lsls	r3, r3, #6
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	4313      	orrs	r3, r2
 800471e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	621a      	str	r2, [r3, #32]
}
 800473a:	bf00      	nop
 800473c:	371c      	adds	r7, #28
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	40012c00 	.word	0x40012c00
 800474c:	40014000 	.word	0x40014000
 8004750:	40014400 	.word	0x40014400
 8004754:	40014800 	.word	0x40014800

08004758 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004758:	b480      	push	{r7}
 800475a:	b087      	sub	sp, #28
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800478a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	4313      	orrs	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800479c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	041b      	lsls	r3, r3, #16
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a15      	ldr	r2, [pc, #84]	; (8004804 <TIM_OC5_SetConfig+0xac>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d00b      	beq.n	80047ca <TIM_OC5_SetConfig+0x72>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a14      	ldr	r2, [pc, #80]	; (8004808 <TIM_OC5_SetConfig+0xb0>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d007      	beq.n	80047ca <TIM_OC5_SetConfig+0x72>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a13      	ldr	r2, [pc, #76]	; (800480c <TIM_OC5_SetConfig+0xb4>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d003      	beq.n	80047ca <TIM_OC5_SetConfig+0x72>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a12      	ldr	r2, [pc, #72]	; (8004810 <TIM_OC5_SetConfig+0xb8>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d109      	bne.n	80047de <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	021b      	lsls	r3, r3, #8
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	4313      	orrs	r3, r2
 80047dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	621a      	str	r2, [r3, #32]
}
 80047f8:	bf00      	nop
 80047fa:	371c      	adds	r7, #28
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	40012c00 	.word	0x40012c00
 8004808:	40014000 	.word	0x40014000
 800480c:	40014400 	.word	0x40014400
 8004810:	40014800 	.word	0x40014800

08004814 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004814:	b480      	push	{r7}
 8004816:	b087      	sub	sp, #28
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800483a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004842:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	021b      	lsls	r3, r3, #8
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	4313      	orrs	r3, r2
 8004852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800485a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	051b      	lsls	r3, r3, #20
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	4313      	orrs	r3, r2
 8004866:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a16      	ldr	r2, [pc, #88]	; (80048c4 <TIM_OC6_SetConfig+0xb0>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d00b      	beq.n	8004888 <TIM_OC6_SetConfig+0x74>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a15      	ldr	r2, [pc, #84]	; (80048c8 <TIM_OC6_SetConfig+0xb4>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d007      	beq.n	8004888 <TIM_OC6_SetConfig+0x74>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a14      	ldr	r2, [pc, #80]	; (80048cc <TIM_OC6_SetConfig+0xb8>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d003      	beq.n	8004888 <TIM_OC6_SetConfig+0x74>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a13      	ldr	r2, [pc, #76]	; (80048d0 <TIM_OC6_SetConfig+0xbc>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d109      	bne.n	800489c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800488e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	029b      	lsls	r3, r3, #10
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	4313      	orrs	r3, r2
 800489a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	621a      	str	r2, [r3, #32]
}
 80048b6:	bf00      	nop
 80048b8:	371c      	adds	r7, #28
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	40012c00 	.word	0x40012c00
 80048c8:	40014000 	.word	0x40014000
 80048cc:	40014400 	.word	0x40014400
 80048d0:	40014800 	.word	0x40014800

080048d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b087      	sub	sp, #28
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	f003 031f 	and.w	r3, r3, #31
 80048e6:	2201      	movs	r2, #1
 80048e8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6a1a      	ldr	r2, [r3, #32]
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	43db      	mvns	r3, r3
 80048f6:	401a      	ands	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6a1a      	ldr	r2, [r3, #32]
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f003 031f 	and.w	r3, r3, #31
 8004906:	6879      	ldr	r1, [r7, #4]
 8004908:	fa01 f303 	lsl.w	r3, r1, r3
 800490c:	431a      	orrs	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	621a      	str	r2, [r3, #32]
}
 8004912:	bf00      	nop
 8004914:	371c      	adds	r7, #28
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
	...

08004920 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d109      	bne.n	8004944 <HAL_TIMEx_PWMN_Start+0x24>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b01      	cmp	r3, #1
 800493a:	bf14      	ite	ne
 800493c:	2301      	movne	r3, #1
 800493e:	2300      	moveq	r3, #0
 8004940:	b2db      	uxtb	r3, r3
 8004942:	e022      	b.n	800498a <HAL_TIMEx_PWMN_Start+0x6a>
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	2b04      	cmp	r3, #4
 8004948:	d109      	bne.n	800495e <HAL_TIMEx_PWMN_Start+0x3e>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b01      	cmp	r3, #1
 8004954:	bf14      	ite	ne
 8004956:	2301      	movne	r3, #1
 8004958:	2300      	moveq	r3, #0
 800495a:	b2db      	uxtb	r3, r3
 800495c:	e015      	b.n	800498a <HAL_TIMEx_PWMN_Start+0x6a>
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b08      	cmp	r3, #8
 8004962:	d109      	bne.n	8004978 <HAL_TIMEx_PWMN_Start+0x58>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b01      	cmp	r3, #1
 800496e:	bf14      	ite	ne
 8004970:	2301      	movne	r3, #1
 8004972:	2300      	moveq	r3, #0
 8004974:	b2db      	uxtb	r3, r3
 8004976:	e008      	b.n	800498a <HAL_TIMEx_PWMN_Start+0x6a>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b01      	cmp	r3, #1
 8004982:	bf14      	ite	ne
 8004984:	2301      	movne	r3, #1
 8004986:	2300      	moveq	r3, #0
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e05f      	b.n	8004a52 <HAL_TIMEx_PWMN_Start+0x132>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d104      	bne.n	80049a2 <HAL_TIMEx_PWMN_Start+0x82>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049a0:	e013      	b.n	80049ca <HAL_TIMEx_PWMN_Start+0xaa>
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	d104      	bne.n	80049b2 <HAL_TIMEx_PWMN_Start+0x92>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2202      	movs	r2, #2
 80049ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049b0:	e00b      	b.n	80049ca <HAL_TIMEx_PWMN_Start+0xaa>
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2b08      	cmp	r3, #8
 80049b6:	d104      	bne.n	80049c2 <HAL_TIMEx_PWMN_Start+0xa2>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049c0:	e003      	b.n	80049ca <HAL_TIMEx_PWMN_Start+0xaa>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2202      	movs	r2, #2
 80049c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2204      	movs	r2, #4
 80049d0:	6839      	ldr	r1, [r7, #0]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 f94e 	bl	8004c74 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a1b      	ldr	r2, [pc, #108]	; (8004a5c <HAL_TIMEx_PWMN_Start+0x13c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d00e      	beq.n	8004a10 <HAL_TIMEx_PWMN_Start+0xf0>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049fa:	d009      	beq.n	8004a10 <HAL_TIMEx_PWMN_Start+0xf0>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a17      	ldr	r2, [pc, #92]	; (8004a60 <HAL_TIMEx_PWMN_Start+0x140>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d004      	beq.n	8004a10 <HAL_TIMEx_PWMN_Start+0xf0>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a16      	ldr	r2, [pc, #88]	; (8004a64 <HAL_TIMEx_PWMN_Start+0x144>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d115      	bne.n	8004a3c <HAL_TIMEx_PWMN_Start+0x11c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689a      	ldr	r2, [r3, #8]
 8004a16:	4b14      	ldr	r3, [pc, #80]	; (8004a68 <HAL_TIMEx_PWMN_Start+0x148>)
 8004a18:	4013      	ands	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2b06      	cmp	r3, #6
 8004a20:	d015      	beq.n	8004a4e <HAL_TIMEx_PWMN_Start+0x12e>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a28:	d011      	beq.n	8004a4e <HAL_TIMEx_PWMN_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f042 0201 	orr.w	r2, r2, #1
 8004a38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a3a:	e008      	b.n	8004a4e <HAL_TIMEx_PWMN_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0201 	orr.w	r2, r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	e000      	b.n	8004a50 <HAL_TIMEx_PWMN_Start+0x130>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	40012c00 	.word	0x40012c00
 8004a60:	40000400 	.word	0x40000400
 8004a64:	40014000 	.word	0x40014000
 8004a68:	00010007 	.word	0x00010007

08004a6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d101      	bne.n	8004a84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a80:	2302      	movs	r3, #2
 8004a82:	e054      	b.n	8004b2e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a24      	ldr	r2, [pc, #144]	; (8004b3c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d108      	bne.n	8004ac0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ab4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a17      	ldr	r2, [pc, #92]	; (8004b3c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d00e      	beq.n	8004b02 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aec:	d009      	beq.n	8004b02 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a13      	ldr	r2, [pc, #76]	; (8004b40 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d004      	beq.n	8004b02 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a11      	ldr	r2, [pc, #68]	; (8004b44 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d10c      	bne.n	8004b1c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	40012c00 	.word	0x40012c00
 8004b40:	40000400 	.word	0x40000400
 8004b44:	40014000 	.word	0x40014000

08004b48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b52:	2300      	movs	r3, #0
 8004b54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d101      	bne.n	8004b64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b60:	2302      	movs	r3, #2
 8004b62:	e060      	b.n	8004c26 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	041b      	lsls	r3, r3, #16
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a14      	ldr	r2, [pc, #80]	; (8004c34 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d115      	bne.n	8004c14 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	051b      	lsls	r3, r3, #20
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	69db      	ldr	r3, [r3, #28]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	40012c00 	.word	0x40012c00

08004c38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b087      	sub	sp, #28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	f003 031f 	and.w	r3, r3, #31
 8004c86:	2204      	movs	r2, #4
 8004c88:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6a1a      	ldr	r2, [r3, #32]
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	43db      	mvns	r3, r3
 8004c96:	401a      	ands	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6a1a      	ldr	r2, [r3, #32]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f003 031f 	and.w	r3, r3, #31
 8004ca6:	6879      	ldr	r1, [r7, #4]
 8004ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cac:	431a      	orrs	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	621a      	str	r2, [r3, #32]
}
 8004cb2:	bf00      	nop
 8004cb4:	371c      	adds	r7, #28
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr

08004cbe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b082      	sub	sp, #8
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e040      	b.n	8004d52 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d106      	bne.n	8004ce6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f7fc fead 	bl	8001a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2224      	movs	r2, #36	; 0x24
 8004cea:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 0201 	bic.w	r2, r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 fa89 	bl	8005214 <UART_SetConfig>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d101      	bne.n	8004d0c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e022      	b.n	8004d52 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d002      	beq.n	8004d1a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 fbb3 	bl	8005480 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d28:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689a      	ldr	r2, [r3, #8]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d38:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f042 0201 	orr.w	r2, r2, #1
 8004d48:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 fc3a 	bl	80055c4 <UART_CheckIdleState>
 8004d50:	4603      	mov	r3, r0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b084      	sub	sp, #16
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	60f8      	str	r0, [r7, #12]
 8004d62:	60b9      	str	r1, [r7, #8]
 8004d64:	4613      	mov	r3, r2
 8004d66:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d6c:	2b20      	cmp	r3, #32
 8004d6e:	d12c      	bne.n	8004dca <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d002      	beq.n	8004d7c <HAL_UART_Receive_IT+0x22>
 8004d76:	88fb      	ldrh	r3, [r7, #6]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d101      	bne.n	8004d80 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e025      	b.n	8004dcc <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d101      	bne.n	8004d8e <HAL_UART_Receive_IT+0x34>
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	e01e      	b.n	8004dcc <HAL_UART_Receive_IT+0x72>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d007      	beq.n	8004dba <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004db8:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004dba:	88fb      	ldrh	r3, [r7, #6]
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	68b9      	ldr	r1, [r7, #8]
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 fcc5 	bl	8005750 <UART_Start_Receive_IT>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	e000      	b.n	8004dcc <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004dca:	2302      	movs	r3, #2
  }
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b088      	sub	sp, #32
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004df4:	69fa      	ldr	r2, [r7, #28]
 8004df6:	f640 030f 	movw	r3, #2063	; 0x80f
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d113      	bne.n	8004e2c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	f003 0320 	and.w	r3, r3, #32
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00e      	beq.n	8004e2c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	f003 0320 	and.w	r3, r3, #32
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d009      	beq.n	8004e2c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f000 81cc 	beq.w	80051ba <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	4798      	blx	r3
      }
      return;
 8004e2a:	e1c6      	b.n	80051ba <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f000 80e3 	beq.w	8004ffa <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d105      	bne.n	8004e4a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004e3e:	69ba      	ldr	r2, [r7, #24]
 8004e40:	4ba5      	ldr	r3, [pc, #660]	; (80050d8 <HAL_UART_IRQHandler+0x304>)
 8004e42:	4013      	ands	r3, r2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f000 80d8 	beq.w	8004ffa <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d010      	beq.n	8004e76 <HAL_UART_IRQHandler+0xa2>
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00b      	beq.n	8004e76 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2201      	movs	r2, #1
 8004e64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e6c:	f043 0201 	orr.w	r2, r3, #1
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d010      	beq.n	8004ea2 <HAL_UART_IRQHandler+0xce>
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00b      	beq.n	8004ea2 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e98:	f043 0204 	orr.w	r2, r3, #4
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d010      	beq.n	8004ece <HAL_UART_IRQHandler+0xfa>
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00b      	beq.n	8004ece <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2204      	movs	r2, #4
 8004ebc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ec4:	f043 0202 	orr.w	r2, r3, #2
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	f003 0308 	and.w	r3, r3, #8
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d015      	beq.n	8004f04 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	f003 0320 	and.w	r3, r3, #32
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d104      	bne.n	8004eec <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00b      	beq.n	8004f04 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2208      	movs	r2, #8
 8004ef2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004efa:	f043 0208 	orr.w	r2, r3, #8
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d011      	beq.n	8004f32 <HAL_UART_IRQHandler+0x15e>
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00c      	beq.n	8004f32 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f28:	f043 0220 	orr.w	r2, r3, #32
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 8140 	beq.w	80051be <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	f003 0320 	and.w	r3, r3, #32
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00c      	beq.n	8004f62 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	f003 0320 	and.w	r3, r3, #32
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d007      	beq.n	8004f62 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d003      	beq.n	8004f62 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f68:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f74:	2b40      	cmp	r3, #64	; 0x40
 8004f76:	d004      	beq.n	8004f82 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d031      	beq.n	8004fe6 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 fc6c 	bl	8005860 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f92:	2b40      	cmp	r3, #64	; 0x40
 8004f94:	d123      	bne.n	8004fde <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fa4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d013      	beq.n	8004fd6 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb2:	4a4a      	ldr	r2, [pc, #296]	; (80050dc <HAL_UART_IRQHandler+0x308>)
 8004fb4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7fd f8aa 	bl	8002114 <HAL_DMA_Abort_IT>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d017      	beq.n	8004ff6 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004fd0:	4610      	mov	r0, r2
 8004fd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd4:	e00f      	b.n	8004ff6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f906 	bl	80051e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fdc:	e00b      	b.n	8004ff6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f902 	bl	80051e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fe4:	e007      	b.n	8004ff6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f8fe 	bl	80051e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004ff4:	e0e3      	b.n	80051be <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ff6:	bf00      	nop
    return;
 8004ff8:	e0e1      	b.n	80051be <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	f040 80a7 	bne.w	8005152 <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	f003 0310 	and.w	r3, r3, #16
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 80a1 	beq.w	8005152 <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	f003 0310 	and.w	r3, r3, #16
 8005016:	2b00      	cmp	r3, #0
 8005018:	f000 809b 	beq.w	8005152 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2210      	movs	r2, #16
 8005022:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800502e:	2b40      	cmp	r3, #64	; 0x40
 8005030:	d156      	bne.n	80050e0 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800503c:	893b      	ldrh	r3, [r7, #8]
 800503e:	2b00      	cmp	r3, #0
 8005040:	f000 80bf 	beq.w	80051c2 <HAL_UART_IRQHandler+0x3ee>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800504a:	893a      	ldrh	r2, [r7, #8]
 800504c:	429a      	cmp	r2, r3
 800504e:	f080 80b8 	bcs.w	80051c2 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	893a      	ldrh	r2, [r7, #8]
 8005056:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	2b20      	cmp	r3, #32
 8005062:	d02a      	beq.n	80050ba <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005072:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689a      	ldr	r2, [r3, #8]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f022 0201 	bic.w	r2, r2, #1
 8005082:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689a      	ldr	r2, [r3, #8]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005092:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2220      	movs	r2, #32
 8005098:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f022 0210 	bic.w	r2, r2, #16
 80050ae:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7fc fff4 	bl	80020a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	4619      	mov	r1, r3
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f894 	bl	80051fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80050d4:	e075      	b.n	80051c2 <HAL_UART_IRQHandler+0x3ee>
 80050d6:	bf00      	nop
 80050d8:	04000120 	.word	0x04000120
 80050dc:	080058bf 	.word	0x080058bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d063      	beq.n	80051c6 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_rx_data > 0U) )
 80050fe:	897b      	ldrh	r3, [r7, #10]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d060      	beq.n	80051c6 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005112:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689a      	ldr	r2, [r3, #8]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 0201 	bic.w	r2, r2, #1
 8005122:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2220      	movs	r2, #32
 8005128:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f022 0210 	bic.w	r2, r2, #16
 8005144:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005146:	897b      	ldrh	r3, [r7, #10]
 8005148:	4619      	mov	r1, r3
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f856 	bl	80051fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005150:	e039      	b.n	80051c6 <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00d      	beq.n	8005178 <HAL_UART_IRQHandler+0x3a4>
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d008      	beq.n	8005178 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800516e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 fca7 	bl	8005ac4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005176:	e029      	b.n	80051cc <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00d      	beq.n	800519e <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005188:	2b00      	cmp	r3, #0
 800518a:	d008      	beq.n	800519e <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005190:	2b00      	cmp	r3, #0
 8005192:	d01a      	beq.n	80051ca <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	4798      	blx	r3
    }
    return;
 800519c:	e015      	b.n	80051ca <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d011      	beq.n	80051cc <HAL_UART_IRQHandler+0x3f8>
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00c      	beq.n	80051cc <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 fb99 	bl	80058ea <UART_EndTransmit_IT>
    return;
 80051b8:	e008      	b.n	80051cc <HAL_UART_IRQHandler+0x3f8>
      return;
 80051ba:	bf00      	nop
 80051bc:	e006      	b.n	80051cc <HAL_UART_IRQHandler+0x3f8>
    return;
 80051be:	bf00      	nop
 80051c0:	e004      	b.n	80051cc <HAL_UART_IRQHandler+0x3f8>
      return;
 80051c2:	bf00      	nop
 80051c4:	e002      	b.n	80051cc <HAL_UART_IRQHandler+0x3f8>
      return;
 80051c6:	bf00      	nop
 80051c8:	e000      	b.n	80051cc <HAL_UART_IRQHandler+0x3f8>
    return;
 80051ca:	bf00      	nop
  }

}
 80051cc:	3720      	adds	r7, #32
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop

080051d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	460b      	mov	r3, r1
 8005206:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b088      	sub	sp, #32
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800521c:	2300      	movs	r3, #0
 800521e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	431a      	orrs	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	431a      	orrs	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	69db      	ldr	r3, [r3, #28]
 8005234:	4313      	orrs	r3, r2
 8005236:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	4b8a      	ldr	r3, [pc, #552]	; (8005468 <UART_SetConfig+0x254>)
 8005240:	4013      	ands	r3, r2
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	6812      	ldr	r2, [r2, #0]
 8005246:	6979      	ldr	r1, [r7, #20]
 8005248:	430b      	orrs	r3, r1
 800524a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68da      	ldr	r2, [r3, #12]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	4313      	orrs	r3, r2
 8005270:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	430a      	orrs	r2, r1
 8005284:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a78      	ldr	r2, [pc, #480]	; (800546c <UART_SetConfig+0x258>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d120      	bne.n	80052d2 <UART_SetConfig+0xbe>
 8005290:	4b77      	ldr	r3, [pc, #476]	; (8005470 <UART_SetConfig+0x25c>)
 8005292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005294:	f003 0303 	and.w	r3, r3, #3
 8005298:	2b03      	cmp	r3, #3
 800529a:	d817      	bhi.n	80052cc <UART_SetConfig+0xb8>
 800529c:	a201      	add	r2, pc, #4	; (adr r2, 80052a4 <UART_SetConfig+0x90>)
 800529e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a2:	bf00      	nop
 80052a4:	080052b5 	.word	0x080052b5
 80052a8:	080052c1 	.word	0x080052c1
 80052ac:	080052c7 	.word	0x080052c7
 80052b0:	080052bb 	.word	0x080052bb
 80052b4:	2300      	movs	r3, #0
 80052b6:	77fb      	strb	r3, [r7, #31]
 80052b8:	e01d      	b.n	80052f6 <UART_SetConfig+0xe2>
 80052ba:	2302      	movs	r3, #2
 80052bc:	77fb      	strb	r3, [r7, #31]
 80052be:	e01a      	b.n	80052f6 <UART_SetConfig+0xe2>
 80052c0:	2304      	movs	r3, #4
 80052c2:	77fb      	strb	r3, [r7, #31]
 80052c4:	e017      	b.n	80052f6 <UART_SetConfig+0xe2>
 80052c6:	2308      	movs	r3, #8
 80052c8:	77fb      	strb	r3, [r7, #31]
 80052ca:	e014      	b.n	80052f6 <UART_SetConfig+0xe2>
 80052cc:	2310      	movs	r3, #16
 80052ce:	77fb      	strb	r3, [r7, #31]
 80052d0:	e011      	b.n	80052f6 <UART_SetConfig+0xe2>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a67      	ldr	r2, [pc, #412]	; (8005474 <UART_SetConfig+0x260>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d102      	bne.n	80052e2 <UART_SetConfig+0xce>
 80052dc:	2300      	movs	r3, #0
 80052de:	77fb      	strb	r3, [r7, #31]
 80052e0:	e009      	b.n	80052f6 <UART_SetConfig+0xe2>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a64      	ldr	r2, [pc, #400]	; (8005478 <UART_SetConfig+0x264>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d102      	bne.n	80052f2 <UART_SetConfig+0xde>
 80052ec:	2300      	movs	r3, #0
 80052ee:	77fb      	strb	r3, [r7, #31]
 80052f0:	e001      	b.n	80052f6 <UART_SetConfig+0xe2>
 80052f2:	2310      	movs	r3, #16
 80052f4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052fe:	d15b      	bne.n	80053b8 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8005300:	7ffb      	ldrb	r3, [r7, #31]
 8005302:	2b08      	cmp	r3, #8
 8005304:	d827      	bhi.n	8005356 <UART_SetConfig+0x142>
 8005306:	a201      	add	r2, pc, #4	; (adr r2, 800530c <UART_SetConfig+0xf8>)
 8005308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530c:	08005331 	.word	0x08005331
 8005310:	08005339 	.word	0x08005339
 8005314:	08005341 	.word	0x08005341
 8005318:	08005357 	.word	0x08005357
 800531c:	08005347 	.word	0x08005347
 8005320:	08005357 	.word	0x08005357
 8005324:	08005357 	.word	0x08005357
 8005328:	08005357 	.word	0x08005357
 800532c:	0800534f 	.word	0x0800534f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005330:	f7fe f9ee 	bl	8003710 <HAL_RCC_GetPCLK1Freq>
 8005334:	61b8      	str	r0, [r7, #24]
        break;
 8005336:	e013      	b.n	8005360 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005338:	f7fe fa0c 	bl	8003754 <HAL_RCC_GetPCLK2Freq>
 800533c:	61b8      	str	r0, [r7, #24]
        break;
 800533e:	e00f      	b.n	8005360 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005340:	4b4e      	ldr	r3, [pc, #312]	; (800547c <UART_SetConfig+0x268>)
 8005342:	61bb      	str	r3, [r7, #24]
        break;
 8005344:	e00c      	b.n	8005360 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005346:	f7fe f96d 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 800534a:	61b8      	str	r0, [r7, #24]
        break;
 800534c:	e008      	b.n	8005360 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800534e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005352:	61bb      	str	r3, [r7, #24]
        break;
 8005354:	e004      	b.n	8005360 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005356:	2300      	movs	r3, #0
 8005358:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	77bb      	strb	r3, [r7, #30]
        break;
 800535e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d074      	beq.n	8005450 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	005a      	lsls	r2, r3, #1
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	085b      	lsrs	r3, r3, #1
 8005370:	441a      	add	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	fbb2 f3f3 	udiv	r3, r2, r3
 800537a:	b29b      	uxth	r3, r3
 800537c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	2b0f      	cmp	r3, #15
 8005382:	d916      	bls.n	80053b2 <UART_SetConfig+0x19e>
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800538a:	d212      	bcs.n	80053b2 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	b29b      	uxth	r3, r3
 8005390:	f023 030f 	bic.w	r3, r3, #15
 8005394:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	085b      	lsrs	r3, r3, #1
 800539a:	b29b      	uxth	r3, r3
 800539c:	f003 0307 	and.w	r3, r3, #7
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	89fb      	ldrh	r3, [r7, #14]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	89fa      	ldrh	r2, [r7, #14]
 80053ae:	60da      	str	r2, [r3, #12]
 80053b0:	e04e      	b.n	8005450 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	77bb      	strb	r3, [r7, #30]
 80053b6:	e04b      	b.n	8005450 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053b8:	7ffb      	ldrb	r3, [r7, #31]
 80053ba:	2b08      	cmp	r3, #8
 80053bc:	d827      	bhi.n	800540e <UART_SetConfig+0x1fa>
 80053be:	a201      	add	r2, pc, #4	; (adr r2, 80053c4 <UART_SetConfig+0x1b0>)
 80053c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c4:	080053e9 	.word	0x080053e9
 80053c8:	080053f1 	.word	0x080053f1
 80053cc:	080053f9 	.word	0x080053f9
 80053d0:	0800540f 	.word	0x0800540f
 80053d4:	080053ff 	.word	0x080053ff
 80053d8:	0800540f 	.word	0x0800540f
 80053dc:	0800540f 	.word	0x0800540f
 80053e0:	0800540f 	.word	0x0800540f
 80053e4:	08005407 	.word	0x08005407
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053e8:	f7fe f992 	bl	8003710 <HAL_RCC_GetPCLK1Freq>
 80053ec:	61b8      	str	r0, [r7, #24]
        break;
 80053ee:	e013      	b.n	8005418 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053f0:	f7fe f9b0 	bl	8003754 <HAL_RCC_GetPCLK2Freq>
 80053f4:	61b8      	str	r0, [r7, #24]
        break;
 80053f6:	e00f      	b.n	8005418 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053f8:	4b20      	ldr	r3, [pc, #128]	; (800547c <UART_SetConfig+0x268>)
 80053fa:	61bb      	str	r3, [r7, #24]
        break;
 80053fc:	e00c      	b.n	8005418 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053fe:	f7fe f911 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 8005402:	61b8      	str	r0, [r7, #24]
        break;
 8005404:	e008      	b.n	8005418 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800540a:	61bb      	str	r3, [r7, #24]
        break;
 800540c:	e004      	b.n	8005418 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800540e:	2300      	movs	r3, #0
 8005410:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	77bb      	strb	r3, [r7, #30]
        break;
 8005416:	bf00      	nop
    }

    if (pclk != 0U)
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d018      	beq.n	8005450 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	085a      	lsrs	r2, r3, #1
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	441a      	add	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005430:	b29b      	uxth	r3, r3
 8005432:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	2b0f      	cmp	r3, #15
 8005438:	d908      	bls.n	800544c <UART_SetConfig+0x238>
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005440:	d204      	bcs.n	800544c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	60da      	str	r2, [r3, #12]
 800544a:	e001      	b.n	8005450 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800545c:	7fbb      	ldrb	r3, [r7, #30]
}
 800545e:	4618      	mov	r0, r3
 8005460:	3720      	adds	r7, #32
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	efff69f3 	.word	0xefff69f3
 800546c:	40013800 	.word	0x40013800
 8005470:	40021000 	.word	0x40021000
 8005474:	40004400 	.word	0x40004400
 8005478:	40004800 	.word	0x40004800
 800547c:	007a1200 	.word	0x007a1200

08005480 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548c:	f003 0301 	and.w	r3, r3, #1
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00a      	beq.n	80054aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00a      	beq.n	80054cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	430a      	orrs	r2, r1
 80054ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	f003 0304 	and.w	r3, r3, #4
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00a      	beq.n	80054ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	f003 0308 	and.w	r3, r3, #8
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00a      	beq.n	8005510 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005514:	f003 0310 	and.w	r3, r3, #16
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00a      	beq.n	8005532 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	430a      	orrs	r2, r1
 8005530:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005536:	f003 0320 	and.w	r3, r3, #32
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00a      	beq.n	8005554 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	430a      	orrs	r2, r1
 8005552:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800555c:	2b00      	cmp	r3, #0
 800555e:	d01a      	beq.n	8005596 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	430a      	orrs	r2, r1
 8005574:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800557e:	d10a      	bne.n	8005596 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00a      	beq.n	80055b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	430a      	orrs	r2, r1
 80055b6:	605a      	str	r2, [r3, #4]
  }
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af02      	add	r7, sp, #8
 80055ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055d4:	f7fc fc24 	bl	8001e20 <HAL_GetTick>
 80055d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0308 	and.w	r3, r3, #8
 80055e4:	2b08      	cmp	r3, #8
 80055e6:	d10e      	bne.n	8005606 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f82d 	bl	8005656 <UART_WaitOnFlagUntilTimeout>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e023      	b.n	800564e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0304 	and.w	r3, r3, #4
 8005610:	2b04      	cmp	r3, #4
 8005612:	d10e      	bne.n	8005632 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005614:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f817 	bl	8005656 <UART_WaitOnFlagUntilTimeout>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d001      	beq.n	8005632 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e00d      	b.n	800564e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2220      	movs	r2, #32
 8005636:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2220      	movs	r2, #32
 800563c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b084      	sub	sp, #16
 800565a:	af00      	add	r7, sp, #0
 800565c:	60f8      	str	r0, [r7, #12]
 800565e:	60b9      	str	r1, [r7, #8]
 8005660:	603b      	str	r3, [r7, #0]
 8005662:	4613      	mov	r3, r2
 8005664:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005666:	e05e      	b.n	8005726 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566e:	d05a      	beq.n	8005726 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005670:	f7fc fbd6 	bl	8001e20 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	69ba      	ldr	r2, [r7, #24]
 800567c:	429a      	cmp	r2, r3
 800567e:	d302      	bcc.n	8005686 <UART_WaitOnFlagUntilTimeout+0x30>
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d11b      	bne.n	80056be <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005694:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	689a      	ldr	r2, [r3, #8]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f022 0201 	bic.w	r2, r2, #1
 80056a4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2220      	movs	r2, #32
 80056aa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2220      	movs	r2, #32
 80056b0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e043      	b.n	8005746 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0304 	and.w	r3, r3, #4
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d02c      	beq.n	8005726 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056da:	d124      	bne.n	8005726 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80056f4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	689a      	ldr	r2, [r3, #8]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f022 0201 	bic.w	r2, r2, #1
 8005704:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2220      	movs	r2, #32
 800570a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2220      	movs	r2, #32
 8005710:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2220      	movs	r2, #32
 8005716:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e00f      	b.n	8005746 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	69da      	ldr	r2, [r3, #28]
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	4013      	ands	r3, r2
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	429a      	cmp	r2, r3
 8005734:	bf0c      	ite	eq
 8005736:	2301      	moveq	r3, #1
 8005738:	2300      	movne	r3, #0
 800573a:	b2db      	uxtb	r3, r3
 800573c:	461a      	mov	r2, r3
 800573e:	79fb      	ldrb	r3, [r7, #7]
 8005740:	429a      	cmp	r2, r3
 8005742:	d091      	beq.n	8005668 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
	...

08005750 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	4613      	mov	r3, r2
 800575c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	68ba      	ldr	r2, [r7, #8]
 8005762:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	88fa      	ldrh	r2, [r7, #6]
 8005768:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	88fa      	ldrh	r2, [r7, #6]
 8005770:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005782:	d10e      	bne.n	80057a2 <UART_Start_Receive_IT+0x52>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d105      	bne.n	8005798 <UART_Start_Receive_IT+0x48>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005792:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005796:	e02d      	b.n	80057f4 <UART_Start_Receive_IT+0xa4>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	22ff      	movs	r2, #255	; 0xff
 800579c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057a0:	e028      	b.n	80057f4 <UART_Start_Receive_IT+0xa4>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10d      	bne.n	80057c6 <UART_Start_Receive_IT+0x76>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d104      	bne.n	80057bc <UART_Start_Receive_IT+0x6c>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	22ff      	movs	r2, #255	; 0xff
 80057b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057ba:	e01b      	b.n	80057f4 <UART_Start_Receive_IT+0xa4>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	227f      	movs	r2, #127	; 0x7f
 80057c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057c4:	e016      	b.n	80057f4 <UART_Start_Receive_IT+0xa4>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057ce:	d10d      	bne.n	80057ec <UART_Start_Receive_IT+0x9c>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d104      	bne.n	80057e2 <UART_Start_Receive_IT+0x92>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	227f      	movs	r2, #127	; 0x7f
 80057dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057e0:	e008      	b.n	80057f4 <UART_Start_Receive_IT+0xa4>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	223f      	movs	r2, #63	; 0x3f
 80057e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057ea:	e003      	b.n	80057f4 <UART_Start_Receive_IT+0xa4>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2222      	movs	r2, #34	; 0x22
 8005800:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f042 0201 	orr.w	r2, r2, #1
 8005810:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800581a:	d107      	bne.n	800582c <UART_Start_Receive_IT+0xdc>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d103      	bne.n	800582c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4a0c      	ldr	r2, [pc, #48]	; (8005858 <UART_Start_Receive_IT+0x108>)
 8005828:	665a      	str	r2, [r3, #100]	; 0x64
 800582a:	e002      	b.n	8005832 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	4a0b      	ldr	r2, [pc, #44]	; (800585c <UART_Start_Receive_IT+0x10c>)
 8005830:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005848:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr
 8005858:	080059f1 	.word	0x080059f1
 800585c:	0800591d 	.word	0x0800591d

08005860 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005876:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689a      	ldr	r2, [r3, #8]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f022 0201 	bic.w	r2, r2, #1
 8005886:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800588c:	2b01      	cmp	r3, #1
 800588e:	d107      	bne.n	80058a0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f022 0210 	bic.w	r2, r2, #16
 800589e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2220      	movs	r2, #32
 80058a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80058b2:	bf00      	nop
 80058b4:	370c      	adds	r7, #12
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr

080058be <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b084      	sub	sp, #16
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f7ff fc83 	bl	80051e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058e2:	bf00      	nop
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b082      	sub	sp, #8
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005900:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2220      	movs	r2, #32
 8005906:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7ff fc60 	bl	80051d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005914:	bf00      	nop
 8005916:	3708      	adds	r7, #8
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800592a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005930:	2b22      	cmp	r3, #34	; 0x22
 8005932:	d151      	bne.n	80059d8 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800593a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800593c:	89bb      	ldrh	r3, [r7, #12]
 800593e:	b2d9      	uxtb	r1, r3
 8005940:	89fb      	ldrh	r3, [r7, #14]
 8005942:	b2da      	uxtb	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005948:	400a      	ands	r2, r1
 800594a:	b2d2      	uxtb	r2, r2
 800594c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005952:	1c5a      	adds	r2, r3, #1
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800595e:	b29b      	uxth	r3, r3
 8005960:	3b01      	subs	r3, #1
 8005962:	b29a      	uxth	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005970:	b29b      	uxth	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d138      	bne.n	80059e8 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005984:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	689a      	ldr	r2, [r3, #8]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f022 0201 	bic.w	r2, r2, #1
 8005994:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2220      	movs	r2, #32
 800599a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d10f      	bne.n	80059ca <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 0210 	bic.w	r2, r2, #16
 80059b8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80059c0:	4619      	mov	r1, r3
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f7ff fc1a 	bl	80051fc <HAL_UARTEx_RxEventCallback>
 80059c8:	e002      	b.n	80059d0 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f7fb fcda 	bl	8001384 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80059d6:	e007      	b.n	80059e8 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	699a      	ldr	r2, [r3, #24]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f042 0208 	orr.w	r2, r2, #8
 80059e6:	619a      	str	r2, [r3, #24]
}
 80059e8:	bf00      	nop
 80059ea:	3710      	adds	r7, #16
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80059fe:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a04:	2b22      	cmp	r3, #34	; 0x22
 8005a06:	d151      	bne.n	8005aac <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005a0e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a14:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005a16:	89ba      	ldrh	r2, [r7, #12]
 8005a18:	89fb      	ldrh	r3, [r7, #14]
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a26:	1c9a      	adds	r2, r3, #2
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	3b01      	subs	r3, #1
 8005a36:	b29a      	uxth	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d138      	bne.n	8005abc <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005a58:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	689a      	ldr	r2, [r3, #8]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f022 0201 	bic.w	r2, r2, #1
 8005a68:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d10f      	bne.n	8005a9e <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 0210 	bic.w	r2, r2, #16
 8005a8c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a94:	4619      	mov	r1, r3
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7ff fbb0 	bl	80051fc <HAL_UARTEx_RxEventCallback>
 8005a9c:	e002      	b.n	8005aa4 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7fb fc70 	bl	8001384 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005aaa:	e007      	b.n	8005abc <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	699a      	ldr	r2, [r3, #24]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f042 0208 	orr.w	r2, r2, #8
 8005aba:	619a      	str	r2, [r3, #24]
}
 8005abc:	bf00      	nop
 8005abe:	3710      	adds	r7, #16
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <_ZdlPvj>:
 8005ad8:	f000 b820 	b.w	8005b1c <_ZdlPv>

08005adc <__cxa_guard_acquire>:
 8005adc:	6803      	ldr	r3, [r0, #0]
 8005ade:	07db      	lsls	r3, r3, #31
 8005ae0:	d406      	bmi.n	8005af0 <__cxa_guard_acquire+0x14>
 8005ae2:	7843      	ldrb	r3, [r0, #1]
 8005ae4:	b103      	cbz	r3, 8005ae8 <__cxa_guard_acquire+0xc>
 8005ae6:	deff      	udf	#255	; 0xff
 8005ae8:	2301      	movs	r3, #1
 8005aea:	7043      	strb	r3, [r0, #1]
 8005aec:	4618      	mov	r0, r3
 8005aee:	4770      	bx	lr
 8005af0:	2000      	movs	r0, #0
 8005af2:	4770      	bx	lr

08005af4 <__cxa_guard_release>:
 8005af4:	2301      	movs	r3, #1
 8005af6:	6003      	str	r3, [r0, #0]
 8005af8:	4770      	bx	lr

08005afa <_Znwj>:
 8005afa:	2801      	cmp	r0, #1
 8005afc:	bf38      	it	cc
 8005afe:	2001      	movcc	r0, #1
 8005b00:	b510      	push	{r4, lr}
 8005b02:	4604      	mov	r4, r0
 8005b04:	4620      	mov	r0, r4
 8005b06:	f000 f845 	bl	8005b94 <malloc>
 8005b0a:	b930      	cbnz	r0, 8005b1a <_Znwj+0x20>
 8005b0c:	f000 f808 	bl	8005b20 <_ZSt15get_new_handlerv>
 8005b10:	b908      	cbnz	r0, 8005b16 <_Znwj+0x1c>
 8005b12:	f000 f80d 	bl	8005b30 <abort>
 8005b16:	4780      	blx	r0
 8005b18:	e7f4      	b.n	8005b04 <_Znwj+0xa>
 8005b1a:	bd10      	pop	{r4, pc}

08005b1c <_ZdlPv>:
 8005b1c:	f000 b842 	b.w	8005ba4 <free>

08005b20 <_ZSt15get_new_handlerv>:
 8005b20:	4b02      	ldr	r3, [pc, #8]	; (8005b2c <_ZSt15get_new_handlerv+0xc>)
 8005b22:	6818      	ldr	r0, [r3, #0]
 8005b24:	f3bf 8f5b 	dmb	ish
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	200001fc 	.word	0x200001fc

08005b30 <abort>:
 8005b30:	b508      	push	{r3, lr}
 8005b32:	2006      	movs	r0, #6
 8005b34:	f000 f928 	bl	8005d88 <raise>
 8005b38:	2001      	movs	r0, #1
 8005b3a:	f7fc f89b 	bl	8001c74 <_exit>
	...

08005b40 <__errno>:
 8005b40:	4b01      	ldr	r3, [pc, #4]	; (8005b48 <__errno+0x8>)
 8005b42:	6818      	ldr	r0, [r3, #0]
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	2000000c 	.word	0x2000000c

08005b4c <__libc_init_array>:
 8005b4c:	b570      	push	{r4, r5, r6, lr}
 8005b4e:	4d0d      	ldr	r5, [pc, #52]	; (8005b84 <__libc_init_array+0x38>)
 8005b50:	4c0d      	ldr	r4, [pc, #52]	; (8005b88 <__libc_init_array+0x3c>)
 8005b52:	1b64      	subs	r4, r4, r5
 8005b54:	10a4      	asrs	r4, r4, #2
 8005b56:	2600      	movs	r6, #0
 8005b58:	42a6      	cmp	r6, r4
 8005b5a:	d109      	bne.n	8005b70 <__libc_init_array+0x24>
 8005b5c:	4d0b      	ldr	r5, [pc, #44]	; (8005b8c <__libc_init_array+0x40>)
 8005b5e:	4c0c      	ldr	r4, [pc, #48]	; (8005b90 <__libc_init_array+0x44>)
 8005b60:	f000 f93c 	bl	8005ddc <_init>
 8005b64:	1b64      	subs	r4, r4, r5
 8005b66:	10a4      	asrs	r4, r4, #2
 8005b68:	2600      	movs	r6, #0
 8005b6a:	42a6      	cmp	r6, r4
 8005b6c:	d105      	bne.n	8005b7a <__libc_init_array+0x2e>
 8005b6e:	bd70      	pop	{r4, r5, r6, pc}
 8005b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b74:	4798      	blx	r3
 8005b76:	3601      	adds	r6, #1
 8005b78:	e7ee      	b.n	8005b58 <__libc_init_array+0xc>
 8005b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b7e:	4798      	blx	r3
 8005b80:	3601      	adds	r6, #1
 8005b82:	e7f2      	b.n	8005b6a <__libc_init_array+0x1e>
 8005b84:	08005e2c 	.word	0x08005e2c
 8005b88:	08005e2c 	.word	0x08005e2c
 8005b8c:	08005e2c 	.word	0x08005e2c
 8005b90:	08005e34 	.word	0x08005e34

08005b94 <malloc>:
 8005b94:	4b02      	ldr	r3, [pc, #8]	; (8005ba0 <malloc+0xc>)
 8005b96:	4601      	mov	r1, r0
 8005b98:	6818      	ldr	r0, [r3, #0]
 8005b9a:	f000 b863 	b.w	8005c64 <_malloc_r>
 8005b9e:	bf00      	nop
 8005ba0:	2000000c 	.word	0x2000000c

08005ba4 <free>:
 8005ba4:	4b02      	ldr	r3, [pc, #8]	; (8005bb0 <free+0xc>)
 8005ba6:	4601      	mov	r1, r0
 8005ba8:	6818      	ldr	r0, [r3, #0]
 8005baa:	f000 b80b 	b.w	8005bc4 <_free_r>
 8005bae:	bf00      	nop
 8005bb0:	2000000c 	.word	0x2000000c

08005bb4 <memset>:
 8005bb4:	4402      	add	r2, r0
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d100      	bne.n	8005bbe <memset+0xa>
 8005bbc:	4770      	bx	lr
 8005bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8005bc2:	e7f9      	b.n	8005bb8 <memset+0x4>

08005bc4 <_free_r>:
 8005bc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005bc6:	2900      	cmp	r1, #0
 8005bc8:	d048      	beq.n	8005c5c <_free_r+0x98>
 8005bca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bce:	9001      	str	r0, [sp, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f1a1 0404 	sub.w	r4, r1, #4
 8005bd6:	bfb8      	it	lt
 8005bd8:	18e4      	addlt	r4, r4, r3
 8005bda:	f000 f8f1 	bl	8005dc0 <__malloc_lock>
 8005bde:	4a20      	ldr	r2, [pc, #128]	; (8005c60 <_free_r+0x9c>)
 8005be0:	9801      	ldr	r0, [sp, #4]
 8005be2:	6813      	ldr	r3, [r2, #0]
 8005be4:	4615      	mov	r5, r2
 8005be6:	b933      	cbnz	r3, 8005bf6 <_free_r+0x32>
 8005be8:	6063      	str	r3, [r4, #4]
 8005bea:	6014      	str	r4, [r2, #0]
 8005bec:	b003      	add	sp, #12
 8005bee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005bf2:	f000 b8eb 	b.w	8005dcc <__malloc_unlock>
 8005bf6:	42a3      	cmp	r3, r4
 8005bf8:	d90b      	bls.n	8005c12 <_free_r+0x4e>
 8005bfa:	6821      	ldr	r1, [r4, #0]
 8005bfc:	1862      	adds	r2, r4, r1
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	bf04      	itt	eq
 8005c02:	681a      	ldreq	r2, [r3, #0]
 8005c04:	685b      	ldreq	r3, [r3, #4]
 8005c06:	6063      	str	r3, [r4, #4]
 8005c08:	bf04      	itt	eq
 8005c0a:	1852      	addeq	r2, r2, r1
 8005c0c:	6022      	streq	r2, [r4, #0]
 8005c0e:	602c      	str	r4, [r5, #0]
 8005c10:	e7ec      	b.n	8005bec <_free_r+0x28>
 8005c12:	461a      	mov	r2, r3
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	b10b      	cbz	r3, 8005c1c <_free_r+0x58>
 8005c18:	42a3      	cmp	r3, r4
 8005c1a:	d9fa      	bls.n	8005c12 <_free_r+0x4e>
 8005c1c:	6811      	ldr	r1, [r2, #0]
 8005c1e:	1855      	adds	r5, r2, r1
 8005c20:	42a5      	cmp	r5, r4
 8005c22:	d10b      	bne.n	8005c3c <_free_r+0x78>
 8005c24:	6824      	ldr	r4, [r4, #0]
 8005c26:	4421      	add	r1, r4
 8005c28:	1854      	adds	r4, r2, r1
 8005c2a:	42a3      	cmp	r3, r4
 8005c2c:	6011      	str	r1, [r2, #0]
 8005c2e:	d1dd      	bne.n	8005bec <_free_r+0x28>
 8005c30:	681c      	ldr	r4, [r3, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	6053      	str	r3, [r2, #4]
 8005c36:	4421      	add	r1, r4
 8005c38:	6011      	str	r1, [r2, #0]
 8005c3a:	e7d7      	b.n	8005bec <_free_r+0x28>
 8005c3c:	d902      	bls.n	8005c44 <_free_r+0x80>
 8005c3e:	230c      	movs	r3, #12
 8005c40:	6003      	str	r3, [r0, #0]
 8005c42:	e7d3      	b.n	8005bec <_free_r+0x28>
 8005c44:	6825      	ldr	r5, [r4, #0]
 8005c46:	1961      	adds	r1, r4, r5
 8005c48:	428b      	cmp	r3, r1
 8005c4a:	bf04      	itt	eq
 8005c4c:	6819      	ldreq	r1, [r3, #0]
 8005c4e:	685b      	ldreq	r3, [r3, #4]
 8005c50:	6063      	str	r3, [r4, #4]
 8005c52:	bf04      	itt	eq
 8005c54:	1949      	addeq	r1, r1, r5
 8005c56:	6021      	streq	r1, [r4, #0]
 8005c58:	6054      	str	r4, [r2, #4]
 8005c5a:	e7c7      	b.n	8005bec <_free_r+0x28>
 8005c5c:	b003      	add	sp, #12
 8005c5e:	bd30      	pop	{r4, r5, pc}
 8005c60:	20000200 	.word	0x20000200

08005c64 <_malloc_r>:
 8005c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c66:	1ccd      	adds	r5, r1, #3
 8005c68:	f025 0503 	bic.w	r5, r5, #3
 8005c6c:	3508      	adds	r5, #8
 8005c6e:	2d0c      	cmp	r5, #12
 8005c70:	bf38      	it	cc
 8005c72:	250c      	movcc	r5, #12
 8005c74:	2d00      	cmp	r5, #0
 8005c76:	4606      	mov	r6, r0
 8005c78:	db01      	blt.n	8005c7e <_malloc_r+0x1a>
 8005c7a:	42a9      	cmp	r1, r5
 8005c7c:	d903      	bls.n	8005c86 <_malloc_r+0x22>
 8005c7e:	230c      	movs	r3, #12
 8005c80:	6033      	str	r3, [r6, #0]
 8005c82:	2000      	movs	r0, #0
 8005c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c86:	f000 f89b 	bl	8005dc0 <__malloc_lock>
 8005c8a:	4921      	ldr	r1, [pc, #132]	; (8005d10 <_malloc_r+0xac>)
 8005c8c:	680a      	ldr	r2, [r1, #0]
 8005c8e:	4614      	mov	r4, r2
 8005c90:	b99c      	cbnz	r4, 8005cba <_malloc_r+0x56>
 8005c92:	4f20      	ldr	r7, [pc, #128]	; (8005d14 <_malloc_r+0xb0>)
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	b923      	cbnz	r3, 8005ca2 <_malloc_r+0x3e>
 8005c98:	4621      	mov	r1, r4
 8005c9a:	4630      	mov	r0, r6
 8005c9c:	f000 f83c 	bl	8005d18 <_sbrk_r>
 8005ca0:	6038      	str	r0, [r7, #0]
 8005ca2:	4629      	mov	r1, r5
 8005ca4:	4630      	mov	r0, r6
 8005ca6:	f000 f837 	bl	8005d18 <_sbrk_r>
 8005caa:	1c43      	adds	r3, r0, #1
 8005cac:	d123      	bne.n	8005cf6 <_malloc_r+0x92>
 8005cae:	230c      	movs	r3, #12
 8005cb0:	6033      	str	r3, [r6, #0]
 8005cb2:	4630      	mov	r0, r6
 8005cb4:	f000 f88a 	bl	8005dcc <__malloc_unlock>
 8005cb8:	e7e3      	b.n	8005c82 <_malloc_r+0x1e>
 8005cba:	6823      	ldr	r3, [r4, #0]
 8005cbc:	1b5b      	subs	r3, r3, r5
 8005cbe:	d417      	bmi.n	8005cf0 <_malloc_r+0x8c>
 8005cc0:	2b0b      	cmp	r3, #11
 8005cc2:	d903      	bls.n	8005ccc <_malloc_r+0x68>
 8005cc4:	6023      	str	r3, [r4, #0]
 8005cc6:	441c      	add	r4, r3
 8005cc8:	6025      	str	r5, [r4, #0]
 8005cca:	e004      	b.n	8005cd6 <_malloc_r+0x72>
 8005ccc:	6863      	ldr	r3, [r4, #4]
 8005cce:	42a2      	cmp	r2, r4
 8005cd0:	bf0c      	ite	eq
 8005cd2:	600b      	streq	r3, [r1, #0]
 8005cd4:	6053      	strne	r3, [r2, #4]
 8005cd6:	4630      	mov	r0, r6
 8005cd8:	f000 f878 	bl	8005dcc <__malloc_unlock>
 8005cdc:	f104 000b 	add.w	r0, r4, #11
 8005ce0:	1d23      	adds	r3, r4, #4
 8005ce2:	f020 0007 	bic.w	r0, r0, #7
 8005ce6:	1ac2      	subs	r2, r0, r3
 8005ce8:	d0cc      	beq.n	8005c84 <_malloc_r+0x20>
 8005cea:	1a1b      	subs	r3, r3, r0
 8005cec:	50a3      	str	r3, [r4, r2]
 8005cee:	e7c9      	b.n	8005c84 <_malloc_r+0x20>
 8005cf0:	4622      	mov	r2, r4
 8005cf2:	6864      	ldr	r4, [r4, #4]
 8005cf4:	e7cc      	b.n	8005c90 <_malloc_r+0x2c>
 8005cf6:	1cc4      	adds	r4, r0, #3
 8005cf8:	f024 0403 	bic.w	r4, r4, #3
 8005cfc:	42a0      	cmp	r0, r4
 8005cfe:	d0e3      	beq.n	8005cc8 <_malloc_r+0x64>
 8005d00:	1a21      	subs	r1, r4, r0
 8005d02:	4630      	mov	r0, r6
 8005d04:	f000 f808 	bl	8005d18 <_sbrk_r>
 8005d08:	3001      	adds	r0, #1
 8005d0a:	d1dd      	bne.n	8005cc8 <_malloc_r+0x64>
 8005d0c:	e7cf      	b.n	8005cae <_malloc_r+0x4a>
 8005d0e:	bf00      	nop
 8005d10:	20000200 	.word	0x20000200
 8005d14:	20000204 	.word	0x20000204

08005d18 <_sbrk_r>:
 8005d18:	b538      	push	{r3, r4, r5, lr}
 8005d1a:	4d06      	ldr	r5, [pc, #24]	; (8005d34 <_sbrk_r+0x1c>)
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	4604      	mov	r4, r0
 8005d20:	4608      	mov	r0, r1
 8005d22:	602b      	str	r3, [r5, #0]
 8005d24:	f7fb ffb0 	bl	8001c88 <_sbrk>
 8005d28:	1c43      	adds	r3, r0, #1
 8005d2a:	d102      	bne.n	8005d32 <_sbrk_r+0x1a>
 8005d2c:	682b      	ldr	r3, [r5, #0]
 8005d2e:	b103      	cbz	r3, 8005d32 <_sbrk_r+0x1a>
 8005d30:	6023      	str	r3, [r4, #0]
 8005d32:	bd38      	pop	{r3, r4, r5, pc}
 8005d34:	2000020c 	.word	0x2000020c

08005d38 <_raise_r>:
 8005d38:	291f      	cmp	r1, #31
 8005d3a:	b538      	push	{r3, r4, r5, lr}
 8005d3c:	4604      	mov	r4, r0
 8005d3e:	460d      	mov	r5, r1
 8005d40:	d904      	bls.n	8005d4c <_raise_r+0x14>
 8005d42:	2316      	movs	r3, #22
 8005d44:	6003      	str	r3, [r0, #0]
 8005d46:	f04f 30ff 	mov.w	r0, #4294967295
 8005d4a:	bd38      	pop	{r3, r4, r5, pc}
 8005d4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005d4e:	b112      	cbz	r2, 8005d56 <_raise_r+0x1e>
 8005d50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005d54:	b94b      	cbnz	r3, 8005d6a <_raise_r+0x32>
 8005d56:	4620      	mov	r0, r4
 8005d58:	f000 f830 	bl	8005dbc <_getpid_r>
 8005d5c:	462a      	mov	r2, r5
 8005d5e:	4601      	mov	r1, r0
 8005d60:	4620      	mov	r0, r4
 8005d62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d66:	f000 b817 	b.w	8005d98 <_kill_r>
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d00a      	beq.n	8005d84 <_raise_r+0x4c>
 8005d6e:	1c59      	adds	r1, r3, #1
 8005d70:	d103      	bne.n	8005d7a <_raise_r+0x42>
 8005d72:	2316      	movs	r3, #22
 8005d74:	6003      	str	r3, [r0, #0]
 8005d76:	2001      	movs	r0, #1
 8005d78:	e7e7      	b.n	8005d4a <_raise_r+0x12>
 8005d7a:	2400      	movs	r4, #0
 8005d7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005d80:	4628      	mov	r0, r5
 8005d82:	4798      	blx	r3
 8005d84:	2000      	movs	r0, #0
 8005d86:	e7e0      	b.n	8005d4a <_raise_r+0x12>

08005d88 <raise>:
 8005d88:	4b02      	ldr	r3, [pc, #8]	; (8005d94 <raise+0xc>)
 8005d8a:	4601      	mov	r1, r0
 8005d8c:	6818      	ldr	r0, [r3, #0]
 8005d8e:	f7ff bfd3 	b.w	8005d38 <_raise_r>
 8005d92:	bf00      	nop
 8005d94:	2000000c 	.word	0x2000000c

08005d98 <_kill_r>:
 8005d98:	b538      	push	{r3, r4, r5, lr}
 8005d9a:	4d07      	ldr	r5, [pc, #28]	; (8005db8 <_kill_r+0x20>)
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	4604      	mov	r4, r0
 8005da0:	4608      	mov	r0, r1
 8005da2:	4611      	mov	r1, r2
 8005da4:	602b      	str	r3, [r5, #0]
 8005da6:	f7fb ff55 	bl	8001c54 <_kill>
 8005daa:	1c43      	adds	r3, r0, #1
 8005dac:	d102      	bne.n	8005db4 <_kill_r+0x1c>
 8005dae:	682b      	ldr	r3, [r5, #0]
 8005db0:	b103      	cbz	r3, 8005db4 <_kill_r+0x1c>
 8005db2:	6023      	str	r3, [r4, #0]
 8005db4:	bd38      	pop	{r3, r4, r5, pc}
 8005db6:	bf00      	nop
 8005db8:	2000020c 	.word	0x2000020c

08005dbc <_getpid_r>:
 8005dbc:	f7fb bf42 	b.w	8001c44 <_getpid>

08005dc0 <__malloc_lock>:
 8005dc0:	4801      	ldr	r0, [pc, #4]	; (8005dc8 <__malloc_lock+0x8>)
 8005dc2:	f000 b809 	b.w	8005dd8 <__retarget_lock_acquire_recursive>
 8005dc6:	bf00      	nop
 8005dc8:	20000214 	.word	0x20000214

08005dcc <__malloc_unlock>:
 8005dcc:	4801      	ldr	r0, [pc, #4]	; (8005dd4 <__malloc_unlock+0x8>)
 8005dce:	f000 b804 	b.w	8005dda <__retarget_lock_release_recursive>
 8005dd2:	bf00      	nop
 8005dd4:	20000214 	.word	0x20000214

08005dd8 <__retarget_lock_acquire_recursive>:
 8005dd8:	4770      	bx	lr

08005dda <__retarget_lock_release_recursive>:
 8005dda:	4770      	bx	lr

08005ddc <_init>:
 8005ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dde:	bf00      	nop
 8005de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005de2:	bc08      	pop	{r3}
 8005de4:	469e      	mov	lr, r3
 8005de6:	4770      	bx	lr

08005de8 <_fini>:
 8005de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dea:	bf00      	nop
 8005dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dee:	bc08      	pop	{r3}
 8005df0:	469e      	mov	lr, r3
 8005df2:	4770      	bx	lr
