
motor_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f24  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080040ac  080040ac  000140ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040e4  080040e4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080040e4  080040e4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040e4  080040e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040e4  080040e4  000140e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040e8  080040e8  000140e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080040ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  2000000c  080040f8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  080040f8  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e2e3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e5b  00000000  00000000  0002e31f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d08  00000000  00000000  00030180  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c50  00000000  00000000  00030e88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000035d9  00000000  00000000  00031ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b427  00000000  00000000  000350b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a66ef  00000000  00000000  000404d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e6bc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036a8  00000000  00000000  000e6c44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004094 	.word	0x08004094

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004094 	.word	0x08004094

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fbf6 	bl	80009bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f80e 	bl	80001f0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f9b4 	bl	8000540 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 80001d8:	f000 f97e 	bl	80004d8 <_ZL19MX_USART2_UART_Initv>
  MX_TIM1_Init();
 80001dc:	f000 f870 	bl	80002c0 <_ZL12MX_TIM1_Initv>
  MX_TIM6_Init();
 80001e0:	f000 f938 	bl	8000454 <_ZL12MX_TIM6_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 80001e4:	4801      	ldr	r0, [pc, #4]	; (80001ec <main+0x24>)
 80001e6:	f002 fa7d 	bl	80026e4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001ea:	e7fe      	b.n	80001ea <main+0x22>
 80001ec:	20000074 	.word	0x20000074

080001f0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b096      	sub	sp, #88	; 0x58
 80001f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80001fa:	2228      	movs	r2, #40	; 0x28
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f003 ff40 	bl	8004084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000204:	f107 031c 	add.w	r3, r7, #28
 8000208:	2200      	movs	r2, #0
 800020a:	601a      	str	r2, [r3, #0]
 800020c:	605a      	str	r2, [r3, #4]
 800020e:	609a      	str	r2, [r3, #8]
 8000210:	60da      	str	r2, [r3, #12]
 8000212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]
 800021a:	605a      	str	r2, [r3, #4]
 800021c:	609a      	str	r2, [r3, #8]
 800021e:	60da      	str	r2, [r3, #12]
 8000220:	611a      	str	r2, [r3, #16]
 8000222:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000224:	2302      	movs	r3, #2
 8000226:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000228:	2301      	movs	r3, #1
 800022a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800022c:	2310      	movs	r3, #16
 800022e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000230:	2302      	movs	r3, #2
 8000232:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000234:	2300      	movs	r3, #0
 8000236:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000238:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800023c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000242:	4618      	mov	r0, r3
 8000244:	f000 ff92 	bl	800116c <HAL_RCC_OscConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	bf14      	ite	ne
 800024e:	2301      	movne	r3, #1
 8000250:	2300      	moveq	r3, #0
 8000252:	b2db      	uxtb	r3, r3
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <_Z18SystemClock_Configv+0x6c>
  {
    Error_Handler();
 8000258:	f000 fa0e 	bl	8000678 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025c:	230f      	movs	r3, #15
 800025e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000260:	2302      	movs	r3, #2
 8000262:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800026c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000272:	f107 031c 	add.w	r3, r7, #28
 8000276:	2102      	movs	r1, #2
 8000278:	4618      	mov	r0, r3
 800027a:	f001 fe7f 	bl	8001f7c <HAL_RCC_ClockConfig>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	bf14      	ite	ne
 8000284:	2301      	movne	r3, #1
 8000286:	2300      	moveq	r3, #0
 8000288:	b2db      	uxtb	r3, r3
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800028e:	f000 f9f3 	bl	8000678 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000292:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000296:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000298:	2300      	movs	r3, #0
 800029a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	4618      	mov	r0, r3
 80002a0:	f002 f8a2 	bl	80023e8 <HAL_RCCEx_PeriphCLKConfig>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	bf14      	ite	ne
 80002aa:	2301      	movne	r3, #1
 80002ac:	2300      	moveq	r3, #0
 80002ae:	b2db      	uxtb	r3, r3
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <_Z18SystemClock_Configv+0xc8>
  {
    Error_Handler();
 80002b4:	f000 f9e0 	bl	8000678 <Error_Handler>
  }
}
 80002b8:	bf00      	nop
 80002ba:	3758      	adds	r7, #88	; 0x58
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}

080002c0 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b096      	sub	sp, #88	; 0x58
 80002c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
 80002de:	60da      	str	r2, [r3, #12]
 80002e0:	611a      	str	r2, [r3, #16]
 80002e2:	615a      	str	r2, [r3, #20]
 80002e4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	222c      	movs	r2, #44	; 0x2c
 80002ea:	2100      	movs	r1, #0
 80002ec:	4618      	mov	r0, r3
 80002ee:	f003 fec9 	bl	8004084 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002f2:	4b54      	ldr	r3, [pc, #336]	; (8000444 <_ZL12MX_TIM1_Initv+0x184>)
 80002f4:	4a54      	ldr	r2, [pc, #336]	; (8000448 <_ZL12MX_TIM1_Initv+0x188>)
 80002f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80002f8:	4b52      	ldr	r3, [pc, #328]	; (8000444 <_ZL12MX_TIM1_Initv+0x184>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002fe:	4b51      	ldr	r3, [pc, #324]	; (8000444 <_ZL12MX_TIM1_Initv+0x184>)
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 639;
 8000304:	4b4f      	ldr	r3, [pc, #316]	; (8000444 <_ZL12MX_TIM1_Initv+0x184>)
 8000306:	f240 227f 	movw	r2, #639	; 0x27f
 800030a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800030c:	4b4d      	ldr	r3, [pc, #308]	; (8000444 <_ZL12MX_TIM1_Initv+0x184>)
 800030e:	2200      	movs	r2, #0
 8000310:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000312:	4b4c      	ldr	r3, [pc, #304]	; (8000444 <_ZL12MX_TIM1_Initv+0x184>)
 8000314:	2200      	movs	r2, #0
 8000316:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000318:	4b4a      	ldr	r3, [pc, #296]	; (8000444 <_ZL12MX_TIM1_Initv+0x184>)
 800031a:	2280      	movs	r2, #128	; 0x80
 800031c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800031e:	4849      	ldr	r0, [pc, #292]	; (8000444 <_ZL12MX_TIM1_Initv+0x184>)
 8000320:	f002 fa3c 	bl	800279c <HAL_TIM_PWM_Init>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	bf14      	ite	ne
 800032a:	2301      	movne	r3, #1
 800032c:	2300      	moveq	r3, #0
 800032e:	b2db      	uxtb	r3, r3
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <_ZL12MX_TIM1_Initv+0x78>
  {
    Error_Handler();
 8000334:	f000 f9a0 	bl	8000678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000338:	2300      	movs	r3, #0
 800033a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800033c:	2300      	movs	r3, #0
 800033e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000340:	2300      	movs	r3, #0
 8000342:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000344:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000348:	4619      	mov	r1, r3
 800034a:	483e      	ldr	r0, [pc, #248]	; (8000444 <_ZL12MX_TIM1_Initv+0x184>)
 800034c:	f002 fffc 	bl	8003348 <HAL_TIMEx_MasterConfigSynchronization>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	bf14      	ite	ne
 8000356:	2301      	movne	r3, #1
 8000358:	2300      	moveq	r3, #0
 800035a:	b2db      	uxtb	r3, r3
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <_ZL12MX_TIM1_Initv+0xa4>
  {
    Error_Handler();
 8000360:	f000 f98a 	bl	8000678 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ASSYMETRIC_PWM1;
 8000364:	4b39      	ldr	r3, [pc, #228]	; (800044c <_ZL12MX_TIM1_Initv+0x18c>)
 8000366:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000368:	2300      	movs	r3, #0
 800036a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800036c:	2300      	movs	r3, #0
 800036e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000370:	2300      	movs	r3, #0
 8000372:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000374:	2300      	movs	r3, #0
 8000376:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000378:	2300      	movs	r3, #0
 800037a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800037c:	2300      	movs	r3, #0
 800037e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000380:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000384:	2204      	movs	r2, #4
 8000386:	4619      	mov	r1, r3
 8000388:	482e      	ldr	r0, [pc, #184]	; (8000444 <_ZL12MX_TIM1_Initv+0x184>)
 800038a:	f002 fb7d 	bl	8002a88 <HAL_TIM_PWM_ConfigChannel>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	bf14      	ite	ne
 8000394:	2301      	movne	r3, #1
 8000396:	2300      	moveq	r3, #0
 8000398:	b2db      	uxtb	r3, r3
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <_ZL12MX_TIM1_Initv+0xe2>
  {
    Error_Handler();
 800039e:	f000 f96b 	bl	8000678 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 80003a2:	4b28      	ldr	r3, [pc, #160]	; (8000444 <_ZL12MX_TIM1_Initv+0x184>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	699a      	ldr	r2, [r3, #24]
 80003a8:	4b26      	ldr	r3, [pc, #152]	; (8000444 <_ZL12MX_TIM1_Initv+0x184>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80003b0:	619a      	str	r2, [r3, #24]
  sConfigOC.OCMode = TIM_OCMODE_ASSYMETRIC_PWM2;
 80003b2:	4b27      	ldr	r3, [pc, #156]	; (8000450 <_ZL12MX_TIM1_Initv+0x190>)
 80003b4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80003b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003ba:	2208      	movs	r2, #8
 80003bc:	4619      	mov	r1, r3
 80003be:	4821      	ldr	r0, [pc, #132]	; (8000444 <_ZL12MX_TIM1_Initv+0x184>)
 80003c0:	f002 fb62 	bl	8002a88 <HAL_TIM_PWM_ConfigChannel>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	bf14      	ite	ne
 80003ca:	2301      	movne	r3, #1
 80003cc:	2300      	moveq	r3, #0
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <_ZL12MX_TIM1_Initv+0x118>
  {
    Error_Handler();
 80003d4:	f000 f950 	bl	8000678 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_3);
 80003d8:	4b1a      	ldr	r3, [pc, #104]	; (8000444 <_ZL12MX_TIM1_Initv+0x184>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	69da      	ldr	r2, [r3, #28]
 80003de:	4b19      	ldr	r3, [pc, #100]	; (8000444 <_ZL12MX_TIM1_Initv+0x184>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f022 0208 	bic.w	r2, r2, #8
 80003e6:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003e8:	2300      	movs	r3, #0
 80003ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80003ec:	2300      	movs	r3, #0
 80003ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80003f0:	2300      	movs	r3, #0
 80003f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 13;
 80003f4:	230d      	movs	r3, #13
 80003f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80003f8:	2300      	movs	r3, #0
 80003fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80003fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000400:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000402:	2300      	movs	r3, #0
 8000404:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000406:	2300      	movs	r3, #0
 8000408:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800040a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800040e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000410:	2300      	movs	r3, #0
 8000412:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000414:	2300      	movs	r3, #0
 8000416:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	4619      	mov	r1, r3
 800041c:	4809      	ldr	r0, [pc, #36]	; (8000444 <_ZL12MX_TIM1_Initv+0x184>)
 800041e:	f003 f801 	bl	8003424 <HAL_TIMEx_ConfigBreakDeadTime>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	bf14      	ite	ne
 8000428:	2301      	movne	r3, #1
 800042a:	2300      	moveq	r3, #0
 800042c:	b2db      	uxtb	r3, r3
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <_ZL12MX_TIM1_Initv+0x176>
  {
    Error_Handler();
 8000432:	f000 f921 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000436:	4803      	ldr	r0, [pc, #12]	; (8000444 <_ZL12MX_TIM1_Initv+0x184>)
 8000438:	f000 f98c 	bl	8000754 <HAL_TIM_MspPostInit>

}
 800043c:	bf00      	nop
 800043e:	3758      	adds	r7, #88	; 0x58
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	20000028 	.word	0x20000028
 8000448:	40012c00 	.word	0x40012c00
 800044c:	00010060 	.word	0x00010060
 8000450:	00010070 	.word	0x00010070

08000454 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b084      	sub	sp, #16
 8000458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800045a:	1d3b      	adds	r3, r7, #4
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]
 8000460:	605a      	str	r2, [r3, #4]
 8000462:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000464:	4b1a      	ldr	r3, [pc, #104]	; (80004d0 <_ZL12MX_TIM6_Initv+0x7c>)
 8000466:	4a1b      	ldr	r2, [pc, #108]	; (80004d4 <_ZL12MX_TIM6_Initv+0x80>)
 8000468:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000;
 800046a:	4b19      	ldr	r3, [pc, #100]	; (80004d0 <_ZL12MX_TIM6_Initv+0x7c>)
 800046c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000470:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000472:	4b17      	ldr	r3, [pc, #92]	; (80004d0 <_ZL12MX_TIM6_Initv+0x7c>)
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6400;
 8000478:	4b15      	ldr	r3, [pc, #84]	; (80004d0 <_ZL12MX_TIM6_Initv+0x7c>)
 800047a:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 800047e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000480:	4b13      	ldr	r3, [pc, #76]	; (80004d0 <_ZL12MX_TIM6_Initv+0x7c>)
 8000482:	2280      	movs	r2, #128	; 0x80
 8000484:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000486:	4812      	ldr	r0, [pc, #72]	; (80004d0 <_ZL12MX_TIM6_Initv+0x7c>)
 8000488:	f002 f8d4 	bl	8002634 <HAL_TIM_Base_Init>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	bf14      	ite	ne
 8000492:	2301      	movne	r3, #1
 8000494:	2300      	moveq	r3, #0
 8000496:	b2db      	uxtb	r3, r3
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <_ZL12MX_TIM6_Initv+0x4c>
  {
    Error_Handler();
 800049c:	f000 f8ec 	bl	8000678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004a0:	2300      	movs	r3, #0
 80004a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004a4:	2300      	movs	r3, #0
 80004a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	4619      	mov	r1, r3
 80004ac:	4808      	ldr	r0, [pc, #32]	; (80004d0 <_ZL12MX_TIM6_Initv+0x7c>)
 80004ae:	f002 ff4b 	bl	8003348 <HAL_TIMEx_MasterConfigSynchronization>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	bf14      	ite	ne
 80004b8:	2301      	movne	r3, #1
 80004ba:	2300      	moveq	r3, #0
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <_ZL12MX_TIM6_Initv+0x72>
  {
    Error_Handler();
 80004c2:	f000 f8d9 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80004c6:	bf00      	nop
 80004c8:	3710      	adds	r7, #16
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	20000074 	.word	0x20000074
 80004d4:	40001000 	.word	0x40001000

080004d8 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004dc:	4b16      	ldr	r3, [pc, #88]	; (8000538 <_ZL19MX_USART2_UART_Initv+0x60>)
 80004de:	4a17      	ldr	r2, [pc, #92]	; (800053c <_ZL19MX_USART2_UART_Initv+0x64>)
 80004e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004e2:	4b15      	ldr	r3, [pc, #84]	; (8000538 <_ZL19MX_USART2_UART_Initv+0x60>)
 80004e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004ea:	4b13      	ldr	r3, [pc, #76]	; (8000538 <_ZL19MX_USART2_UART_Initv+0x60>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004f0:	4b11      	ldr	r3, [pc, #68]	; (8000538 <_ZL19MX_USART2_UART_Initv+0x60>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004f6:	4b10      	ldr	r3, [pc, #64]	; (8000538 <_ZL19MX_USART2_UART_Initv+0x60>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004fc:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <_ZL19MX_USART2_UART_Initv+0x60>)
 80004fe:	220c      	movs	r2, #12
 8000500:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000502:	4b0d      	ldr	r3, [pc, #52]	; (8000538 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000504:	2200      	movs	r2, #0
 8000506:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000508:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <_ZL19MX_USART2_UART_Initv+0x60>)
 800050a:	2200      	movs	r2, #0
 800050c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800050e:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000510:	2200      	movs	r2, #0
 8000512:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000514:	4b08      	ldr	r3, [pc, #32]	; (8000538 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000516:	2200      	movs	r2, #0
 8000518:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800051a:	4807      	ldr	r0, [pc, #28]	; (8000538 <_ZL19MX_USART2_UART_Initv+0x60>)
 800051c:	f003 f818 	bl	8003550 <HAL_UART_Init>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	bf14      	ite	ne
 8000526:	2301      	movne	r3, #1
 8000528:	2300      	moveq	r3, #0
 800052a:	b2db      	uxtb	r3, r3
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8000530:	f000 f8a2 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000534:	bf00      	nop
 8000536:	bd80      	pop	{r7, pc}
 8000538:	200000c0 	.word	0x200000c0
 800053c:	40004400 	.word	0x40004400

08000540 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b088      	sub	sp, #32
 8000544:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000546:	f107 030c 	add.w	r3, r7, #12
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
 8000554:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	4b45      	ldr	r3, [pc, #276]	; (800066c <_ZL12MX_GPIO_Initv+0x12c>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	4a44      	ldr	r2, [pc, #272]	; (800066c <_ZL12MX_GPIO_Initv+0x12c>)
 800055c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000560:	6153      	str	r3, [r2, #20]
 8000562:	4b42      	ldr	r3, [pc, #264]	; (800066c <_ZL12MX_GPIO_Initv+0x12c>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	4b3f      	ldr	r3, [pc, #252]	; (800066c <_ZL12MX_GPIO_Initv+0x12c>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	4a3e      	ldr	r2, [pc, #248]	; (800066c <_ZL12MX_GPIO_Initv+0x12c>)
 8000574:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000578:	6153      	str	r3, [r2, #20]
 800057a:	4b3c      	ldr	r3, [pc, #240]	; (800066c <_ZL12MX_GPIO_Initv+0x12c>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD_0_Pin|LD_1_Pin, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800058c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000590:	f000 fd96 	bl	80010c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EN_A_Pin EN_B_Pin */
  GPIO_InitStruct.Pin = EN_A_Pin|EN_B_Pin;
 8000594:	230a      	movs	r3, #10
 8000596:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000598:	4b35      	ldr	r3, [pc, #212]	; (8000670 <_ZL12MX_GPIO_Initv+0x130>)
 800059a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	4619      	mov	r1, r3
 80005a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005aa:	f000 fc17 	bl	8000ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : MN_0_Pin */
  GPIO_InitStruct.Pin = MN_0_Pin;
 80005ae:	2310      	movs	r3, #16
 80005b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b2:	2300      	movs	r3, #0
 80005b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MN_0_GPIO_Port, &GPIO_InitStruct);
 80005ba:	f107 030c 	add.w	r3, r7, #12
 80005be:	4619      	mov	r1, r3
 80005c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c4:	f000 fc0a 	bl	8000ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : MN_1_Pin MN_2_Pin MN_3_Pin */
  GPIO_InitStruct.Pin = MN_1_Pin|MN_2_Pin|MN_3_Pin;
 80005c8:	23e0      	movs	r3, #224	; 0xe0
 80005ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005cc:	2300      	movs	r3, #0
 80005ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005d0:	2301      	movs	r3, #1
 80005d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	4619      	mov	r1, r3
 80005da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005de:	f000 fbfd 	bl	8000ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_0_Pin LD_1_Pin */
  GPIO_InitStruct.Pin = LD_0_Pin|LD_1_Pin;
 80005e2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80005e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e8:	2301      	movs	r3, #1
 80005ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	4619      	mov	r1, r3
 80005fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fe:	f000 fbed 	bl	8000ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000602:	2308      	movs	r3, #8
 8000604:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000606:	2302      	movs	r3, #2
 8000608:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060e:	2300      	movs	r3, #0
 8000610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000612:	2301      	movs	r3, #1
 8000614:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	4619      	mov	r1, r3
 800061c:	4815      	ldr	r0, [pc, #84]	; (8000674 <_ZL12MX_GPIO_Initv+0x134>)
 800061e:	f000 fbdd 	bl	8000ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000622:	2320      	movs	r3, #32
 8000624:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000626:	2302      	movs	r3, #2
 8000628:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062e:	2300      	movs	r3, #0
 8000630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000632:	2302      	movs	r3, #2
 8000634:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	4619      	mov	r1, r3
 800063c:	480d      	ldr	r0, [pc, #52]	; (8000674 <_ZL12MX_GPIO_Initv+0x134>)
 800063e:	f000 fbcd 	bl	8000ddc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	2100      	movs	r1, #0
 8000646:	2007      	movs	r0, #7
 8000648:	f000 fb1b 	bl	8000c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800064c:	2007      	movs	r0, #7
 800064e:	f000 fb34 	bl	8000cba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000652:	2200      	movs	r2, #0
 8000654:	2100      	movs	r1, #0
 8000656:	2009      	movs	r0, #9
 8000658:	f000 fb13 	bl	8000c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800065c:	2009      	movs	r0, #9
 800065e:	f000 fb2c 	bl	8000cba <HAL_NVIC_EnableIRQ>

}
 8000662:	bf00      	nop
 8000664:	3720      	adds	r7, #32
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40021000 	.word	0x40021000
 8000670:	10110000 	.word	0x10110000
 8000674:	48000400 	.word	0x48000400

08000678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800067c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800067e:	e7fe      	b.n	800067e <Error_Handler+0x6>

08000680 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000686:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <HAL_MspInit+0x44>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	4a0e      	ldr	r2, [pc, #56]	; (80006c4 <HAL_MspInit+0x44>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6193      	str	r3, [r2, #24]
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <HAL_MspInit+0x44>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <HAL_MspInit+0x44>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	4a08      	ldr	r2, [pc, #32]	; (80006c4 <HAL_MspInit+0x44>)
 80006a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a8:	61d3      	str	r3, [r2, #28]
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <HAL_MspInit+0x44>)
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	40021000 	.word	0x40021000

080006c8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a0a      	ldr	r2, [pc, #40]	; (8000700 <HAL_TIM_PWM_MspInit+0x38>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d10b      	bne.n	80006f2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80006da:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <HAL_TIM_PWM_MspInit+0x3c>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	4a09      	ldr	r2, [pc, #36]	; (8000704 <HAL_TIM_PWM_MspInit+0x3c>)
 80006e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006e4:	6193      	str	r3, [r2, #24]
 80006e6:	4b07      	ldr	r3, [pc, #28]	; (8000704 <HAL_TIM_PWM_MspInit+0x3c>)
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80006f2:	bf00      	nop
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	40012c00 	.word	0x40012c00
 8000704:	40021000 	.word	0x40021000

08000708 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a0d      	ldr	r2, [pc, #52]	; (800074c <HAL_TIM_Base_MspInit+0x44>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d113      	bne.n	8000742 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800071a:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <HAL_TIM_Base_MspInit+0x48>)
 800071c:	69db      	ldr	r3, [r3, #28]
 800071e:	4a0c      	ldr	r2, [pc, #48]	; (8000750 <HAL_TIM_Base_MspInit+0x48>)
 8000720:	f043 0310 	orr.w	r3, r3, #16
 8000724:	61d3      	str	r3, [r2, #28]
 8000726:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <HAL_TIM_Base_MspInit+0x48>)
 8000728:	69db      	ldr	r3, [r3, #28]
 800072a:	f003 0310 	and.w	r3, r3, #16
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	2100      	movs	r1, #0
 8000736:	2036      	movs	r0, #54	; 0x36
 8000738:	f000 faa3 	bl	8000c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 800073c:	2036      	movs	r0, #54	; 0x36
 800073e:	f000 fabc 	bl	8000cba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000742:	bf00      	nop
 8000744:	3710      	adds	r7, #16
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40001000 	.word	0x40001000
 8000750:	40021000 	.word	0x40021000

08000754 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	; 0x28
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a20      	ldr	r2, [pc, #128]	; (80007f4 <HAL_TIM_MspPostInit+0xa0>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d139      	bne.n	80007ea <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	4b20      	ldr	r3, [pc, #128]	; (80007f8 <HAL_TIM_MspPostInit+0xa4>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	4a1f      	ldr	r2, [pc, #124]	; (80007f8 <HAL_TIM_MspPostInit+0xa4>)
 800077c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000780:	6153      	str	r3, [r2, #20]
 8000782:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <HAL_TIM_MspPostInit+0xa4>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <HAL_TIM_MspPostInit+0xa4>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	4a19      	ldr	r2, [pc, #100]	; (80007f8 <HAL_TIM_MspPostInit+0xa4>)
 8000794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000798:	6153      	str	r3, [r2, #20]
 800079a:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <HAL_TIM_MspPostInit+0xa4>)
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007a6:	2303      	movs	r3, #3
 80007a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007aa:	2302      	movs	r3, #2
 80007ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80007b6:	2306      	movs	r3, #6
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	4619      	mov	r1, r3
 80007c0:	480e      	ldr	r0, [pc, #56]	; (80007fc <HAL_TIM_MspPostInit+0xa8>)
 80007c2:	f000 fb0b 	bl	8000ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80007ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007cc:	2302      	movs	r3, #2
 80007ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2300      	movs	r3, #0
 80007d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80007d8:	2306      	movs	r3, #6
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4619      	mov	r1, r3
 80007e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e6:	f000 faf9 	bl	8000ddc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40012c00 	.word	0x40012c00
 80007f8:	40021000 	.word	0x40021000
 80007fc:	48000400 	.word	0x48000400

08000800 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	; 0x28
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a1c      	ldr	r2, [pc, #112]	; (8000890 <HAL_UART_MspInit+0x90>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d131      	bne.n	8000886 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000822:	4b1c      	ldr	r3, [pc, #112]	; (8000894 <HAL_UART_MspInit+0x94>)
 8000824:	69db      	ldr	r3, [r3, #28]
 8000826:	4a1b      	ldr	r2, [pc, #108]	; (8000894 <HAL_UART_MspInit+0x94>)
 8000828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800082c:	61d3      	str	r3, [r2, #28]
 800082e:	4b19      	ldr	r3, [pc, #100]	; (8000894 <HAL_UART_MspInit+0x94>)
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b16      	ldr	r3, [pc, #88]	; (8000894 <HAL_UART_MspInit+0x94>)
 800083c:	695b      	ldr	r3, [r3, #20]
 800083e:	4a15      	ldr	r2, [pc, #84]	; (8000894 <HAL_UART_MspInit+0x94>)
 8000840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000844:	6153      	str	r3, [r2, #20]
 8000846:	4b13      	ldr	r3, [pc, #76]	; (8000894 <HAL_UART_MspInit+0x94>)
 8000848:	695b      	ldr	r3, [r3, #20]
 800084a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8000852:	f248 0304 	movw	r3, #32772	; 0x8004
 8000856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000858:	2302      	movs	r3, #2
 800085a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000860:	2303      	movs	r3, #3
 8000862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000864:	2307      	movs	r3, #7
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000872:	f000 fab3 	bl	8000ddc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	2100      	movs	r1, #0
 800087a:	2026      	movs	r0, #38	; 0x26
 800087c:	f000 fa01 	bl	8000c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000880:	2026      	movs	r0, #38	; 0x26
 8000882:	f000 fa1a 	bl	8000cba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000886:	bf00      	nop
 8000888:	3728      	adds	r7, #40	; 0x28
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40004400 	.word	0x40004400
 8000894:	40021000 	.word	0x40021000

08000898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800089c:	e7fe      	b.n	800089c <NMI_Handler+0x4>

0800089e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <HardFault_Handler+0x4>

080008a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <MemManage_Handler+0x4>

080008aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <BusFault_Handler+0x4>

080008b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <UsageFault_Handler+0x4>

080008b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e4:	f000 f8b0 	bl	8000a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}

080008ec <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
/*
  Function function;
  function.EN_1();
*/
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80008f0:	2002      	movs	r0, #2
 80008f2:	f000 fc17 	bl	8001124 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
/*  function.EN_1();*/
  HAL_GPIO_TogglePin(LD_0_GPIO_Port, LD_0_Pin);
 80008f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008fe:	f000 fbf7 	bl	80010f0 <HAL_GPIO_TogglePin>
  HAL_Delay(100);
 8000902:	2064      	movs	r0, #100	; 0x64
 8000904:	f000 f8c0 	bl	8000a88 <HAL_Delay>
  /* USER CODE END EXTI1_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}

0800090c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
/*
  Function function;
  function.EN_3();
*/
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000910:	2008      	movs	r0, #8
 8000912:	f000 fc07 	bl	8001124 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
//  function.EN_3();
  /* USER CODE END EXTI3_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000920:	4802      	ldr	r0, [pc, #8]	; (800092c <USART2_IRQHandler+0x10>)
 8000922:	f002 fe63 	bl	80035ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200000c0 	.word	0x200000c0

08000930 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000934:	4802      	ldr	r0, [pc, #8]	; (8000940 <TIM6_DAC1_IRQHandler+0x10>)
 8000936:	f001 ff88 	bl	800284a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */
//  pwm.LED();

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000074 	.word	0x20000074

08000944 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <SystemInit+0x20>)
 800094a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800094e:	4a05      	ldr	r2, [pc, #20]	; (8000964 <SystemInit+0x20>)
 8000950:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000954:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <Reset_Handler>:
 8000968:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009a0 <LoopForever+0x2>
 800096c:	480d      	ldr	r0, [pc, #52]	; (80009a4 <LoopForever+0x6>)
 800096e:	490e      	ldr	r1, [pc, #56]	; (80009a8 <LoopForever+0xa>)
 8000970:	4a0e      	ldr	r2, [pc, #56]	; (80009ac <LoopForever+0xe>)
 8000972:	2300      	movs	r3, #0
 8000974:	e002      	b.n	800097c <LoopCopyDataInit>

08000976 <CopyDataInit>:
 8000976:	58d4      	ldr	r4, [r2, r3]
 8000978:	50c4      	str	r4, [r0, r3]
 800097a:	3304      	adds	r3, #4

0800097c <LoopCopyDataInit>:
 800097c:	18c4      	adds	r4, r0, r3
 800097e:	428c      	cmp	r4, r1
 8000980:	d3f9      	bcc.n	8000976 <CopyDataInit>
 8000982:	4a0b      	ldr	r2, [pc, #44]	; (80009b0 <LoopForever+0x12>)
 8000984:	4c0b      	ldr	r4, [pc, #44]	; (80009b4 <LoopForever+0x16>)
 8000986:	2300      	movs	r3, #0
 8000988:	e001      	b.n	800098e <LoopFillZerobss>

0800098a <FillZerobss>:
 800098a:	6013      	str	r3, [r2, #0]
 800098c:	3204      	adds	r2, #4

0800098e <LoopFillZerobss>:
 800098e:	42a2      	cmp	r2, r4
 8000990:	d3fb      	bcc.n	800098a <FillZerobss>
 8000992:	f7ff ffd7 	bl	8000944 <SystemInit>
 8000996:	f003 fb51 	bl	800403c <__libc_init_array>
 800099a:	f7ff fc15 	bl	80001c8 <main>

0800099e <LoopForever>:
 800099e:	e7fe      	b.n	800099e <LoopForever>
 80009a0:	20003000 	.word	0x20003000
 80009a4:	20000000 	.word	0x20000000
 80009a8:	2000000c 	.word	0x2000000c
 80009ac:	080040ec 	.word	0x080040ec
 80009b0:	2000000c 	.word	0x2000000c
 80009b4:	20000148 	.word	0x20000148

080009b8 <ADC1_2_IRQHandler>:
 80009b8:	e7fe      	b.n	80009b8 <ADC1_2_IRQHandler>
	...

080009bc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <HAL_Init+0x28>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a07      	ldr	r2, [pc, #28]	; (80009e4 <HAL_Init+0x28>)
 80009c6:	f043 0310 	orr.w	r3, r3, #16
 80009ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009cc:	2003      	movs	r0, #3
 80009ce:	f000 f94d 	bl	8000c6c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009d2:	2000      	movs	r0, #0
 80009d4:	f000 f808 	bl	80009e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d8:	f7ff fe52 	bl	8000680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009dc:	2300      	movs	r3, #0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40022000 	.word	0x40022000

080009e8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <HAL_InitTick+0x54>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <HAL_InitTick+0x58>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	4619      	mov	r1, r3
 80009fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 f965 	bl	8000cd6 <HAL_SYSTICK_Config>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
 8000a14:	e00e      	b.n	8000a34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2b0f      	cmp	r3, #15
 8000a1a:	d80a      	bhi.n	8000a32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	6879      	ldr	r1, [r7, #4]
 8000a20:	f04f 30ff 	mov.w	r0, #4294967295
 8000a24:	f000 f92d 	bl	8000c82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a28:	4a06      	ldr	r2, [pc, #24]	; (8000a44 <HAL_InitTick+0x5c>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	e000      	b.n	8000a34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000000 	.word	0x20000000
 8000a40:	20000008 	.word	0x20000008
 8000a44:	20000004 	.word	0x20000004

08000a48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_IncTick+0x20>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_IncTick+0x24>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4413      	add	r3, r2
 8000a58:	4a04      	ldr	r2, [pc, #16]	; (8000a6c <HAL_IncTick+0x24>)
 8000a5a:	6013      	str	r3, [r2, #0]
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	20000008 	.word	0x20000008
 8000a6c:	20000144 	.word	0x20000144

08000a70 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a74:	4b03      	ldr	r3, [pc, #12]	; (8000a84 <HAL_GetTick+0x14>)
 8000a76:	681b      	ldr	r3, [r3, #0]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	20000144 	.word	0x20000144

08000a88 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a90:	f7ff ffee 	bl	8000a70 <HAL_GetTick>
 8000a94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa0:	d005      	beq.n	8000aae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <HAL_Delay+0x40>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	4413      	add	r3, r2
 8000aac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000aae:	bf00      	nop
 8000ab0:	f7ff ffde 	bl	8000a70 <HAL_GetTick>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d8f7      	bhi.n	8000ab0 <HAL_Delay+0x28>
  {
  }
}
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000008 	.word	0x20000008

08000acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f003 0307 	and.w	r3, r3, #7
 8000ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <__NVIC_SetPriorityGrouping+0x44>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ae8:	4013      	ands	r3, r2
 8000aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000afe:	4a04      	ldr	r2, [pc, #16]	; (8000b10 <__NVIC_SetPriorityGrouping+0x44>)
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	60d3      	str	r3, [r2, #12]
}
 8000b04:	bf00      	nop
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b18:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <__NVIC_GetPriorityGrouping+0x18>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	0a1b      	lsrs	r3, r3, #8
 8000b1e:	f003 0307 	and.w	r3, r3, #7
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	db0b      	blt.n	8000b5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	f003 021f 	and.w	r2, r3, #31
 8000b48:	4907      	ldr	r1, [pc, #28]	; (8000b68 <__NVIC_EnableIRQ+0x38>)
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	095b      	lsrs	r3, r3, #5
 8000b50:	2001      	movs	r0, #1
 8000b52:	fa00 f202 	lsl.w	r2, r0, r2
 8000b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000e100 	.word	0xe000e100

08000b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	6039      	str	r1, [r7, #0]
 8000b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	db0a      	blt.n	8000b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	490c      	ldr	r1, [pc, #48]	; (8000bb8 <__NVIC_SetPriority+0x4c>)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	0112      	lsls	r2, r2, #4
 8000b8c:	b2d2      	uxtb	r2, r2
 8000b8e:	440b      	add	r3, r1
 8000b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b94:	e00a      	b.n	8000bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4908      	ldr	r1, [pc, #32]	; (8000bbc <__NVIC_SetPriority+0x50>)
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	f003 030f 	and.w	r3, r3, #15
 8000ba2:	3b04      	subs	r3, #4
 8000ba4:	0112      	lsls	r2, r2, #4
 8000ba6:	b2d2      	uxtb	r2, r2
 8000ba8:	440b      	add	r3, r1
 8000baa:	761a      	strb	r2, [r3, #24]
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000e100 	.word	0xe000e100
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b089      	sub	sp, #36	; 0x24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	f1c3 0307 	rsb	r3, r3, #7
 8000bda:	2b04      	cmp	r3, #4
 8000bdc:	bf28      	it	cs
 8000bde:	2304      	movcs	r3, #4
 8000be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	3304      	adds	r3, #4
 8000be6:	2b06      	cmp	r3, #6
 8000be8:	d902      	bls.n	8000bf0 <NVIC_EncodePriority+0x30>
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3b03      	subs	r3, #3
 8000bee:	e000      	b.n	8000bf2 <NVIC_EncodePriority+0x32>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43da      	mvns	r2, r3
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	401a      	ands	r2, r3
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c08:	f04f 31ff 	mov.w	r1, #4294967295
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c12:	43d9      	mvns	r1, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c18:	4313      	orrs	r3, r2
         );
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3724      	adds	r7, #36	; 0x24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
	...

08000c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c38:	d301      	bcc.n	8000c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e00f      	b.n	8000c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <SysTick_Config+0x40>)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c46:	210f      	movs	r1, #15
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4c:	f7ff ff8e 	bl	8000b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <SysTick_Config+0x40>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c56:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <SysTick_Config+0x40>)
 8000c58:	2207      	movs	r2, #7
 8000c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	e000e010 	.word	0xe000e010

08000c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff ff29 	bl	8000acc <__NVIC_SetPriorityGrouping>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b086      	sub	sp, #24
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	4603      	mov	r3, r0
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
 8000c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c94:	f7ff ff3e 	bl	8000b14 <__NVIC_GetPriorityGrouping>
 8000c98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	68b9      	ldr	r1, [r7, #8]
 8000c9e:	6978      	ldr	r0, [r7, #20]
 8000ca0:	f7ff ff8e 	bl	8000bc0 <NVIC_EncodePriority>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000caa:	4611      	mov	r1, r2
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff5d 	bl	8000b6c <__NVIC_SetPriority>
}
 8000cb2:	bf00      	nop
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff31 	bl	8000b30 <__NVIC_EnableIRQ>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff ffa2 	bl	8000c28 <SysTick_Config>
 8000ce4:	4603      	mov	r3, r0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	b083      	sub	sp, #12
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d008      	beq.n	8000d12 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2204      	movs	r2, #4
 8000d04:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e020      	b.n	8000d54 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f022 020e 	bic.w	r2, r2, #14
 8000d20:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f022 0201 	bic.w	r2, r2, #1
 8000d30:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d40:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2201      	movs	r2, #1
 8000d46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000d52:	2300      	movs	r3, #0
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d005      	beq.n	8000d82 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2204      	movs	r2, #4
 8000d7a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	73fb      	strb	r3, [r7, #15]
 8000d80:	e027      	b.n	8000dd2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f022 020e 	bic.w	r2, r2, #14
 8000d90:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f022 0201 	bic.w	r2, r2, #1
 8000da0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000daa:	2101      	movs	r1, #1
 8000dac:	fa01 f202 	lsl.w	r2, r1, r2
 8000db0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2201      	movs	r2, #1
 8000db6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d003      	beq.n	8000dd2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	4798      	blx	r3
    } 
  }
  return status;
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b087      	sub	sp, #28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dea:	e14e      	b.n	800108a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	2101      	movs	r1, #1
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	fa01 f303 	lsl.w	r3, r1, r3
 8000df8:	4013      	ands	r3, r2
 8000dfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f000 8140 	beq.w	8001084 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d00b      	beq.n	8000e24 <HAL_GPIO_Init+0x48>
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d007      	beq.n	8000e24 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e18:	2b11      	cmp	r3, #17
 8000e1a:	d003      	beq.n	8000e24 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	2b12      	cmp	r3, #18
 8000e22:	d130      	bne.n	8000e86 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	2203      	movs	r2, #3
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	68da      	ldr	r2, [r3, #12]
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	091b      	lsrs	r3, r3, #4
 8000e70:	f003 0201 	and.w	r2, r3, #1
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	68db      	ldr	r3, [r3, #12]
 8000e8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	2203      	movs	r2, #3
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	689a      	ldr	r2, [r3, #8]
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d003      	beq.n	8000ec6 <HAL_GPIO_Init+0xea>
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	2b12      	cmp	r3, #18
 8000ec4:	d123      	bne.n	8000f0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	08da      	lsrs	r2, r3, #3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3208      	adds	r2, #8
 8000ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	220f      	movs	r2, #15
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	691a      	ldr	r2, [r3, #16]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	f003 0307 	and.w	r3, r3, #7
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	08da      	lsrs	r2, r3, #3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3208      	adds	r2, #8
 8000f08:	6939      	ldr	r1, [r7, #16]
 8000f0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	2203      	movs	r2, #3
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f003 0203 	and.w	r2, r3, #3
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	f000 809a 	beq.w	8001084 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f50:	4b55      	ldr	r3, [pc, #340]	; (80010a8 <HAL_GPIO_Init+0x2cc>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	4a54      	ldr	r2, [pc, #336]	; (80010a8 <HAL_GPIO_Init+0x2cc>)
 8000f56:	f043 0301 	orr.w	r3, r3, #1
 8000f5a:	6193      	str	r3, [r2, #24]
 8000f5c:	4b52      	ldr	r3, [pc, #328]	; (80010a8 <HAL_GPIO_Init+0x2cc>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f68:	4a50      	ldr	r2, [pc, #320]	; (80010ac <HAL_GPIO_Init+0x2d0>)
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	089b      	lsrs	r3, r3, #2
 8000f6e:	3302      	adds	r3, #2
 8000f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f003 0303 	and.w	r3, r3, #3
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	220f      	movs	r2, #15
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f92:	d013      	beq.n	8000fbc <HAL_GPIO_Init+0x1e0>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a46      	ldr	r2, [pc, #280]	; (80010b0 <HAL_GPIO_Init+0x2d4>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d00d      	beq.n	8000fb8 <HAL_GPIO_Init+0x1dc>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a45      	ldr	r2, [pc, #276]	; (80010b4 <HAL_GPIO_Init+0x2d8>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d007      	beq.n	8000fb4 <HAL_GPIO_Init+0x1d8>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a44      	ldr	r2, [pc, #272]	; (80010b8 <HAL_GPIO_Init+0x2dc>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d101      	bne.n	8000fb0 <HAL_GPIO_Init+0x1d4>
 8000fac:	2303      	movs	r3, #3
 8000fae:	e006      	b.n	8000fbe <HAL_GPIO_Init+0x1e2>
 8000fb0:	2305      	movs	r3, #5
 8000fb2:	e004      	b.n	8000fbe <HAL_GPIO_Init+0x1e2>
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	e002      	b.n	8000fbe <HAL_GPIO_Init+0x1e2>
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e000      	b.n	8000fbe <HAL_GPIO_Init+0x1e2>
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	697a      	ldr	r2, [r7, #20]
 8000fc0:	f002 0203 	and.w	r2, r2, #3
 8000fc4:	0092      	lsls	r2, r2, #2
 8000fc6:	4093      	lsls	r3, r2
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fce:	4937      	ldr	r1, [pc, #220]	; (80010ac <HAL_GPIO_Init+0x2d0>)
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	089b      	lsrs	r3, r3, #2
 8000fd4:	3302      	adds	r3, #2
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fdc:	4b37      	ldr	r3, [pc, #220]	; (80010bc <HAL_GPIO_Init+0x2e0>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001000:	4a2e      	ldr	r2, [pc, #184]	; (80010bc <HAL_GPIO_Init+0x2e0>)
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001006:	4b2d      	ldr	r3, [pc, #180]	; (80010bc <HAL_GPIO_Init+0x2e0>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	43db      	mvns	r3, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800102a:	4a24      	ldr	r2, [pc, #144]	; (80010bc <HAL_GPIO_Init+0x2e0>)
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001030:	4b22      	ldr	r3, [pc, #136]	; (80010bc <HAL_GPIO_Init+0x2e0>)
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	43db      	mvns	r3, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001054:	4a19      	ldr	r2, [pc, #100]	; (80010bc <HAL_GPIO_Init+0x2e0>)
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800105a:	4b18      	ldr	r3, [pc, #96]	; (80010bc <HAL_GPIO_Init+0x2e0>)
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	43db      	mvns	r3, r3
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800107e:	4a0f      	ldr	r2, [pc, #60]	; (80010bc <HAL_GPIO_Init+0x2e0>)
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	3301      	adds	r3, #1
 8001088:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	fa22 f303 	lsr.w	r3, r2, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	f47f aea9 	bne.w	8000dec <HAL_GPIO_Init+0x10>
  }
}
 800109a:	bf00      	nop
 800109c:	371c      	adds	r7, #28
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40021000 	.word	0x40021000
 80010ac:	40010000 	.word	0x40010000
 80010b0:	48000400 	.word	0x48000400
 80010b4:	48000800 	.word	0x48000800
 80010b8:	48000c00 	.word	0x48000c00
 80010bc:	40010400 	.word	0x40010400

080010c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	807b      	strh	r3, [r7, #2]
 80010cc:	4613      	mov	r3, r2
 80010ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010d0:	787b      	ldrb	r3, [r7, #1]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010d6:	887a      	ldrh	r2, [r7, #2]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010dc:	e002      	b.n	80010e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010de:	887a      	ldrh	r2, [r7, #2]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	695b      	ldr	r3, [r3, #20]
 8001100:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001102:	887a      	ldrh	r2, [r7, #2]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4013      	ands	r3, r2
 8001108:	041a      	lsls	r2, r3, #16
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	43d9      	mvns	r1, r3
 800110e:	887b      	ldrh	r3, [r7, #2]
 8001110:	400b      	ands	r3, r1
 8001112:	431a      	orrs	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	619a      	str	r2, [r3, #24]
}
 8001118:	bf00      	nop
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800112e:	4b08      	ldr	r3, [pc, #32]	; (8001150 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001130:	695a      	ldr	r2, [r3, #20]
 8001132:	88fb      	ldrh	r3, [r7, #6]
 8001134:	4013      	ands	r3, r2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d006      	beq.n	8001148 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800113a:	4a05      	ldr	r2, [pc, #20]	; (8001150 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800113c:	88fb      	ldrh	r3, [r7, #6]
 800113e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001140:	88fb      	ldrh	r3, [r7, #6]
 8001142:	4618      	mov	r0, r3
 8001144:	f000 f806 	bl	8001154 <HAL_GPIO_EXTI_Callback>
  }
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40010400 	.word	0x40010400

08001154 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001172:	af00      	add	r7, sp, #0
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d102      	bne.n	8001186 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	f000 bef4 	b.w	8001f6e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	2b00      	cmp	r3, #0
 8001192:	f000 816a 	beq.w	800146a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001196:	4bb3      	ldr	r3, [pc, #716]	; (8001464 <HAL_RCC_OscConfig+0x2f8>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f003 030c 	and.w	r3, r3, #12
 800119e:	2b04      	cmp	r3, #4
 80011a0:	d00c      	beq.n	80011bc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011a2:	4bb0      	ldr	r3, [pc, #704]	; (8001464 <HAL_RCC_OscConfig+0x2f8>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 030c 	and.w	r3, r3, #12
 80011aa:	2b08      	cmp	r3, #8
 80011ac:	d159      	bne.n	8001262 <HAL_RCC_OscConfig+0xf6>
 80011ae:	4bad      	ldr	r3, [pc, #692]	; (8001464 <HAL_RCC_OscConfig+0x2f8>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011ba:	d152      	bne.n	8001262 <HAL_RCC_OscConfig+0xf6>
 80011bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011c0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80011c8:	fa93 f3a3 	rbit	r3, r3
 80011cc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80011d0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d4:	fab3 f383 	clz	r3, r3
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	095b      	lsrs	r3, r3, #5
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d102      	bne.n	80011ee <HAL_RCC_OscConfig+0x82>
 80011e8:	4b9e      	ldr	r3, [pc, #632]	; (8001464 <HAL_RCC_OscConfig+0x2f8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	e015      	b.n	800121a <HAL_RCC_OscConfig+0xae>
 80011ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011f2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80011fa:	fa93 f3a3 	rbit	r3, r3
 80011fe:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001202:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001206:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800120a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800120e:	fa93 f3a3 	rbit	r3, r3
 8001212:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001216:	4b93      	ldr	r3, [pc, #588]	; (8001464 <HAL_RCC_OscConfig+0x2f8>)
 8001218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800121e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001222:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001226:	fa92 f2a2 	rbit	r2, r2
 800122a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800122e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001232:	fab2 f282 	clz	r2, r2
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	f042 0220 	orr.w	r2, r2, #32
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	f002 021f 	and.w	r2, r2, #31
 8001242:	2101      	movs	r1, #1
 8001244:	fa01 f202 	lsl.w	r2, r1, r2
 8001248:	4013      	ands	r3, r2
 800124a:	2b00      	cmp	r3, #0
 800124c:	f000 810c 	beq.w	8001468 <HAL_RCC_OscConfig+0x2fc>
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	f040 8106 	bne.w	8001468 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	f000 be86 	b.w	8001f6e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800126c:	d106      	bne.n	800127c <HAL_RCC_OscConfig+0x110>
 800126e:	4b7d      	ldr	r3, [pc, #500]	; (8001464 <HAL_RCC_OscConfig+0x2f8>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a7c      	ldr	r2, [pc, #496]	; (8001464 <HAL_RCC_OscConfig+0x2f8>)
 8001274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	e030      	b.n	80012de <HAL_RCC_OscConfig+0x172>
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d10c      	bne.n	80012a0 <HAL_RCC_OscConfig+0x134>
 8001286:	4b77      	ldr	r3, [pc, #476]	; (8001464 <HAL_RCC_OscConfig+0x2f8>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a76      	ldr	r2, [pc, #472]	; (8001464 <HAL_RCC_OscConfig+0x2f8>)
 800128c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	4b74      	ldr	r3, [pc, #464]	; (8001464 <HAL_RCC_OscConfig+0x2f8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a73      	ldr	r2, [pc, #460]	; (8001464 <HAL_RCC_OscConfig+0x2f8>)
 8001298:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	e01e      	b.n	80012de <HAL_RCC_OscConfig+0x172>
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012aa:	d10c      	bne.n	80012c6 <HAL_RCC_OscConfig+0x15a>
 80012ac:	4b6d      	ldr	r3, [pc, #436]	; (8001464 <HAL_RCC_OscConfig+0x2f8>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a6c      	ldr	r2, [pc, #432]	; (8001464 <HAL_RCC_OscConfig+0x2f8>)
 80012b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	4b6a      	ldr	r3, [pc, #424]	; (8001464 <HAL_RCC_OscConfig+0x2f8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a69      	ldr	r2, [pc, #420]	; (8001464 <HAL_RCC_OscConfig+0x2f8>)
 80012be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	e00b      	b.n	80012de <HAL_RCC_OscConfig+0x172>
 80012c6:	4b67      	ldr	r3, [pc, #412]	; (8001464 <HAL_RCC_OscConfig+0x2f8>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a66      	ldr	r2, [pc, #408]	; (8001464 <HAL_RCC_OscConfig+0x2f8>)
 80012cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	4b64      	ldr	r3, [pc, #400]	; (8001464 <HAL_RCC_OscConfig+0x2f8>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a63      	ldr	r2, [pc, #396]	; (8001464 <HAL_RCC_OscConfig+0x2f8>)
 80012d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012dc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012de:	4b61      	ldr	r3, [pc, #388]	; (8001464 <HAL_RCC_OscConfig+0x2f8>)
 80012e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e2:	f023 020f 	bic.w	r2, r3, #15
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	495d      	ldr	r1, [pc, #372]	; (8001464 <HAL_RCC_OscConfig+0x2f8>)
 80012ee:	4313      	orrs	r3, r2
 80012f0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d059      	beq.n	80013b0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fc:	f7ff fbb8 	bl	8000a70 <HAL_GetTick>
 8001300:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001304:	e00a      	b.n	800131c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001306:	f7ff fbb3 	bl	8000a70 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b64      	cmp	r3, #100	; 0x64
 8001314:	d902      	bls.n	800131c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	f000 be29 	b.w	8001f6e <HAL_RCC_OscConfig+0xe02>
 800131c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001320:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001324:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001328:	fa93 f3a3 	rbit	r3, r3
 800132c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001330:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001334:	fab3 f383 	clz	r3, r3
 8001338:	b2db      	uxtb	r3, r3
 800133a:	095b      	lsrs	r3, r3, #5
 800133c:	b2db      	uxtb	r3, r3
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b01      	cmp	r3, #1
 8001346:	d102      	bne.n	800134e <HAL_RCC_OscConfig+0x1e2>
 8001348:	4b46      	ldr	r3, [pc, #280]	; (8001464 <HAL_RCC_OscConfig+0x2f8>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	e015      	b.n	800137a <HAL_RCC_OscConfig+0x20e>
 800134e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001352:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001356:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800135a:	fa93 f3a3 	rbit	r3, r3
 800135e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001362:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001366:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800136a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800136e:	fa93 f3a3 	rbit	r3, r3
 8001372:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001376:	4b3b      	ldr	r3, [pc, #236]	; (8001464 <HAL_RCC_OscConfig+0x2f8>)
 8001378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800137e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001382:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001386:	fa92 f2a2 	rbit	r2, r2
 800138a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800138e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001392:	fab2 f282 	clz	r2, r2
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	f042 0220 	orr.w	r2, r2, #32
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	f002 021f 	and.w	r2, r2, #31
 80013a2:	2101      	movs	r1, #1
 80013a4:	fa01 f202 	lsl.w	r2, r1, r2
 80013a8:	4013      	ands	r3, r2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0ab      	beq.n	8001306 <HAL_RCC_OscConfig+0x19a>
 80013ae:	e05c      	b.n	800146a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b0:	f7ff fb5e 	bl	8000a70 <HAL_GetTick>
 80013b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b8:	e00a      	b.n	80013d0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ba:	f7ff fb59 	bl	8000a70 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b64      	cmp	r3, #100	; 0x64
 80013c8:	d902      	bls.n	80013d0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	f000 bdcf 	b.w	8001f6e <HAL_RCC_OscConfig+0xe02>
 80013d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013d4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80013dc:	fa93 f3a3 	rbit	r3, r3
 80013e0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80013e4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013e8:	fab3 f383 	clz	r3, r3
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	095b      	lsrs	r3, r3, #5
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d102      	bne.n	8001402 <HAL_RCC_OscConfig+0x296>
 80013fc:	4b19      	ldr	r3, [pc, #100]	; (8001464 <HAL_RCC_OscConfig+0x2f8>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	e015      	b.n	800142e <HAL_RCC_OscConfig+0x2c2>
 8001402:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001406:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800140e:	fa93 f3a3 	rbit	r3, r3
 8001412:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001416:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800141a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800141e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001422:	fa93 f3a3 	rbit	r3, r3
 8001426:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <HAL_RCC_OscConfig+0x2f8>)
 800142c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001432:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001436:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800143a:	fa92 f2a2 	rbit	r2, r2
 800143e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001442:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001446:	fab2 f282 	clz	r2, r2
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	f042 0220 	orr.w	r2, r2, #32
 8001450:	b2d2      	uxtb	r2, r2
 8001452:	f002 021f 	and.w	r2, r2, #31
 8001456:	2101      	movs	r1, #1
 8001458:	fa01 f202 	lsl.w	r2, r1, r2
 800145c:	4013      	ands	r3, r2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1ab      	bne.n	80013ba <HAL_RCC_OscConfig+0x24e>
 8001462:	e002      	b.n	800146a <HAL_RCC_OscConfig+0x2fe>
 8001464:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	f000 816f 	beq.w	8001758 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800147a:	4bd0      	ldr	r3, [pc, #832]	; (80017bc <HAL_RCC_OscConfig+0x650>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f003 030c 	and.w	r3, r3, #12
 8001482:	2b00      	cmp	r3, #0
 8001484:	d00b      	beq.n	800149e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001486:	4bcd      	ldr	r3, [pc, #820]	; (80017bc <HAL_RCC_OscConfig+0x650>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f003 030c 	and.w	r3, r3, #12
 800148e:	2b08      	cmp	r3, #8
 8001490:	d16c      	bne.n	800156c <HAL_RCC_OscConfig+0x400>
 8001492:	4bca      	ldr	r3, [pc, #808]	; (80017bc <HAL_RCC_OscConfig+0x650>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d166      	bne.n	800156c <HAL_RCC_OscConfig+0x400>
 800149e:	2302      	movs	r3, #2
 80014a0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80014a8:	fa93 f3a3 	rbit	r3, r3
 80014ac:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80014b0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014b4:	fab3 f383 	clz	r3, r3
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	095b      	lsrs	r3, r3, #5
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d102      	bne.n	80014ce <HAL_RCC_OscConfig+0x362>
 80014c8:	4bbc      	ldr	r3, [pc, #752]	; (80017bc <HAL_RCC_OscConfig+0x650>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	e013      	b.n	80014f6 <HAL_RCC_OscConfig+0x38a>
 80014ce:	2302      	movs	r3, #2
 80014d0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80014d8:	fa93 f3a3 	rbit	r3, r3
 80014dc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80014e0:	2302      	movs	r3, #2
 80014e2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80014e6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80014ea:	fa93 f3a3 	rbit	r3, r3
 80014ee:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80014f2:	4bb2      	ldr	r3, [pc, #712]	; (80017bc <HAL_RCC_OscConfig+0x650>)
 80014f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f6:	2202      	movs	r2, #2
 80014f8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80014fc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001500:	fa92 f2a2 	rbit	r2, r2
 8001504:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001508:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800150c:	fab2 f282 	clz	r2, r2
 8001510:	b2d2      	uxtb	r2, r2
 8001512:	f042 0220 	orr.w	r2, r2, #32
 8001516:	b2d2      	uxtb	r2, r2
 8001518:	f002 021f 	and.w	r2, r2, #31
 800151c:	2101      	movs	r1, #1
 800151e:	fa01 f202 	lsl.w	r2, r1, r2
 8001522:	4013      	ands	r3, r2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d007      	beq.n	8001538 <HAL_RCC_OscConfig+0x3cc>
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d002      	beq.n	8001538 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	f000 bd1b 	b.w	8001f6e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001538:	4ba0      	ldr	r3, [pc, #640]	; (80017bc <HAL_RCC_OscConfig+0x650>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	21f8      	movs	r1, #248	; 0xf8
 8001548:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001550:	fa91 f1a1 	rbit	r1, r1
 8001554:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001558:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800155c:	fab1 f181 	clz	r1, r1
 8001560:	b2c9      	uxtb	r1, r1
 8001562:	408b      	lsls	r3, r1
 8001564:	4995      	ldr	r1, [pc, #596]	; (80017bc <HAL_RCC_OscConfig+0x650>)
 8001566:	4313      	orrs	r3, r2
 8001568:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156a:	e0f5      	b.n	8001758 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	2b00      	cmp	r3, #0
 8001574:	f000 8085 	beq.w	8001682 <HAL_RCC_OscConfig+0x516>
 8001578:	2301      	movs	r3, #1
 800157a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001582:	fa93 f3a3 	rbit	r3, r3
 8001586:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800158a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800158e:	fab3 f383 	clz	r3, r3
 8001592:	b2db      	uxtb	r3, r3
 8001594:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001598:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	461a      	mov	r2, r3
 80015a0:	2301      	movs	r3, #1
 80015a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a4:	f7ff fa64 	bl	8000a70 <HAL_GetTick>
 80015a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ac:	e00a      	b.n	80015c4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ae:	f7ff fa5f 	bl	8000a70 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d902      	bls.n	80015c4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	f000 bcd5 	b.w	8001f6e <HAL_RCC_OscConfig+0xe02>
 80015c4:	2302      	movs	r3, #2
 80015c6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ca:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80015ce:	fa93 f3a3 	rbit	r3, r3
 80015d2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80015d6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015da:	fab3 f383 	clz	r3, r3
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	095b      	lsrs	r3, r3, #5
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d102      	bne.n	80015f4 <HAL_RCC_OscConfig+0x488>
 80015ee:	4b73      	ldr	r3, [pc, #460]	; (80017bc <HAL_RCC_OscConfig+0x650>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	e013      	b.n	800161c <HAL_RCC_OscConfig+0x4b0>
 80015f4:	2302      	movs	r3, #2
 80015f6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80015fe:	fa93 f3a3 	rbit	r3, r3
 8001602:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001606:	2302      	movs	r3, #2
 8001608:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800160c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001610:	fa93 f3a3 	rbit	r3, r3
 8001614:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001618:	4b68      	ldr	r3, [pc, #416]	; (80017bc <HAL_RCC_OscConfig+0x650>)
 800161a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161c:	2202      	movs	r2, #2
 800161e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001622:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001626:	fa92 f2a2 	rbit	r2, r2
 800162a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800162e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001632:	fab2 f282 	clz	r2, r2
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	f042 0220 	orr.w	r2, r2, #32
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	f002 021f 	and.w	r2, r2, #31
 8001642:	2101      	movs	r1, #1
 8001644:	fa01 f202 	lsl.w	r2, r1, r2
 8001648:	4013      	ands	r3, r2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0af      	beq.n	80015ae <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800164e:	4b5b      	ldr	r3, [pc, #364]	; (80017bc <HAL_RCC_OscConfig+0x650>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	21f8      	movs	r1, #248	; 0xf8
 800165e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001662:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001666:	fa91 f1a1 	rbit	r1, r1
 800166a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800166e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001672:	fab1 f181 	clz	r1, r1
 8001676:	b2c9      	uxtb	r1, r1
 8001678:	408b      	lsls	r3, r1
 800167a:	4950      	ldr	r1, [pc, #320]	; (80017bc <HAL_RCC_OscConfig+0x650>)
 800167c:	4313      	orrs	r3, r2
 800167e:	600b      	str	r3, [r1, #0]
 8001680:	e06a      	b.n	8001758 <HAL_RCC_OscConfig+0x5ec>
 8001682:	2301      	movs	r3, #1
 8001684:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001688:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800168c:	fa93 f3a3 	rbit	r3, r3
 8001690:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001694:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001698:	fab3 f383 	clz	r3, r3
 800169c:	b2db      	uxtb	r3, r3
 800169e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	461a      	mov	r2, r3
 80016aa:	2300      	movs	r3, #0
 80016ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ae:	f7ff f9df 	bl	8000a70 <HAL_GetTick>
 80016b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016b6:	e00a      	b.n	80016ce <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016b8:	f7ff f9da 	bl	8000a70 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d902      	bls.n	80016ce <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	f000 bc50 	b.w	8001f6e <HAL_RCC_OscConfig+0xe02>
 80016ce:	2302      	movs	r3, #2
 80016d0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80016d8:	fa93 f3a3 	rbit	r3, r3
 80016dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80016e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e4:	fab3 f383 	clz	r3, r3
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	095b      	lsrs	r3, r3, #5
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d102      	bne.n	80016fe <HAL_RCC_OscConfig+0x592>
 80016f8:	4b30      	ldr	r3, [pc, #192]	; (80017bc <HAL_RCC_OscConfig+0x650>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	e013      	b.n	8001726 <HAL_RCC_OscConfig+0x5ba>
 80016fe:	2302      	movs	r3, #2
 8001700:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001704:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001708:	fa93 f3a3 	rbit	r3, r3
 800170c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001710:	2302      	movs	r3, #2
 8001712:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001716:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800171a:	fa93 f3a3 	rbit	r3, r3
 800171e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001722:	4b26      	ldr	r3, [pc, #152]	; (80017bc <HAL_RCC_OscConfig+0x650>)
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	2202      	movs	r2, #2
 8001728:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800172c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001730:	fa92 f2a2 	rbit	r2, r2
 8001734:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001738:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800173c:	fab2 f282 	clz	r2, r2
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	f042 0220 	orr.w	r2, r2, #32
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	f002 021f 	and.w	r2, r2, #31
 800174c:	2101      	movs	r1, #1
 800174e:	fa01 f202 	lsl.w	r2, r1, r2
 8001752:	4013      	ands	r3, r2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1af      	bne.n	80016b8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0308 	and.w	r3, r3, #8
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 80da 	beq.w	800191c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d069      	beq.n	8001846 <HAL_RCC_OscConfig+0x6da>
 8001772:	2301      	movs	r3, #1
 8001774:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001778:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800177c:	fa93 f3a3 	rbit	r3, r3
 8001780:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001784:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001788:	fab3 f383 	clz	r3, r3
 800178c:	b2db      	uxtb	r3, r3
 800178e:	461a      	mov	r2, r3
 8001790:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <HAL_RCC_OscConfig+0x654>)
 8001792:	4413      	add	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	461a      	mov	r2, r3
 8001798:	2301      	movs	r3, #1
 800179a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179c:	f7ff f968 	bl	8000a70 <HAL_GetTick>
 80017a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a4:	e00e      	b.n	80017c4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017a6:	f7ff f963 	bl	8000a70 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d906      	bls.n	80017c4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e3d9      	b.n	8001f6e <HAL_RCC_OscConfig+0xe02>
 80017ba:	bf00      	nop
 80017bc:	40021000 	.word	0x40021000
 80017c0:	10908120 	.word	0x10908120
 80017c4:	2302      	movs	r3, #2
 80017c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80017ce:	fa93 f3a3 	rbit	r3, r3
 80017d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80017d6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80017da:	2202      	movs	r2, #2
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	fa93 f2a3 	rbit	r2, r3
 80017e8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80017f2:	2202      	movs	r2, #2
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	fa93 f2a3 	rbit	r2, r3
 8001800:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001804:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001806:	4ba5      	ldr	r3, [pc, #660]	; (8001a9c <HAL_RCC_OscConfig+0x930>)
 8001808:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800180a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800180e:	2102      	movs	r1, #2
 8001810:	6019      	str	r1, [r3, #0]
 8001812:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	fa93 f1a3 	rbit	r1, r3
 800181c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001820:	6019      	str	r1, [r3, #0]
  return result;
 8001822:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	fab3 f383 	clz	r3, r3
 800182c:	b2db      	uxtb	r3, r3
 800182e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001832:	b2db      	uxtb	r3, r3
 8001834:	f003 031f 	and.w	r3, r3, #31
 8001838:	2101      	movs	r1, #1
 800183a:	fa01 f303 	lsl.w	r3, r1, r3
 800183e:	4013      	ands	r3, r2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0b0      	beq.n	80017a6 <HAL_RCC_OscConfig+0x63a>
 8001844:	e06a      	b.n	800191c <HAL_RCC_OscConfig+0x7b0>
 8001846:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800184a:	2201      	movs	r2, #1
 800184c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	fa93 f2a3 	rbit	r2, r3
 8001858:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800185c:	601a      	str	r2, [r3, #0]
  return result;
 800185e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001862:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001864:	fab3 f383 	clz	r3, r3
 8001868:	b2db      	uxtb	r3, r3
 800186a:	461a      	mov	r2, r3
 800186c:	4b8c      	ldr	r3, [pc, #560]	; (8001aa0 <HAL_RCC_OscConfig+0x934>)
 800186e:	4413      	add	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	461a      	mov	r2, r3
 8001874:	2300      	movs	r3, #0
 8001876:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001878:	f7ff f8fa 	bl	8000a70 <HAL_GetTick>
 800187c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001880:	e009      	b.n	8001896 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001882:	f7ff f8f5 	bl	8000a70 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e36b      	b.n	8001f6e <HAL_RCC_OscConfig+0xe02>
 8001896:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800189a:	2202      	movs	r2, #2
 800189c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	fa93 f2a3 	rbit	r2, r3
 80018a8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80018b2:	2202      	movs	r2, #2
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	fa93 f2a3 	rbit	r2, r3
 80018c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80018ca:	2202      	movs	r2, #2
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	fa93 f2a3 	rbit	r2, r3
 80018d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018dc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018de:	4b6f      	ldr	r3, [pc, #444]	; (8001a9c <HAL_RCC_OscConfig+0x930>)
 80018e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018e2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80018e6:	2102      	movs	r1, #2
 80018e8:	6019      	str	r1, [r3, #0]
 80018ea:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	fa93 f1a3 	rbit	r1, r3
 80018f4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80018f8:	6019      	str	r1, [r3, #0]
  return result;
 80018fa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	fab3 f383 	clz	r3, r3
 8001904:	b2db      	uxtb	r3, r3
 8001906:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800190a:	b2db      	uxtb	r3, r3
 800190c:	f003 031f 	and.w	r3, r3, #31
 8001910:	2101      	movs	r1, #1
 8001912:	fa01 f303 	lsl.w	r3, r1, r3
 8001916:	4013      	ands	r3, r2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1b2      	bne.n	8001882 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0304 	and.w	r3, r3, #4
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 8158 	beq.w	8001bdc <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800192c:	2300      	movs	r3, #0
 800192e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001932:	4b5a      	ldr	r3, [pc, #360]	; (8001a9c <HAL_RCC_OscConfig+0x930>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d112      	bne.n	8001964 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800193e:	4b57      	ldr	r3, [pc, #348]	; (8001a9c <HAL_RCC_OscConfig+0x930>)
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	4a56      	ldr	r2, [pc, #344]	; (8001a9c <HAL_RCC_OscConfig+0x930>)
 8001944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001948:	61d3      	str	r3, [r2, #28]
 800194a:	4b54      	ldr	r3, [pc, #336]	; (8001a9c <HAL_RCC_OscConfig+0x930>)
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001952:	f107 0308 	add.w	r3, r7, #8
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	f107 0308 	add.w	r3, r7, #8
 800195c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800195e:	2301      	movs	r3, #1
 8001960:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001964:	4b4f      	ldr	r3, [pc, #316]	; (8001aa4 <HAL_RCC_OscConfig+0x938>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196c:	2b00      	cmp	r3, #0
 800196e:	d11a      	bne.n	80019a6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001970:	4b4c      	ldr	r3, [pc, #304]	; (8001aa4 <HAL_RCC_OscConfig+0x938>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a4b      	ldr	r2, [pc, #300]	; (8001aa4 <HAL_RCC_OscConfig+0x938>)
 8001976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800197a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800197c:	f7ff f878 	bl	8000a70 <HAL_GetTick>
 8001980:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001984:	e009      	b.n	800199a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001986:	f7ff f873 	bl	8000a70 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b64      	cmp	r3, #100	; 0x64
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e2e9      	b.n	8001f6e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800199a:	4b42      	ldr	r3, [pc, #264]	; (8001aa4 <HAL_RCC_OscConfig+0x938>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0ef      	beq.n	8001986 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d106      	bne.n	80019be <HAL_RCC_OscConfig+0x852>
 80019b0:	4b3a      	ldr	r3, [pc, #232]	; (8001a9c <HAL_RCC_OscConfig+0x930>)
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	4a39      	ldr	r2, [pc, #228]	; (8001a9c <HAL_RCC_OscConfig+0x930>)
 80019b6:	f043 0301 	orr.w	r3, r3, #1
 80019ba:	6213      	str	r3, [r2, #32]
 80019bc:	e02f      	b.n	8001a1e <HAL_RCC_OscConfig+0x8b2>
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d10c      	bne.n	80019e2 <HAL_RCC_OscConfig+0x876>
 80019c8:	4b34      	ldr	r3, [pc, #208]	; (8001a9c <HAL_RCC_OscConfig+0x930>)
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	4a33      	ldr	r2, [pc, #204]	; (8001a9c <HAL_RCC_OscConfig+0x930>)
 80019ce:	f023 0301 	bic.w	r3, r3, #1
 80019d2:	6213      	str	r3, [r2, #32]
 80019d4:	4b31      	ldr	r3, [pc, #196]	; (8001a9c <HAL_RCC_OscConfig+0x930>)
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	4a30      	ldr	r2, [pc, #192]	; (8001a9c <HAL_RCC_OscConfig+0x930>)
 80019da:	f023 0304 	bic.w	r3, r3, #4
 80019de:	6213      	str	r3, [r2, #32]
 80019e0:	e01d      	b.n	8001a1e <HAL_RCC_OscConfig+0x8b2>
 80019e2:	1d3b      	adds	r3, r7, #4
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	2b05      	cmp	r3, #5
 80019ea:	d10c      	bne.n	8001a06 <HAL_RCC_OscConfig+0x89a>
 80019ec:	4b2b      	ldr	r3, [pc, #172]	; (8001a9c <HAL_RCC_OscConfig+0x930>)
 80019ee:	6a1b      	ldr	r3, [r3, #32]
 80019f0:	4a2a      	ldr	r2, [pc, #168]	; (8001a9c <HAL_RCC_OscConfig+0x930>)
 80019f2:	f043 0304 	orr.w	r3, r3, #4
 80019f6:	6213      	str	r3, [r2, #32]
 80019f8:	4b28      	ldr	r3, [pc, #160]	; (8001a9c <HAL_RCC_OscConfig+0x930>)
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	4a27      	ldr	r2, [pc, #156]	; (8001a9c <HAL_RCC_OscConfig+0x930>)
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	6213      	str	r3, [r2, #32]
 8001a04:	e00b      	b.n	8001a1e <HAL_RCC_OscConfig+0x8b2>
 8001a06:	4b25      	ldr	r3, [pc, #148]	; (8001a9c <HAL_RCC_OscConfig+0x930>)
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	4a24      	ldr	r2, [pc, #144]	; (8001a9c <HAL_RCC_OscConfig+0x930>)
 8001a0c:	f023 0301 	bic.w	r3, r3, #1
 8001a10:	6213      	str	r3, [r2, #32]
 8001a12:	4b22      	ldr	r3, [pc, #136]	; (8001a9c <HAL_RCC_OscConfig+0x930>)
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	4a21      	ldr	r2, [pc, #132]	; (8001a9c <HAL_RCC_OscConfig+0x930>)
 8001a18:	f023 0304 	bic.w	r3, r3, #4
 8001a1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d06b      	beq.n	8001b00 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a28:	f7ff f822 	bl	8000a70 <HAL_GetTick>
 8001a2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a30:	e00b      	b.n	8001a4a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a32:	f7ff f81d 	bl	8000a70 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e291      	b.n	8001f6e <HAL_RCC_OscConfig+0xe02>
 8001a4a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001a4e:	2202      	movs	r2, #2
 8001a50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a52:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	fa93 f2a3 	rbit	r2, r3
 8001a5c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001a66:	2202      	movs	r2, #2
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	fa93 f2a3 	rbit	r2, r3
 8001a74:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a78:	601a      	str	r2, [r3, #0]
  return result;
 8001a7a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a7e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a80:	fab3 f383 	clz	r3, r3
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	095b      	lsrs	r3, r3, #5
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	f043 0302 	orr.w	r3, r3, #2
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d109      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x93c>
 8001a94:	4b01      	ldr	r3, [pc, #4]	; (8001a9c <HAL_RCC_OscConfig+0x930>)
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	e014      	b.n	8001ac4 <HAL_RCC_OscConfig+0x958>
 8001a9a:	bf00      	nop
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	10908120 	.word	0x10908120
 8001aa4:	40007000 	.word	0x40007000
 8001aa8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001aac:	2202      	movs	r2, #2
 8001aae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	fa93 f2a3 	rbit	r2, r3
 8001aba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	4bbb      	ldr	r3, [pc, #748]	; (8001db0 <HAL_RCC_OscConfig+0xc44>)
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001ac8:	2102      	movs	r1, #2
 8001aca:	6011      	str	r1, [r2, #0]
 8001acc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001ad0:	6812      	ldr	r2, [r2, #0]
 8001ad2:	fa92 f1a2 	rbit	r1, r2
 8001ad6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001ada:	6011      	str	r1, [r2, #0]
  return result;
 8001adc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001ae0:	6812      	ldr	r2, [r2, #0]
 8001ae2:	fab2 f282 	clz	r2, r2
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	f002 021f 	and.w	r2, r2, #31
 8001af2:	2101      	movs	r1, #1
 8001af4:	fa01 f202 	lsl.w	r2, r1, r2
 8001af8:	4013      	ands	r3, r2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d099      	beq.n	8001a32 <HAL_RCC_OscConfig+0x8c6>
 8001afe:	e063      	b.n	8001bc8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b00:	f7fe ffb6 	bl	8000a70 <HAL_GetTick>
 8001b04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b08:	e00b      	b.n	8001b22 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b0a:	f7fe ffb1 	bl	8000a70 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e225      	b.n	8001f6e <HAL_RCC_OscConfig+0xe02>
 8001b22:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b26:	2202      	movs	r2, #2
 8001b28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	fa93 f2a3 	rbit	r2, r3
 8001b34:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b3e:	2202      	movs	r2, #2
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	fa93 f2a3 	rbit	r2, r3
 8001b4c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b50:	601a      	str	r2, [r3, #0]
  return result;
 8001b52:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b56:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b58:	fab3 f383 	clz	r3, r3
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	095b      	lsrs	r3, r3, #5
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	f043 0302 	orr.w	r3, r3, #2
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d102      	bne.n	8001b72 <HAL_RCC_OscConfig+0xa06>
 8001b6c:	4b90      	ldr	r3, [pc, #576]	; (8001db0 <HAL_RCC_OscConfig+0xc44>)
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	e00d      	b.n	8001b8e <HAL_RCC_OscConfig+0xa22>
 8001b72:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b76:	2202      	movs	r2, #2
 8001b78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	fa93 f2a3 	rbit	r2, r3
 8001b84:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	4b89      	ldr	r3, [pc, #548]	; (8001db0 <HAL_RCC_OscConfig+0xc44>)
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b92:	2102      	movs	r1, #2
 8001b94:	6011      	str	r1, [r2, #0]
 8001b96:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b9a:	6812      	ldr	r2, [r2, #0]
 8001b9c:	fa92 f1a2 	rbit	r1, r2
 8001ba0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001ba4:	6011      	str	r1, [r2, #0]
  return result;
 8001ba6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001baa:	6812      	ldr	r2, [r2, #0]
 8001bac:	fab2 f282 	clz	r2, r2
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	f002 021f 	and.w	r2, r2, #31
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1a0      	bne.n	8001b0a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bc8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d105      	bne.n	8001bdc <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd0:	4b77      	ldr	r3, [pc, #476]	; (8001db0 <HAL_RCC_OscConfig+0xc44>)
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	4a76      	ldr	r2, [pc, #472]	; (8001db0 <HAL_RCC_OscConfig+0xc44>)
 8001bd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bda:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 81c2 	beq.w	8001f6c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001be8:	4b71      	ldr	r3, [pc, #452]	; (8001db0 <HAL_RCC_OscConfig+0xc44>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 030c 	and.w	r3, r3, #12
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	f000 819c 	beq.w	8001f2e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	f040 8114 	bne.w	8001e2a <HAL_RCC_OscConfig+0xcbe>
 8001c02:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001c06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	fa93 f2a3 	rbit	r2, r3
 8001c16:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c1a:	601a      	str	r2, [r3, #0]
  return result;
 8001c1c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c20:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c22:	fab3 f383 	clz	r3, r3
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	461a      	mov	r2, r3
 8001c34:	2300      	movs	r3, #0
 8001c36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c38:	f7fe ff1a 	bl	8000a70 <HAL_GetTick>
 8001c3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c40:	e009      	b.n	8001c56 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c42:	f7fe ff15 	bl	8000a70 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e18b      	b.n	8001f6e <HAL_RCC_OscConfig+0xe02>
 8001c56:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c60:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	fa93 f2a3 	rbit	r2, r3
 8001c6a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c6e:	601a      	str	r2, [r3, #0]
  return result;
 8001c70:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c74:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c76:	fab3 f383 	clz	r3, r3
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	095b      	lsrs	r3, r3, #5
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d102      	bne.n	8001c90 <HAL_RCC_OscConfig+0xb24>
 8001c8a:	4b49      	ldr	r3, [pc, #292]	; (8001db0 <HAL_RCC_OscConfig+0xc44>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	e01b      	b.n	8001cc8 <HAL_RCC_OscConfig+0xb5c>
 8001c90:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	fa93 f2a3 	rbit	r2, r3
 8001ca4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001cae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	fa93 f2a3 	rbit	r2, r3
 8001cbe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	4b3a      	ldr	r3, [pc, #232]	; (8001db0 <HAL_RCC_OscConfig+0xc44>)
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ccc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cd0:	6011      	str	r1, [r2, #0]
 8001cd2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001cd6:	6812      	ldr	r2, [r2, #0]
 8001cd8:	fa92 f1a2 	rbit	r1, r2
 8001cdc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001ce0:	6011      	str	r1, [r2, #0]
  return result;
 8001ce2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	fab2 f282 	clz	r2, r2
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	f042 0220 	orr.w	r2, r2, #32
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	f002 021f 	and.w	r2, r2, #31
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8001cfe:	4013      	ands	r3, r2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d19e      	bne.n	8001c42 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d04:	4b2a      	ldr	r3, [pc, #168]	; (8001db0 <HAL_RCC_OscConfig+0xc44>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d0c:	1d3b      	adds	r3, r7, #4
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001d12:	1d3b      	adds	r3, r7, #4
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	430b      	orrs	r3, r1
 8001d1a:	4925      	ldr	r1, [pc, #148]	; (8001db0 <HAL_RCC_OscConfig+0xc44>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	604b      	str	r3, [r1, #4]
 8001d20:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	fa93 f2a3 	rbit	r2, r3
 8001d34:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d38:	601a      	str	r2, [r3, #0]
  return result;
 8001d3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d3e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d40:	fab3 f383 	clz	r3, r3
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d4a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	461a      	mov	r2, r3
 8001d52:	2301      	movs	r3, #1
 8001d54:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d56:	f7fe fe8b 	bl	8000a70 <HAL_GetTick>
 8001d5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d5e:	e009      	b.n	8001d74 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d60:	f7fe fe86 	bl	8000a70 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e0fc      	b.n	8001f6e <HAL_RCC_OscConfig+0xe02>
 8001d74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	fa93 f2a3 	rbit	r2, r3
 8001d88:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d8c:	601a      	str	r2, [r3, #0]
  return result;
 8001d8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d92:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d94:	fab3 f383 	clz	r3, r3
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	095b      	lsrs	r3, r3, #5
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d105      	bne.n	8001db4 <HAL_RCC_OscConfig+0xc48>
 8001da8:	4b01      	ldr	r3, [pc, #4]	; (8001db0 <HAL_RCC_OscConfig+0xc44>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	e01e      	b.n	8001dec <HAL_RCC_OscConfig+0xc80>
 8001dae:	bf00      	nop
 8001db0:	40021000 	.word	0x40021000
 8001db4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001db8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	fa93 f2a3 	rbit	r2, r3
 8001dc8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	fa93 f2a3 	rbit	r2, r3
 8001de2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	4b63      	ldr	r3, [pc, #396]	; (8001f78 <HAL_RCC_OscConfig+0xe0c>)
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001df0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001df4:	6011      	str	r1, [r2, #0]
 8001df6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001dfa:	6812      	ldr	r2, [r2, #0]
 8001dfc:	fa92 f1a2 	rbit	r1, r2
 8001e00:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001e04:	6011      	str	r1, [r2, #0]
  return result;
 8001e06:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001e0a:	6812      	ldr	r2, [r2, #0]
 8001e0c:	fab2 f282 	clz	r2, r2
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	f042 0220 	orr.w	r2, r2, #32
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	f002 021f 	and.w	r2, r2, #31
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e22:	4013      	ands	r3, r2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d09b      	beq.n	8001d60 <HAL_RCC_OscConfig+0xbf4>
 8001e28:	e0a0      	b.n	8001f6c <HAL_RCC_OscConfig+0xe00>
 8001e2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e2e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	fa93 f2a3 	rbit	r2, r3
 8001e3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e42:	601a      	str	r2, [r3, #0]
  return result;
 8001e44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e48:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e4a:	fab3 f383 	clz	r3, r3
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e54:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e60:	f7fe fe06 	bl	8000a70 <HAL_GetTick>
 8001e64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e68:	e009      	b.n	8001e7e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e6a:	f7fe fe01 	bl	8000a70 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e077      	b.n	8001f6e <HAL_RCC_OscConfig+0xe02>
 8001e7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	fa93 f2a3 	rbit	r2, r3
 8001e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e96:	601a      	str	r2, [r3, #0]
  return result;
 8001e98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e9c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e9e:	fab3 f383 	clz	r3, r3
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	095b      	lsrs	r3, r3, #5
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d102      	bne.n	8001eb8 <HAL_RCC_OscConfig+0xd4c>
 8001eb2:	4b31      	ldr	r3, [pc, #196]	; (8001f78 <HAL_RCC_OscConfig+0xe0c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	e01b      	b.n	8001ef0 <HAL_RCC_OscConfig+0xd84>
 8001eb8:	f107 0320 	add.w	r3, r7, #32
 8001ebc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ec0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec2:	f107 0320 	add.w	r3, r7, #32
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	fa93 f2a3 	rbit	r2, r3
 8001ecc:	f107 031c 	add.w	r3, r7, #28
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	f107 0318 	add.w	r3, r7, #24
 8001ed6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	f107 0318 	add.w	r3, r7, #24
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	fa93 f2a3 	rbit	r2, r3
 8001ee6:	f107 0314 	add.w	r3, r7, #20
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	4b22      	ldr	r3, [pc, #136]	; (8001f78 <HAL_RCC_OscConfig+0xe0c>)
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	f107 0210 	add.w	r2, r7, #16
 8001ef4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ef8:	6011      	str	r1, [r2, #0]
 8001efa:	f107 0210 	add.w	r2, r7, #16
 8001efe:	6812      	ldr	r2, [r2, #0]
 8001f00:	fa92 f1a2 	rbit	r1, r2
 8001f04:	f107 020c 	add.w	r2, r7, #12
 8001f08:	6011      	str	r1, [r2, #0]
  return result;
 8001f0a:	f107 020c 	add.w	r2, r7, #12
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	fab2 f282 	clz	r2, r2
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	f042 0220 	orr.w	r2, r2, #32
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	f002 021f 	and.w	r2, r2, #31
 8001f20:	2101      	movs	r1, #1
 8001f22:	fa01 f202 	lsl.w	r2, r1, r2
 8001f26:	4013      	ands	r3, r2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d19e      	bne.n	8001e6a <HAL_RCC_OscConfig+0xcfe>
 8001f2c:	e01e      	b.n	8001f6c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f2e:	1d3b      	adds	r3, r7, #4
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d101      	bne.n	8001f3c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e018      	b.n	8001f6e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f3c:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <HAL_RCC_OscConfig+0xe0c>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f44:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f4c:	1d3b      	adds	r3, r7, #4
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d108      	bne.n	8001f68 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001f56:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f5e:	1d3b      	adds	r3, r7, #4
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d001      	beq.n	8001f6c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e000      	b.n	8001f6e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40021000 	.word	0x40021000

08001f7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b09e      	sub	sp, #120	; 0x78
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e162      	b.n	800225a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f94:	4b90      	ldr	r3, [pc, #576]	; (80021d8 <HAL_RCC_ClockConfig+0x25c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d910      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b8d      	ldr	r3, [pc, #564]	; (80021d8 <HAL_RCC_ClockConfig+0x25c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 0207 	bic.w	r2, r3, #7
 8001faa:	498b      	ldr	r1, [pc, #556]	; (80021d8 <HAL_RCC_ClockConfig+0x25c>)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b89      	ldr	r3, [pc, #548]	; (80021d8 <HAL_RCC_ClockConfig+0x25c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e14a      	b.n	800225a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d008      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd0:	4b82      	ldr	r3, [pc, #520]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	497f      	ldr	r1, [pc, #508]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 80dc 	beq.w	80021a8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d13c      	bne.n	8002072 <HAL_RCC_ClockConfig+0xf6>
 8001ff8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ffc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002000:	fa93 f3a3 	rbit	r3, r3
 8002004:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002008:	fab3 f383 	clz	r3, r3
 800200c:	b2db      	uxtb	r3, r3
 800200e:	095b      	lsrs	r3, r3, #5
 8002010:	b2db      	uxtb	r3, r3
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b01      	cmp	r3, #1
 800201a:	d102      	bne.n	8002022 <HAL_RCC_ClockConfig+0xa6>
 800201c:	4b6f      	ldr	r3, [pc, #444]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	e00f      	b.n	8002042 <HAL_RCC_ClockConfig+0xc6>
 8002022:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002026:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002028:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800202a:	fa93 f3a3 	rbit	r3, r3
 800202e:	667b      	str	r3, [r7, #100]	; 0x64
 8002030:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002034:	663b      	str	r3, [r7, #96]	; 0x60
 8002036:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002038:	fa93 f3a3 	rbit	r3, r3
 800203c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800203e:	4b67      	ldr	r3, [pc, #412]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002042:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002046:	65ba      	str	r2, [r7, #88]	; 0x58
 8002048:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800204a:	fa92 f2a2 	rbit	r2, r2
 800204e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002050:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002052:	fab2 f282 	clz	r2, r2
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	f042 0220 	orr.w	r2, r2, #32
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	f002 021f 	and.w	r2, r2, #31
 8002062:	2101      	movs	r1, #1
 8002064:	fa01 f202 	lsl.w	r2, r1, r2
 8002068:	4013      	ands	r3, r2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d17b      	bne.n	8002166 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e0f3      	b.n	800225a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b02      	cmp	r3, #2
 8002078:	d13c      	bne.n	80020f4 <HAL_RCC_ClockConfig+0x178>
 800207a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800207e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002082:	fa93 f3a3 	rbit	r3, r3
 8002086:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800208a:	fab3 f383 	clz	r3, r3
 800208e:	b2db      	uxtb	r3, r3
 8002090:	095b      	lsrs	r3, r3, #5
 8002092:	b2db      	uxtb	r3, r3
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b01      	cmp	r3, #1
 800209c:	d102      	bne.n	80020a4 <HAL_RCC_ClockConfig+0x128>
 800209e:	4b4f      	ldr	r3, [pc, #316]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	e00f      	b.n	80020c4 <HAL_RCC_ClockConfig+0x148>
 80020a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020ac:	fa93 f3a3 	rbit	r3, r3
 80020b0:	647b      	str	r3, [r7, #68]	; 0x44
 80020b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020b6:	643b      	str	r3, [r7, #64]	; 0x40
 80020b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020ba:	fa93 f3a3 	rbit	r3, r3
 80020be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020c0:	4b46      	ldr	r3, [pc, #280]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 80020c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020c8:	63ba      	str	r2, [r7, #56]	; 0x38
 80020ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020cc:	fa92 f2a2 	rbit	r2, r2
 80020d0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80020d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020d4:	fab2 f282 	clz	r2, r2
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	f042 0220 	orr.w	r2, r2, #32
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	f002 021f 	and.w	r2, r2, #31
 80020e4:	2101      	movs	r1, #1
 80020e6:	fa01 f202 	lsl.w	r2, r1, r2
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d13a      	bne.n	8002166 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e0b2      	b.n	800225a <HAL_RCC_ClockConfig+0x2de>
 80020f4:	2302      	movs	r3, #2
 80020f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fa:	fa93 f3a3 	rbit	r3, r3
 80020fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002102:	fab3 f383 	clz	r3, r3
 8002106:	b2db      	uxtb	r3, r3
 8002108:	095b      	lsrs	r3, r3, #5
 800210a:	b2db      	uxtb	r3, r3
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b01      	cmp	r3, #1
 8002114:	d102      	bne.n	800211c <HAL_RCC_ClockConfig+0x1a0>
 8002116:	4b31      	ldr	r3, [pc, #196]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	e00d      	b.n	8002138 <HAL_RCC_ClockConfig+0x1bc>
 800211c:	2302      	movs	r3, #2
 800211e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002122:	fa93 f3a3 	rbit	r3, r3
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
 8002128:	2302      	movs	r3, #2
 800212a:	623b      	str	r3, [r7, #32]
 800212c:	6a3b      	ldr	r3, [r7, #32]
 800212e:	fa93 f3a3 	rbit	r3, r3
 8002132:	61fb      	str	r3, [r7, #28]
 8002134:	4b29      	ldr	r3, [pc, #164]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	2202      	movs	r2, #2
 800213a:	61ba      	str	r2, [r7, #24]
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	fa92 f2a2 	rbit	r2, r2
 8002142:	617a      	str	r2, [r7, #20]
  return result;
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	fab2 f282 	clz	r2, r2
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	f042 0220 	orr.w	r2, r2, #32
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	f002 021f 	and.w	r2, r2, #31
 8002156:	2101      	movs	r1, #1
 8002158:	fa01 f202 	lsl.w	r2, r1, r2
 800215c:	4013      	ands	r3, r2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e079      	b.n	800225a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002166:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f023 0203 	bic.w	r2, r3, #3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	491a      	ldr	r1, [pc, #104]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002174:	4313      	orrs	r3, r2
 8002176:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002178:	f7fe fc7a 	bl	8000a70 <HAL_GetTick>
 800217c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217e:	e00a      	b.n	8002196 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002180:	f7fe fc76 	bl	8000a70 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	f241 3288 	movw	r2, #5000	; 0x1388
 800218e:	4293      	cmp	r3, r2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e061      	b.n	800225a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002196:	4b11      	ldr	r3, [pc, #68]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 020c 	and.w	r2, r3, #12
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d1eb      	bne.n	8002180 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021a8:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <HAL_RCC_ClockConfig+0x25c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d214      	bcs.n	80021e0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b6:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <HAL_RCC_ClockConfig+0x25c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f023 0207 	bic.w	r2, r3, #7
 80021be:	4906      	ldr	r1, [pc, #24]	; (80021d8 <HAL_RCC_ClockConfig+0x25c>)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c6:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <HAL_RCC_ClockConfig+0x25c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d005      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e040      	b.n	800225a <HAL_RCC_ClockConfig+0x2de>
 80021d8:	40022000 	.word	0x40022000
 80021dc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d008      	beq.n	80021fe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021ec:	4b1d      	ldr	r3, [pc, #116]	; (8002264 <HAL_RCC_ClockConfig+0x2e8>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	491a      	ldr	r1, [pc, #104]	; (8002264 <HAL_RCC_ClockConfig+0x2e8>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	2b00      	cmp	r3, #0
 8002208:	d009      	beq.n	800221e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800220a:	4b16      	ldr	r3, [pc, #88]	; (8002264 <HAL_RCC_ClockConfig+0x2e8>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	4912      	ldr	r1, [pc, #72]	; (8002264 <HAL_RCC_ClockConfig+0x2e8>)
 800221a:	4313      	orrs	r3, r2
 800221c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800221e:	f000 f829 	bl	8002274 <HAL_RCC_GetSysClockFreq>
 8002222:	4601      	mov	r1, r0
 8002224:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <HAL_RCC_ClockConfig+0x2e8>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800222c:	22f0      	movs	r2, #240	; 0xf0
 800222e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	fa92 f2a2 	rbit	r2, r2
 8002236:	60fa      	str	r2, [r7, #12]
  return result;
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	fab2 f282 	clz	r2, r2
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	40d3      	lsrs	r3, r2
 8002242:	4a09      	ldr	r2, [pc, #36]	; (8002268 <HAL_RCC_ClockConfig+0x2ec>)
 8002244:	5cd3      	ldrb	r3, [r2, r3]
 8002246:	fa21 f303 	lsr.w	r3, r1, r3
 800224a:	4a08      	ldr	r2, [pc, #32]	; (800226c <HAL_RCC_ClockConfig+0x2f0>)
 800224c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800224e:	4b08      	ldr	r3, [pc, #32]	; (8002270 <HAL_RCC_ClockConfig+0x2f4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f7fe fbc8 	bl	80009e8 <HAL_InitTick>
  
  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3778      	adds	r7, #120	; 0x78
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40021000 	.word	0x40021000
 8002268:	080040ac 	.word	0x080040ac
 800226c:	20000000 	.word	0x20000000
 8002270:	20000004 	.word	0x20000004

08002274 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002274:	b480      	push	{r7}
 8002276:	b08b      	sub	sp, #44	; 0x2c
 8002278:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
 800227e:	2300      	movs	r3, #0
 8002280:	61bb      	str	r3, [r7, #24]
 8002282:	2300      	movs	r3, #0
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800228a:	2300      	movs	r3, #0
 800228c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800228e:	4b29      	ldr	r3, [pc, #164]	; (8002334 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b04      	cmp	r3, #4
 800229c:	d002      	beq.n	80022a4 <HAL_RCC_GetSysClockFreq+0x30>
 800229e:	2b08      	cmp	r3, #8
 80022a0:	d003      	beq.n	80022aa <HAL_RCC_GetSysClockFreq+0x36>
 80022a2:	e03c      	b.n	800231e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022a4:	4b24      	ldr	r3, [pc, #144]	; (8002338 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022a6:	623b      	str	r3, [r7, #32]
      break;
 80022a8:	e03c      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80022b0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80022b4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	fa92 f2a2 	rbit	r2, r2
 80022bc:	607a      	str	r2, [r7, #4]
  return result;
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	fab2 f282 	clz	r2, r2
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	40d3      	lsrs	r3, r2
 80022c8:	4a1c      	ldr	r2, [pc, #112]	; (800233c <HAL_RCC_GetSysClockFreq+0xc8>)
 80022ca:	5cd3      	ldrb	r3, [r2, r3]
 80022cc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80022ce:	4b19      	ldr	r3, [pc, #100]	; (8002334 <HAL_RCC_GetSysClockFreq+0xc0>)
 80022d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	220f      	movs	r2, #15
 80022d8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	fa92 f2a2 	rbit	r2, r2
 80022e0:	60fa      	str	r2, [r7, #12]
  return result;
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	fab2 f282 	clz	r2, r2
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	40d3      	lsrs	r3, r2
 80022ec:	4a14      	ldr	r2, [pc, #80]	; (8002340 <HAL_RCC_GetSysClockFreq+0xcc>)
 80022ee:	5cd3      	ldrb	r3, [r2, r3]
 80022f0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d008      	beq.n	800230e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022fc:	4a0e      	ldr	r2, [pc, #56]	; (8002338 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	fbb2 f2f3 	udiv	r2, r2, r3
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	fb02 f303 	mul.w	r3, r2, r3
 800230a:	627b      	str	r3, [r7, #36]	; 0x24
 800230c:	e004      	b.n	8002318 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	4a0c      	ldr	r2, [pc, #48]	; (8002344 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002312:	fb02 f303 	mul.w	r3, r2, r3
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	623b      	str	r3, [r7, #32]
      break;
 800231c:	e002      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800231e:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002320:	623b      	str	r3, [r7, #32]
      break;
 8002322:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002324:	6a3b      	ldr	r3, [r7, #32]
}
 8002326:	4618      	mov	r0, r3
 8002328:	372c      	adds	r7, #44	; 0x2c
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40021000 	.word	0x40021000
 8002338:	007a1200 	.word	0x007a1200
 800233c:	080040c4 	.word	0x080040c4
 8002340:	080040d4 	.word	0x080040d4
 8002344:	003d0900 	.word	0x003d0900

08002348 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800234c:	4b03      	ldr	r3, [pc, #12]	; (800235c <HAL_RCC_GetHCLKFreq+0x14>)
 800234e:	681b      	ldr	r3, [r3, #0]
}
 8002350:	4618      	mov	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	20000000 	.word	0x20000000

08002360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002366:	f7ff ffef 	bl	8002348 <HAL_RCC_GetHCLKFreq>
 800236a:	4601      	mov	r1, r0
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002374:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002378:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	fa92 f2a2 	rbit	r2, r2
 8002380:	603a      	str	r2, [r7, #0]
  return result;
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	fab2 f282 	clz	r2, r2
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	40d3      	lsrs	r3, r2
 800238c:	4a04      	ldr	r2, [pc, #16]	; (80023a0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800238e:	5cd3      	ldrb	r3, [r2, r3]
 8002390:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40021000 	.word	0x40021000
 80023a0:	080040bc 	.word	0x080040bc

080023a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80023aa:	f7ff ffcd 	bl	8002348 <HAL_RCC_GetHCLKFreq>
 80023ae:	4601      	mov	r1, r0
 80023b0:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80023b8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80023bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	fa92 f2a2 	rbit	r2, r2
 80023c4:	603a      	str	r2, [r7, #0]
  return result;
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	fab2 f282 	clz	r2, r2
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	40d3      	lsrs	r3, r2
 80023d0:	4a04      	ldr	r2, [pc, #16]	; (80023e4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80023d2:	5cd3      	ldrb	r3, [r2, r3]
 80023d4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40021000 	.word	0x40021000
 80023e4:	080040bc 	.word	0x080040bc

080023e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b092      	sub	sp, #72	; 0x48
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 80cd 	beq.w	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800240c:	4b86      	ldr	r3, [pc, #536]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800240e:	69db      	ldr	r3, [r3, #28]
 8002410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10e      	bne.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002418:	4b83      	ldr	r3, [pc, #524]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	4a82      	ldr	r2, [pc, #520]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800241e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002422:	61d3      	str	r3, [r2, #28]
 8002424:	4b80      	ldr	r3, [pc, #512]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242c:	60bb      	str	r3, [r7, #8]
 800242e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002430:	2301      	movs	r3, #1
 8002432:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002436:	4b7d      	ldr	r3, [pc, #500]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243e:	2b00      	cmp	r3, #0
 8002440:	d118      	bne.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002442:	4b7a      	ldr	r3, [pc, #488]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a79      	ldr	r2, [pc, #484]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800244c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800244e:	f7fe fb0f 	bl	8000a70 <HAL_GetTick>
 8002452:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002454:	e008      	b.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002456:	f7fe fb0b 	bl	8000a70 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b64      	cmp	r3, #100	; 0x64
 8002462:	d901      	bls.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e0db      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002468:	4b70      	ldr	r3, [pc, #448]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0f0      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002474:	4b6c      	ldr	r3, [pc, #432]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800247c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800247e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002480:	2b00      	cmp	r3, #0
 8002482:	d07d      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800248c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800248e:	429a      	cmp	r2, r3
 8002490:	d076      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002492:	4b65      	ldr	r3, [pc, #404]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800249a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800249c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024a0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a4:	fa93 f3a3 	rbit	r3, r3
 80024a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80024aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024ac:	fab3 f383 	clz	r3, r3
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	461a      	mov	r2, r3
 80024b4:	4b5e      	ldr	r3, [pc, #376]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80024b6:	4413      	add	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	461a      	mov	r2, r3
 80024bc:	2301      	movs	r3, #1
 80024be:	6013      	str	r3, [r2, #0]
 80024c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c8:	fa93 f3a3 	rbit	r3, r3
 80024cc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80024ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024d0:	fab3 f383 	clz	r3, r3
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	461a      	mov	r2, r3
 80024d8:	4b55      	ldr	r3, [pc, #340]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80024da:	4413      	add	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	461a      	mov	r2, r3
 80024e0:	2300      	movs	r3, #0
 80024e2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80024e4:	4a50      	ldr	r2, [pc, #320]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024e8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d045      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f4:	f7fe fabc 	bl	8000a70 <HAL_GetTick>
 80024f8:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024fa:	e00a      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fc:	f7fe fab8 	bl	8000a70 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	f241 3288 	movw	r2, #5000	; 0x1388
 800250a:	4293      	cmp	r3, r2
 800250c:	d901      	bls.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e086      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002512:	2302      	movs	r3, #2
 8002514:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002518:	fa93 f3a3 	rbit	r3, r3
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
 800251e:	2302      	movs	r3, #2
 8002520:	623b      	str	r3, [r7, #32]
 8002522:	6a3b      	ldr	r3, [r7, #32]
 8002524:	fa93 f3a3 	rbit	r3, r3
 8002528:	61fb      	str	r3, [r7, #28]
  return result;
 800252a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800252c:	fab3 f383 	clz	r3, r3
 8002530:	b2db      	uxtb	r3, r3
 8002532:	095b      	lsrs	r3, r3, #5
 8002534:	b2db      	uxtb	r3, r3
 8002536:	f043 0302 	orr.w	r3, r3, #2
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d102      	bne.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002540:	4b39      	ldr	r3, [pc, #228]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	e007      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002546:	2302      	movs	r3, #2
 8002548:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	fa93 f3a3 	rbit	r3, r3
 8002550:	617b      	str	r3, [r7, #20]
 8002552:	4b35      	ldr	r3, [pc, #212]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	2202      	movs	r2, #2
 8002558:	613a      	str	r2, [r7, #16]
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	fa92 f2a2 	rbit	r2, r2
 8002560:	60fa      	str	r2, [r7, #12]
  return result;
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	fab2 f282 	clz	r2, r2
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	f002 021f 	and.w	r2, r2, #31
 8002574:	2101      	movs	r1, #1
 8002576:	fa01 f202 	lsl.w	r2, r1, r2
 800257a:	4013      	ands	r3, r2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0bd      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002580:	4b29      	ldr	r3, [pc, #164]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	4926      	ldr	r1, [pc, #152]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800258e:	4313      	orrs	r3, r2
 8002590:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002592:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002596:	2b01      	cmp	r3, #1
 8002598:	d105      	bne.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800259a:	4b23      	ldr	r3, [pc, #140]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	4a22      	ldr	r2, [pc, #136]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025a4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d008      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025b2:	4b1d      	ldr	r3, [pc, #116]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	f023 0203 	bic.w	r2, r3, #3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	491a      	ldr	r1, [pc, #104]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0320 	and.w	r3, r3, #32
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d008      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025d0:	4b15      	ldr	r3, [pc, #84]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d4:	f023 0210 	bic.w	r2, r3, #16
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	4912      	ldr	r1, [pc, #72]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d008      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80025ee:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	490b      	ldr	r1, [pc, #44]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d008      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800260c:	4b06      	ldr	r3, [pc, #24]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800260e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002610:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	4903      	ldr	r1, [pc, #12]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800261a:	4313      	orrs	r3, r2
 800261c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3748      	adds	r7, #72	; 0x48
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40021000 	.word	0x40021000
 800262c:	40007000 	.word	0x40007000
 8002630:	10908100 	.word	0x10908100

08002634 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e049      	b.n	80026da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d106      	bne.n	8002660 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7fe f854 	bl	8000708 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2202      	movs	r2, #2
 8002664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3304      	adds	r3, #4
 8002670:	4619      	mov	r1, r3
 8002672:	4610      	mov	r0, r2
 8002674:	f000 fb4a 	bl	8002d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d001      	beq.n	80026fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e040      	b.n	800277e <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2202      	movs	r2, #2
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 0201 	orr.w	r2, r2, #1
 8002712:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a1c      	ldr	r2, [pc, #112]	; (800278c <HAL_TIM_Base_Start_IT+0xa8>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d00e      	beq.n	800273c <HAL_TIM_Base_Start_IT+0x58>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002726:	d009      	beq.n	800273c <HAL_TIM_Base_Start_IT+0x58>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a18      	ldr	r2, [pc, #96]	; (8002790 <HAL_TIM_Base_Start_IT+0xac>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d004      	beq.n	800273c <HAL_TIM_Base_Start_IT+0x58>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a17      	ldr	r2, [pc, #92]	; (8002794 <HAL_TIM_Base_Start_IT+0xb0>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d115      	bne.n	8002768 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	4b15      	ldr	r3, [pc, #84]	; (8002798 <HAL_TIM_Base_Start_IT+0xb4>)
 8002744:	4013      	ands	r3, r2
 8002746:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2b06      	cmp	r3, #6
 800274c:	d015      	beq.n	800277a <HAL_TIM_Base_Start_IT+0x96>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002754:	d011      	beq.n	800277a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f042 0201 	orr.w	r2, r2, #1
 8002764:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002766:	e008      	b.n	800277a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f042 0201 	orr.w	r2, r2, #1
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	e000      	b.n	800277c <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800277a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	40012c00 	.word	0x40012c00
 8002790:	40000400 	.word	0x40000400
 8002794:	40014000 	.word	0x40014000
 8002798:	00010007 	.word	0x00010007

0800279c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e049      	b.n	8002842 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d106      	bne.n	80027c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7fd ff80 	bl	80006c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2202      	movs	r2, #2
 80027cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3304      	adds	r3, #4
 80027d8:	4619      	mov	r1, r3
 80027da:	4610      	mov	r0, r2
 80027dc:	f000 fa96 	bl	8002d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b082      	sub	sp, #8
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b02      	cmp	r3, #2
 800285e:	d122      	bne.n	80028a6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b02      	cmp	r3, #2
 800286c:	d11b      	bne.n	80028a6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f06f 0202 	mvn.w	r2, #2
 8002876:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	2b00      	cmp	r3, #0
 800288a:	d003      	beq.n	8002894 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 fa1f 	bl	8002cd0 <HAL_TIM_IC_CaptureCallback>
 8002892:	e005      	b.n	80028a0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 fa11 	bl	8002cbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 fa22 	bl	8002ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b04      	cmp	r3, #4
 80028b2:	d122      	bne.n	80028fa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	f003 0304 	and.w	r3, r3, #4
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d11b      	bne.n	80028fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f06f 0204 	mvn.w	r2, #4
 80028ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2202      	movs	r2, #2
 80028d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f9f5 	bl	8002cd0 <HAL_TIM_IC_CaptureCallback>
 80028e6:	e005      	b.n	80028f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f9e7 	bl	8002cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f9f8 	bl	8002ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	f003 0308 	and.w	r3, r3, #8
 8002904:	2b08      	cmp	r3, #8
 8002906:	d122      	bne.n	800294e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	2b08      	cmp	r3, #8
 8002914:	d11b      	bne.n	800294e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f06f 0208 	mvn.w	r2, #8
 800291e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2204      	movs	r2, #4
 8002924:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 f9cb 	bl	8002cd0 <HAL_TIM_IC_CaptureCallback>
 800293a:	e005      	b.n	8002948 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 f9bd 	bl	8002cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f9ce 	bl	8002ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	f003 0310 	and.w	r3, r3, #16
 8002958:	2b10      	cmp	r3, #16
 800295a:	d122      	bne.n	80029a2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f003 0310 	and.w	r3, r3, #16
 8002966:	2b10      	cmp	r3, #16
 8002968:	d11b      	bne.n	80029a2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f06f 0210 	mvn.w	r2, #16
 8002972:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2208      	movs	r2, #8
 8002978:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 f9a1 	bl	8002cd0 <HAL_TIM_IC_CaptureCallback>
 800298e:	e005      	b.n	800299c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 f993 	bl	8002cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f9a4 	bl	8002ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d10e      	bne.n	80029ce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d107      	bne.n	80029ce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f06f 0201 	mvn.w	r2, #1
 80029c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 f96d 	bl	8002ca8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d8:	2b80      	cmp	r3, #128	; 0x80
 80029da:	d10e      	bne.n	80029fa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e6:	2b80      	cmp	r3, #128	; 0x80
 80029e8:	d107      	bne.n	80029fa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 fd97 	bl	8003528 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a08:	d10e      	bne.n	8002a28 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a14:	2b80      	cmp	r3, #128	; 0x80
 8002a16:	d107      	bne.n	8002a28 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 fd8a 	bl	800353c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a32:	2b40      	cmp	r3, #64	; 0x40
 8002a34:	d10e      	bne.n	8002a54 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a40:	2b40      	cmp	r3, #64	; 0x40
 8002a42:	d107      	bne.n	8002a54 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f952 	bl	8002cf8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	f003 0320 	and.w	r3, r3, #32
 8002a5e:	2b20      	cmp	r3, #32
 8002a60:	d10e      	bne.n	8002a80 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	f003 0320 	and.w	r3, r3, #32
 8002a6c:	2b20      	cmp	r3, #32
 8002a6e:	d107      	bne.n	8002a80 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f06f 0220 	mvn.w	r2, #32
 8002a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 fd4a 	bl	8003514 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a80:	bf00      	nop
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d101      	bne.n	8002aa2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	e0fd      	b.n	8002c9e <HAL_TIM_PWM_ConfigChannel+0x216>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b14      	cmp	r3, #20
 8002aae:	f200 80f0 	bhi.w	8002c92 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8002ab2:	a201      	add	r2, pc, #4	; (adr r2, 8002ab8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab8:	08002b0d 	.word	0x08002b0d
 8002abc:	08002c93 	.word	0x08002c93
 8002ac0:	08002c93 	.word	0x08002c93
 8002ac4:	08002c93 	.word	0x08002c93
 8002ac8:	08002b4d 	.word	0x08002b4d
 8002acc:	08002c93 	.word	0x08002c93
 8002ad0:	08002c93 	.word	0x08002c93
 8002ad4:	08002c93 	.word	0x08002c93
 8002ad8:	08002b8f 	.word	0x08002b8f
 8002adc:	08002c93 	.word	0x08002c93
 8002ae0:	08002c93 	.word	0x08002c93
 8002ae4:	08002c93 	.word	0x08002c93
 8002ae8:	08002bcf 	.word	0x08002bcf
 8002aec:	08002c93 	.word	0x08002c93
 8002af0:	08002c93 	.word	0x08002c93
 8002af4:	08002c93 	.word	0x08002c93
 8002af8:	08002c11 	.word	0x08002c11
 8002afc:	08002c93 	.word	0x08002c93
 8002b00:	08002c93 	.word	0x08002c93
 8002b04:	08002c93 	.word	0x08002c93
 8002b08:	08002c51 	.word	0x08002c51
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68b9      	ldr	r1, [r7, #8]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 f972 	bl	8002dfc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	699a      	ldr	r2, [r3, #24]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0208 	orr.w	r2, r2, #8
 8002b26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	699a      	ldr	r2, [r3, #24]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 0204 	bic.w	r2, r2, #4
 8002b36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6999      	ldr	r1, [r3, #24]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	691a      	ldr	r2, [r3, #16]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	619a      	str	r2, [r3, #24]
      break;
 8002b4a:	e0a3      	b.n	8002c94 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68b9      	ldr	r1, [r7, #8]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 f9d8 	bl	8002f08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699a      	ldr	r2, [r3, #24]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	699a      	ldr	r2, [r3, #24]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6999      	ldr	r1, [r3, #24]
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	021a      	lsls	r2, r3, #8
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	619a      	str	r2, [r3, #24]
      break;
 8002b8c:	e082      	b.n	8002c94 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68b9      	ldr	r1, [r7, #8]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f000 fa37 	bl	8003008 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	69da      	ldr	r2, [r3, #28]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f042 0208 	orr.w	r2, r2, #8
 8002ba8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	69da      	ldr	r2, [r3, #28]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 0204 	bic.w	r2, r2, #4
 8002bb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	69d9      	ldr	r1, [r3, #28]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	691a      	ldr	r2, [r3, #16]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	61da      	str	r2, [r3, #28]
      break;
 8002bcc:	e062      	b.n	8002c94 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68b9      	ldr	r1, [r7, #8]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f000 fa95 	bl	8003104 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	69da      	ldr	r2, [r3, #28]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002be8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	69da      	ldr	r2, [r3, #28]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	69d9      	ldr	r1, [r3, #28]
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	021a      	lsls	r2, r3, #8
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	61da      	str	r2, [r3, #28]
      break;
 8002c0e:	e041      	b.n	8002c94 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68b9      	ldr	r1, [r7, #8]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 fad8 	bl	80031cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0208 	orr.w	r2, r2, #8
 8002c2a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0204 	bic.w	r2, r2, #4
 8002c3a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	691a      	ldr	r2, [r3, #16]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002c4e:	e021      	b.n	8002c94 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68b9      	ldr	r1, [r7, #8]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 fb16 	bl	8003288 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c6a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c7a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	021a      	lsls	r2, r3, #8
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002c90:	e000      	b.n	8002c94 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8002c92:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop

08002ca8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a32      	ldr	r2, [pc, #200]	; (8002de8 <TIM_Base_SetConfig+0xdc>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d007      	beq.n	8002d34 <TIM_Base_SetConfig+0x28>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d2a:	d003      	beq.n	8002d34 <TIM_Base_SetConfig+0x28>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a2f      	ldr	r2, [pc, #188]	; (8002dec <TIM_Base_SetConfig+0xe0>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d108      	bne.n	8002d46 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a27      	ldr	r2, [pc, #156]	; (8002de8 <TIM_Base_SetConfig+0xdc>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d013      	beq.n	8002d76 <TIM_Base_SetConfig+0x6a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d54:	d00f      	beq.n	8002d76 <TIM_Base_SetConfig+0x6a>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a24      	ldr	r2, [pc, #144]	; (8002dec <TIM_Base_SetConfig+0xe0>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d00b      	beq.n	8002d76 <TIM_Base_SetConfig+0x6a>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a23      	ldr	r2, [pc, #140]	; (8002df0 <TIM_Base_SetConfig+0xe4>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d007      	beq.n	8002d76 <TIM_Base_SetConfig+0x6a>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a22      	ldr	r2, [pc, #136]	; (8002df4 <TIM_Base_SetConfig+0xe8>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d003      	beq.n	8002d76 <TIM_Base_SetConfig+0x6a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a21      	ldr	r2, [pc, #132]	; (8002df8 <TIM_Base_SetConfig+0xec>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d108      	bne.n	8002d88 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a0e      	ldr	r2, [pc, #56]	; (8002de8 <TIM_Base_SetConfig+0xdc>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d00b      	beq.n	8002dcc <TIM_Base_SetConfig+0xc0>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a0e      	ldr	r2, [pc, #56]	; (8002df0 <TIM_Base_SetConfig+0xe4>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d007      	beq.n	8002dcc <TIM_Base_SetConfig+0xc0>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a0d      	ldr	r2, [pc, #52]	; (8002df4 <TIM_Base_SetConfig+0xe8>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d003      	beq.n	8002dcc <TIM_Base_SetConfig+0xc0>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a0c      	ldr	r2, [pc, #48]	; (8002df8 <TIM_Base_SetConfig+0xec>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d103      	bne.n	8002dd4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	691a      	ldr	r2, [r3, #16]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	615a      	str	r2, [r3, #20]
}
 8002dda:	bf00      	nop
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40012c00 	.word	0x40012c00
 8002dec:	40000400 	.word	0x40000400
 8002df0:	40014000 	.word	0x40014000
 8002df4:	40014400 	.word	0x40014400
 8002df8:	40014800 	.word	0x40014800

08002dfc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b087      	sub	sp, #28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	f023 0201 	bic.w	r2, r3, #1
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f023 0303 	bic.w	r3, r3, #3
 8002e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f023 0302 	bic.w	r3, r3, #2
 8002e48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a28      	ldr	r2, [pc, #160]	; (8002ef8 <TIM_OC1_SetConfig+0xfc>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d00b      	beq.n	8002e74 <TIM_OC1_SetConfig+0x78>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a27      	ldr	r2, [pc, #156]	; (8002efc <TIM_OC1_SetConfig+0x100>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d007      	beq.n	8002e74 <TIM_OC1_SetConfig+0x78>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a26      	ldr	r2, [pc, #152]	; (8002f00 <TIM_OC1_SetConfig+0x104>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d003      	beq.n	8002e74 <TIM_OC1_SetConfig+0x78>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a25      	ldr	r2, [pc, #148]	; (8002f04 <TIM_OC1_SetConfig+0x108>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d10c      	bne.n	8002e8e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f023 0308 	bic.w	r3, r3, #8
 8002e7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f023 0304 	bic.w	r3, r3, #4
 8002e8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a19      	ldr	r2, [pc, #100]	; (8002ef8 <TIM_OC1_SetConfig+0xfc>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d00b      	beq.n	8002eae <TIM_OC1_SetConfig+0xb2>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a18      	ldr	r2, [pc, #96]	; (8002efc <TIM_OC1_SetConfig+0x100>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d007      	beq.n	8002eae <TIM_OC1_SetConfig+0xb2>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a17      	ldr	r2, [pc, #92]	; (8002f00 <TIM_OC1_SetConfig+0x104>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d003      	beq.n	8002eae <TIM_OC1_SetConfig+0xb2>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a16      	ldr	r2, [pc, #88]	; (8002f04 <TIM_OC1_SetConfig+0x108>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d111      	bne.n	8002ed2 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002eb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ebc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	621a      	str	r2, [r3, #32]
}
 8002eec:	bf00      	nop
 8002eee:	371c      	adds	r7, #28
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	40012c00 	.word	0x40012c00
 8002efc:	40014000 	.word	0x40014000
 8002f00:	40014400 	.word	0x40014400
 8002f04:	40014800 	.word	0x40014800

08002f08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b087      	sub	sp, #28
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	f023 0210 	bic.w	r2, r3, #16
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	021b      	lsls	r3, r3, #8
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	f023 0320 	bic.w	r3, r3, #32
 8002f56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a24      	ldr	r2, [pc, #144]	; (8002ff8 <TIM_OC2_SetConfig+0xf0>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d10d      	bne.n	8002f88 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a1b      	ldr	r2, [pc, #108]	; (8002ff8 <TIM_OC2_SetConfig+0xf0>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d00b      	beq.n	8002fa8 <TIM_OC2_SetConfig+0xa0>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a1a      	ldr	r2, [pc, #104]	; (8002ffc <TIM_OC2_SetConfig+0xf4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d007      	beq.n	8002fa8 <TIM_OC2_SetConfig+0xa0>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a19      	ldr	r2, [pc, #100]	; (8003000 <TIM_OC2_SetConfig+0xf8>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d003      	beq.n	8002fa8 <TIM_OC2_SetConfig+0xa0>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a18      	ldr	r2, [pc, #96]	; (8003004 <TIM_OC2_SetConfig+0xfc>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d113      	bne.n	8002fd0 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fae:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fb6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	621a      	str	r2, [r3, #32]
}
 8002fea:	bf00      	nop
 8002fec:	371c      	adds	r7, #28
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	40012c00 	.word	0x40012c00
 8002ffc:	40014000 	.word	0x40014000
 8003000:	40014400 	.word	0x40014400
 8003004:	40014800 	.word	0x40014800

08003008 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003008:	b480      	push	{r7}
 800300a:	b087      	sub	sp, #28
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800303a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f023 0303 	bic.w	r3, r3, #3
 8003042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	4313      	orrs	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003054:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	021b      	lsls	r3, r3, #8
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	4313      	orrs	r3, r2
 8003060:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a23      	ldr	r2, [pc, #140]	; (80030f4 <TIM_OC3_SetConfig+0xec>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d10d      	bne.n	8003086 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003070:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	021b      	lsls	r3, r3, #8
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	4313      	orrs	r3, r2
 800307c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003084:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a1a      	ldr	r2, [pc, #104]	; (80030f4 <TIM_OC3_SetConfig+0xec>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d00b      	beq.n	80030a6 <TIM_OC3_SetConfig+0x9e>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a19      	ldr	r2, [pc, #100]	; (80030f8 <TIM_OC3_SetConfig+0xf0>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d007      	beq.n	80030a6 <TIM_OC3_SetConfig+0x9e>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a18      	ldr	r2, [pc, #96]	; (80030fc <TIM_OC3_SetConfig+0xf4>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d003      	beq.n	80030a6 <TIM_OC3_SetConfig+0x9e>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a17      	ldr	r2, [pc, #92]	; (8003100 <TIM_OC3_SetConfig+0xf8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d113      	bne.n	80030ce <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	011b      	lsls	r3, r3, #4
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	4313      	orrs	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	011b      	lsls	r3, r3, #4
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	621a      	str	r2, [r3, #32]
}
 80030e8:	bf00      	nop
 80030ea:	371c      	adds	r7, #28
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	40012c00 	.word	0x40012c00
 80030f8:	40014000 	.word	0x40014000
 80030fc:	40014400 	.word	0x40014400
 8003100:	40014800 	.word	0x40014800

08003104 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003104:	b480      	push	{r7}
 8003106:	b087      	sub	sp, #28
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800313e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	021b      	lsls	r3, r3, #8
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	4313      	orrs	r3, r2
 800314a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003152:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	031b      	lsls	r3, r3, #12
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	4313      	orrs	r3, r2
 800315e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a16      	ldr	r2, [pc, #88]	; (80031bc <TIM_OC4_SetConfig+0xb8>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d00b      	beq.n	8003180 <TIM_OC4_SetConfig+0x7c>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a15      	ldr	r2, [pc, #84]	; (80031c0 <TIM_OC4_SetConfig+0xbc>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d007      	beq.n	8003180 <TIM_OC4_SetConfig+0x7c>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a14      	ldr	r2, [pc, #80]	; (80031c4 <TIM_OC4_SetConfig+0xc0>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d003      	beq.n	8003180 <TIM_OC4_SetConfig+0x7c>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a13      	ldr	r2, [pc, #76]	; (80031c8 <TIM_OC4_SetConfig+0xc4>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d109      	bne.n	8003194 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003186:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	019b      	lsls	r3, r3, #6
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	4313      	orrs	r3, r2
 8003192:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	621a      	str	r2, [r3, #32]
}
 80031ae:	bf00      	nop
 80031b0:	371c      	adds	r7, #28
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	40012c00 	.word	0x40012c00
 80031c0:	40014000 	.word	0x40014000
 80031c4:	40014400 	.word	0x40014400
 80031c8:	40014800 	.word	0x40014800

080031cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	4313      	orrs	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003210:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	041b      	lsls	r3, r3, #16
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	4313      	orrs	r3, r2
 800321c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a15      	ldr	r2, [pc, #84]	; (8003278 <TIM_OC5_SetConfig+0xac>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d00b      	beq.n	800323e <TIM_OC5_SetConfig+0x72>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a14      	ldr	r2, [pc, #80]	; (800327c <TIM_OC5_SetConfig+0xb0>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d007      	beq.n	800323e <TIM_OC5_SetConfig+0x72>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a13      	ldr	r2, [pc, #76]	; (8003280 <TIM_OC5_SetConfig+0xb4>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d003      	beq.n	800323e <TIM_OC5_SetConfig+0x72>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a12      	ldr	r2, [pc, #72]	; (8003284 <TIM_OC5_SetConfig+0xb8>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d109      	bne.n	8003252 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003244:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	021b      	lsls	r3, r3, #8
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	4313      	orrs	r3, r2
 8003250:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	621a      	str	r2, [r3, #32]
}
 800326c:	bf00      	nop
 800326e:	371c      	adds	r7, #28
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	40012c00 	.word	0x40012c00
 800327c:	40014000 	.word	0x40014000
 8003280:	40014400 	.word	0x40014400
 8003284:	40014800 	.word	0x40014800

08003288 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003288:	b480      	push	{r7}
 800328a:	b087      	sub	sp, #28
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	021b      	lsls	r3, r3, #8
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80032ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	051b      	lsls	r3, r3, #20
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	4313      	orrs	r3, r2
 80032da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a16      	ldr	r2, [pc, #88]	; (8003338 <TIM_OC6_SetConfig+0xb0>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d00b      	beq.n	80032fc <TIM_OC6_SetConfig+0x74>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a15      	ldr	r2, [pc, #84]	; (800333c <TIM_OC6_SetConfig+0xb4>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d007      	beq.n	80032fc <TIM_OC6_SetConfig+0x74>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a14      	ldr	r2, [pc, #80]	; (8003340 <TIM_OC6_SetConfig+0xb8>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d003      	beq.n	80032fc <TIM_OC6_SetConfig+0x74>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a13      	ldr	r2, [pc, #76]	; (8003344 <TIM_OC6_SetConfig+0xbc>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d109      	bne.n	8003310 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003302:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	029b      	lsls	r3, r3, #10
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	4313      	orrs	r3, r2
 800330e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	621a      	str	r2, [r3, #32]
}
 800332a:	bf00      	nop
 800332c:	371c      	adds	r7, #28
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	40012c00 	.word	0x40012c00
 800333c:	40014000 	.word	0x40014000
 8003340:	40014400 	.word	0x40014400
 8003344:	40014800 	.word	0x40014800

08003348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003358:	2b01      	cmp	r3, #1
 800335a:	d101      	bne.n	8003360 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800335c:	2302      	movs	r3, #2
 800335e:	e054      	b.n	800340a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a24      	ldr	r2, [pc, #144]	; (8003418 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d108      	bne.n	800339c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003390:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	4313      	orrs	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a17      	ldr	r2, [pc, #92]	; (8003418 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d00e      	beq.n	80033de <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c8:	d009      	beq.n	80033de <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a13      	ldr	r2, [pc, #76]	; (800341c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d004      	beq.n	80033de <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a11      	ldr	r2, [pc, #68]	; (8003420 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d10c      	bne.n	80033f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3714      	adds	r7, #20
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	40012c00 	.word	0x40012c00
 800341c:	40000400 	.word	0x40000400
 8003420:	40014000 	.word	0x40014000

08003424 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003438:	2b01      	cmp	r3, #1
 800343a:	d101      	bne.n	8003440 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800343c:	2302      	movs	r3, #2
 800343e:	e060      	b.n	8003502 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	4313      	orrs	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	4313      	orrs	r3, r2
 8003462:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	4313      	orrs	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4313      	orrs	r3, r2
 800347e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	4313      	orrs	r3, r2
 800348c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	4313      	orrs	r3, r2
 800349a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a6:	4313      	orrs	r3, r2
 80034a8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	041b      	lsls	r3, r3, #16
 80034b6:	4313      	orrs	r3, r2
 80034b8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a14      	ldr	r2, [pc, #80]	; (8003510 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d115      	bne.n	80034f0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	051b      	lsls	r3, r3, #20
 80034d0:	4313      	orrs	r3, r2
 80034d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	4313      	orrs	r3, r2
 80034e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	40012c00 	.word	0x40012c00

08003514 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e040      	b.n	80035e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003566:	2b00      	cmp	r3, #0
 8003568:	d106      	bne.n	8003578 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7fd f944 	bl	8000800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2224      	movs	r2, #36	; 0x24
 800357c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 0201 	bic.w	r2, r2, #1
 800358c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 fa4c 	bl	8003a2c <UART_SetConfig>
 8003594:	4603      	mov	r3, r0
 8003596:	2b01      	cmp	r3, #1
 8003598:	d101      	bne.n	800359e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e022      	b.n	80035e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d002      	beq.n	80035ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 fb78 	bl	8003c9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0201 	orr.w	r2, r2, #1
 80035da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 fbff 	bl	8003de0 <UART_CheckIdleState>
 80035e2:	4603      	mov	r3, r0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b088      	sub	sp, #32
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800360c:	69fa      	ldr	r2, [r7, #28]
 800360e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003612:	4013      	ands	r3, r2
 8003614:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d113      	bne.n	8003644 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f003 0320 	and.w	r3, r3, #32
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00e      	beq.n	8003644 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	f003 0320 	and.w	r3, r3, #32
 800362c:	2b00      	cmp	r3, #0
 800362e:	d009      	beq.n	8003644 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 81cd 	beq.w	80039d4 <HAL_UART_IRQHandler+0x3e8>
      {
        huart->RxISR(huart);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	4798      	blx	r3
      }
      return;
 8003642:	e1c7      	b.n	80039d4 <HAL_UART_IRQHandler+0x3e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 80e3 	beq.w	8003812 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d105      	bne.n	8003662 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	4ba5      	ldr	r3, [pc, #660]	; (80038f0 <HAL_UART_IRQHandler+0x304>)
 800365a:	4013      	ands	r3, r2
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 80d8 	beq.w	8003812 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	2b00      	cmp	r3, #0
 800366a:	d010      	beq.n	800368e <HAL_UART_IRQHandler+0xa2>
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00b      	beq.n	800368e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2201      	movs	r2, #1
 800367c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003684:	f043 0201 	orr.w	r2, r3, #1
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d010      	beq.n	80036ba <HAL_UART_IRQHandler+0xce>
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00b      	beq.n	80036ba <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2202      	movs	r2, #2
 80036a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036b0:	f043 0204 	orr.w	r2, r3, #4
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d010      	beq.n	80036e6 <HAL_UART_IRQHandler+0xfa>
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00b      	beq.n	80036e6 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2204      	movs	r2, #4
 80036d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036dc:	f043 0202 	orr.w	r2, r3, #2
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	f003 0308 	and.w	r3, r3, #8
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d015      	beq.n	800371c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	f003 0320 	and.w	r3, r3, #32
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d104      	bne.n	8003704 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00b      	beq.n	800371c <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2208      	movs	r2, #8
 800370a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003712:	f043 0208 	orr.w	r2, r3, #8
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003722:	2b00      	cmp	r3, #0
 8003724:	d011      	beq.n	800374a <HAL_UART_IRQHandler+0x15e>
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00c      	beq.n	800374a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003738:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003740:	f043 0220 	orr.w	r2, r3, #32
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 8141 	beq.w	80039d8 <HAL_UART_IRQHandler+0x3ec>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	f003 0320 	and.w	r3, r3, #32
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00c      	beq.n	800377a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	f003 0320 	and.w	r3, r3, #32
 8003766:	2b00      	cmp	r3, #0
 8003768:	d007      	beq.n	800377a <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003780:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378c:	2b40      	cmp	r3, #64	; 0x40
 800378e:	d004      	beq.n	800379a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003796:	2b00      	cmp	r3, #0
 8003798:	d031      	beq.n	80037fe <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 fbe5 	bl	8003f6a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037aa:	2b40      	cmp	r3, #64	; 0x40
 80037ac:	d123      	bne.n	80037f6 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037bc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d013      	beq.n	80037ee <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ca:	4a4a      	ldr	r2, [pc, #296]	; (80038f4 <HAL_UART_IRQHandler+0x308>)
 80037cc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fd fac4 	bl	8000d60 <HAL_DMA_Abort_IT>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d017      	beq.n	800380e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80037e8:	4610      	mov	r0, r2
 80037ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037ec:	e00f      	b.n	800380e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f906 	bl	8003a00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f4:	e00b      	b.n	800380e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f902 	bl	8003a00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037fc:	e007      	b.n	800380e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f8fe 	bl	8003a00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800380c:	e0e4      	b.n	80039d8 <HAL_UART_IRQHandler+0x3ec>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800380e:	bf00      	nop
    return;
 8003810:	e0e2      	b.n	80039d8 <HAL_UART_IRQHandler+0x3ec>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003816:	2b01      	cmp	r3, #1
 8003818:	f040 80a7 	bne.w	800396a <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	f003 0310 	and.w	r3, r3, #16
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 80a1 	beq.w	800396a <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	f003 0310 	and.w	r3, r3, #16
 800382e:	2b00      	cmp	r3, #0
 8003830:	f000 809b 	beq.w	800396a <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2210      	movs	r2, #16
 800383a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003846:	2b40      	cmp	r3, #64	; 0x40
 8003848:	d156      	bne.n	80038f8 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003854:	893b      	ldrh	r3, [r7, #8]
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 80c0 	beq.w	80039dc <HAL_UART_IRQHandler+0x3f0>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003862:	893a      	ldrh	r2, [r7, #8]
 8003864:	429a      	cmp	r2, r3
 8003866:	f080 80b9 	bcs.w	80039dc <HAL_UART_IRQHandler+0x3f0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	893a      	ldrh	r2, [r7, #8]
 800386e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	2b20      	cmp	r3, #32
 800387a:	d02a      	beq.n	80038d2 <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800388a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0201 	bic.w	r2, r2, #1
 800389a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689a      	ldr	r2, [r3, #8]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038aa:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2220      	movs	r2, #32
 80038b0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0210 	bic.w	r2, r2, #16
 80038c6:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7fd fa0e 	bl	8000cee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038de:	b29b      	uxth	r3, r3
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	4619      	mov	r1, r3
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f894 	bl	8003a14 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80038ec:	e076      	b.n	80039dc <HAL_UART_IRQHandler+0x3f0>
 80038ee:	bf00      	nop
 80038f0:	04000120 	.word	0x04000120
 80038f4:	08003fc9 	.word	0x08003fc9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003904:	b29b      	uxth	r3, r3
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003910:	b29b      	uxth	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d064      	beq.n	80039e0 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_rx_data > 0U) )
 8003916:	897b      	ldrh	r3, [r7, #10]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d061      	beq.n	80039e0 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800392a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0201 	bic.w	r2, r2, #1
 800393a:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2220      	movs	r2, #32
 8003940:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 0210 	bic.w	r2, r2, #16
 800395c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800395e:	897b      	ldrh	r3, [r7, #10]
 8003960:	4619      	mov	r1, r3
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f856 	bl	8003a14 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003968:	e03a      	b.n	80039e0 <HAL_UART_IRQHandler+0x3f4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00d      	beq.n	8003990 <HAL_UART_IRQHandler+0x3a4>
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d008      	beq.n	8003990 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003986:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 fb4c 	bl	8004026 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800398e:	e02a      	b.n	80039e6 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00d      	beq.n	80039b6 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d008      	beq.n	80039b6 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d01b      	beq.n	80039e4 <HAL_UART_IRQHandler+0x3f8>
    {
      huart->TxISR(huart);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	4798      	blx	r3
    }
    return;
 80039b4:	e016      	b.n	80039e4 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d012      	beq.n	80039e6 <HAL_UART_IRQHandler+0x3fa>
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00d      	beq.n	80039e6 <HAL_UART_IRQHandler+0x3fa>
  {
    UART_EndTransmit_IT(huart);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 fb12 	bl	8003ff4 <UART_EndTransmit_IT>
    return;
 80039d0:	bf00      	nop
 80039d2:	e008      	b.n	80039e6 <HAL_UART_IRQHandler+0x3fa>
      return;
 80039d4:	bf00      	nop
 80039d6:	e006      	b.n	80039e6 <HAL_UART_IRQHandler+0x3fa>
    return;
 80039d8:	bf00      	nop
 80039da:	e004      	b.n	80039e6 <HAL_UART_IRQHandler+0x3fa>
      return;
 80039dc:	bf00      	nop
 80039de:	e002      	b.n	80039e6 <HAL_UART_IRQHandler+0x3fa>
      return;
 80039e0:	bf00      	nop
 80039e2:	e000      	b.n	80039e6 <HAL_UART_IRQHandler+0x3fa>
    return;
 80039e4:	bf00      	nop
  }

}
 80039e6:	3720      	adds	r7, #32
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b088      	sub	sp, #32
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	431a      	orrs	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	69db      	ldr	r3, [r3, #28]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	4b8b      	ldr	r3, [pc, #556]	; (8003c84 <UART_SetConfig+0x258>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6812      	ldr	r2, [r2, #0]
 8003a5e:	6979      	ldr	r1, [r7, #20]
 8003a60:	430b      	orrs	r3, r1
 8003a62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a79      	ldr	r2, [pc, #484]	; (8003c88 <UART_SetConfig+0x25c>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d121      	bne.n	8003aec <UART_SetConfig+0xc0>
 8003aa8:	4b78      	ldr	r3, [pc, #480]	; (8003c8c <UART_SetConfig+0x260>)
 8003aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aac:	f003 0303 	and.w	r3, r3, #3
 8003ab0:	2b03      	cmp	r3, #3
 8003ab2:	d817      	bhi.n	8003ae4 <UART_SetConfig+0xb8>
 8003ab4:	a201      	add	r2, pc, #4	; (adr r2, 8003abc <UART_SetConfig+0x90>)
 8003ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aba:	bf00      	nop
 8003abc:	08003acd 	.word	0x08003acd
 8003ac0:	08003ad9 	.word	0x08003ad9
 8003ac4:	08003adf 	.word	0x08003adf
 8003ac8:	08003ad3 	.word	0x08003ad3
 8003acc:	2300      	movs	r3, #0
 8003ace:	77fb      	strb	r3, [r7, #31]
 8003ad0:	e01e      	b.n	8003b10 <UART_SetConfig+0xe4>
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	77fb      	strb	r3, [r7, #31]
 8003ad6:	e01b      	b.n	8003b10 <UART_SetConfig+0xe4>
 8003ad8:	2304      	movs	r3, #4
 8003ada:	77fb      	strb	r3, [r7, #31]
 8003adc:	e018      	b.n	8003b10 <UART_SetConfig+0xe4>
 8003ade:	2308      	movs	r3, #8
 8003ae0:	77fb      	strb	r3, [r7, #31]
 8003ae2:	e015      	b.n	8003b10 <UART_SetConfig+0xe4>
 8003ae4:	2310      	movs	r3, #16
 8003ae6:	77fb      	strb	r3, [r7, #31]
 8003ae8:	bf00      	nop
 8003aea:	e011      	b.n	8003b10 <UART_SetConfig+0xe4>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a67      	ldr	r2, [pc, #412]	; (8003c90 <UART_SetConfig+0x264>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d102      	bne.n	8003afc <UART_SetConfig+0xd0>
 8003af6:	2300      	movs	r3, #0
 8003af8:	77fb      	strb	r3, [r7, #31]
 8003afa:	e009      	b.n	8003b10 <UART_SetConfig+0xe4>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a64      	ldr	r2, [pc, #400]	; (8003c94 <UART_SetConfig+0x268>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d102      	bne.n	8003b0c <UART_SetConfig+0xe0>
 8003b06:	2300      	movs	r3, #0
 8003b08:	77fb      	strb	r3, [r7, #31]
 8003b0a:	e001      	b.n	8003b10 <UART_SetConfig+0xe4>
 8003b0c:	2310      	movs	r3, #16
 8003b0e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b18:	d15c      	bne.n	8003bd4 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 8003b1a:	7ffb      	ldrb	r3, [r7, #31]
 8003b1c:	2b08      	cmp	r3, #8
 8003b1e:	d828      	bhi.n	8003b72 <UART_SetConfig+0x146>
 8003b20:	a201      	add	r2, pc, #4	; (adr r2, 8003b28 <UART_SetConfig+0xfc>)
 8003b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b26:	bf00      	nop
 8003b28:	08003b4d 	.word	0x08003b4d
 8003b2c:	08003b55 	.word	0x08003b55
 8003b30:	08003b5d 	.word	0x08003b5d
 8003b34:	08003b73 	.word	0x08003b73
 8003b38:	08003b63 	.word	0x08003b63
 8003b3c:	08003b73 	.word	0x08003b73
 8003b40:	08003b73 	.word	0x08003b73
 8003b44:	08003b73 	.word	0x08003b73
 8003b48:	08003b6b 	.word	0x08003b6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b4c:	f7fe fc08 	bl	8002360 <HAL_RCC_GetPCLK1Freq>
 8003b50:	61b8      	str	r0, [r7, #24]
        break;
 8003b52:	e013      	b.n	8003b7c <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b54:	f7fe fc26 	bl	80023a4 <HAL_RCC_GetPCLK2Freq>
 8003b58:	61b8      	str	r0, [r7, #24]
        break;
 8003b5a:	e00f      	b.n	8003b7c <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b5c:	4b4e      	ldr	r3, [pc, #312]	; (8003c98 <UART_SetConfig+0x26c>)
 8003b5e:	61bb      	str	r3, [r7, #24]
        break;
 8003b60:	e00c      	b.n	8003b7c <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b62:	f7fe fb87 	bl	8002274 <HAL_RCC_GetSysClockFreq>
 8003b66:	61b8      	str	r0, [r7, #24]
        break;
 8003b68:	e008      	b.n	8003b7c <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b6e:	61bb      	str	r3, [r7, #24]
        break;
 8003b70:	e004      	b.n	8003b7c <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	77bb      	strb	r3, [r7, #30]
        break;
 8003b7a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d074      	beq.n	8003c6c <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	005a      	lsls	r2, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	085b      	lsrs	r3, r3, #1
 8003b8c:	441a      	add	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	2b0f      	cmp	r3, #15
 8003b9e:	d916      	bls.n	8003bce <UART_SetConfig+0x1a2>
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba6:	d212      	bcs.n	8003bce <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	f023 030f 	bic.w	r3, r3, #15
 8003bb0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	085b      	lsrs	r3, r3, #1
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	89fb      	ldrh	r3, [r7, #14]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	89fa      	ldrh	r2, [r7, #14]
 8003bca:	60da      	str	r2, [r3, #12]
 8003bcc:	e04e      	b.n	8003c6c <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	77bb      	strb	r3, [r7, #30]
 8003bd2:	e04b      	b.n	8003c6c <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bd4:	7ffb      	ldrb	r3, [r7, #31]
 8003bd6:	2b08      	cmp	r3, #8
 8003bd8:	d827      	bhi.n	8003c2a <UART_SetConfig+0x1fe>
 8003bda:	a201      	add	r2, pc, #4	; (adr r2, 8003be0 <UART_SetConfig+0x1b4>)
 8003bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be0:	08003c05 	.word	0x08003c05
 8003be4:	08003c0d 	.word	0x08003c0d
 8003be8:	08003c15 	.word	0x08003c15
 8003bec:	08003c2b 	.word	0x08003c2b
 8003bf0:	08003c1b 	.word	0x08003c1b
 8003bf4:	08003c2b 	.word	0x08003c2b
 8003bf8:	08003c2b 	.word	0x08003c2b
 8003bfc:	08003c2b 	.word	0x08003c2b
 8003c00:	08003c23 	.word	0x08003c23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c04:	f7fe fbac 	bl	8002360 <HAL_RCC_GetPCLK1Freq>
 8003c08:	61b8      	str	r0, [r7, #24]
        break;
 8003c0a:	e013      	b.n	8003c34 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c0c:	f7fe fbca 	bl	80023a4 <HAL_RCC_GetPCLK2Freq>
 8003c10:	61b8      	str	r0, [r7, #24]
        break;
 8003c12:	e00f      	b.n	8003c34 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c14:	4b20      	ldr	r3, [pc, #128]	; (8003c98 <UART_SetConfig+0x26c>)
 8003c16:	61bb      	str	r3, [r7, #24]
        break;
 8003c18:	e00c      	b.n	8003c34 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c1a:	f7fe fb2b 	bl	8002274 <HAL_RCC_GetSysClockFreq>
 8003c1e:	61b8      	str	r0, [r7, #24]
        break;
 8003c20:	e008      	b.n	8003c34 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c26:	61bb      	str	r3, [r7, #24]
        break;
 8003c28:	e004      	b.n	8003c34 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	77bb      	strb	r3, [r7, #30]
        break;
 8003c32:	bf00      	nop
    }

    if (pclk != 0U)
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d018      	beq.n	8003c6c <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	085a      	lsrs	r2, r3, #1
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	441a      	add	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	2b0f      	cmp	r3, #15
 8003c54:	d908      	bls.n	8003c68 <UART_SetConfig+0x23c>
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c5c:	d204      	bcs.n	8003c68 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	60da      	str	r2, [r3, #12]
 8003c66:	e001      	b.n	8003c6c <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003c78:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3720      	adds	r7, #32
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	efff69f3 	.word	0xefff69f3
 8003c88:	40013800 	.word	0x40013800
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	40004400 	.word	0x40004400
 8003c94:	40004800 	.word	0x40004800
 8003c98:	007a1200 	.word	0x007a1200

08003c9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00a      	beq.n	8003cc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00a      	beq.n	8003d0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	f003 0308 	and.w	r3, r3, #8
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	f003 0310 	and.w	r3, r3, #16
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00a      	beq.n	8003d4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d52:	f003 0320 	and.w	r3, r3, #32
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00a      	beq.n	8003d70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d01a      	beq.n	8003db2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d9a:	d10a      	bne.n	8003db2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00a      	beq.n	8003dd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	605a      	str	r2, [r3, #4]
  }
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af02      	add	r7, sp, #8
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003df0:	f7fc fe3e 	bl	8000a70 <HAL_GetTick>
 8003df4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0308 	and.w	r3, r3, #8
 8003e00:	2b08      	cmp	r3, #8
 8003e02:	d10e      	bne.n	8003e22 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f82d 	bl	8003e72 <UART_WaitOnFlagUntilTimeout>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e023      	b.n	8003e6a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b04      	cmp	r3, #4
 8003e2e:	d10e      	bne.n	8003e4e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f817 	bl	8003e72 <UART_WaitOnFlagUntilTimeout>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e00d      	b.n	8003e6a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2220      	movs	r2, #32
 8003e52:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2220      	movs	r2, #32
 8003e58:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b084      	sub	sp, #16
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	60f8      	str	r0, [r7, #12]
 8003e7a:	60b9      	str	r1, [r7, #8]
 8003e7c:	603b      	str	r3, [r7, #0]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e82:	e05e      	b.n	8003f42 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e8a:	d05a      	beq.n	8003f42 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e8c:	f7fc fdf0 	bl	8000a70 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d302      	bcc.n	8003ea2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d11b      	bne.n	8003eda <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003eb0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0201 	bic.w	r2, r2, #1
 8003ec0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e043      	b.n	8003f62 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d02c      	beq.n	8003f42 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ef2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ef6:	d124      	bne.n	8003f42 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f00:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f10:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f022 0201 	bic.w	r2, r2, #1
 8003f20:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2220      	movs	r2, #32
 8003f26:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2220      	movs	r2, #32
 8003f32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e00f      	b.n	8003f62 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	69da      	ldr	r2, [r3, #28]
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	bf0c      	ite	eq
 8003f52:	2301      	moveq	r3, #1
 8003f54:	2300      	movne	r3, #0
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	461a      	mov	r2, r3
 8003f5a:	79fb      	ldrb	r3, [r7, #7]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d091      	beq.n	8003e84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f80:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689a      	ldr	r2, [r3, #8]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 0201 	bic.w	r2, r2, #1
 8003f90:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d107      	bne.n	8003faa <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 0210 	bic.w	r2, r2, #16
 8003fa8:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2220      	movs	r2, #32
 8003fae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f7ff fd0a 	bl	8003a00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fec:	bf00      	nop
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800400a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2220      	movs	r2, #32
 8004010:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f7ff fce7 	bl	80039ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800401e:	bf00      	nop
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
	...

0800403c <__libc_init_array>:
 800403c:	b570      	push	{r4, r5, r6, lr}
 800403e:	4e0d      	ldr	r6, [pc, #52]	; (8004074 <__libc_init_array+0x38>)
 8004040:	4c0d      	ldr	r4, [pc, #52]	; (8004078 <__libc_init_array+0x3c>)
 8004042:	1ba4      	subs	r4, r4, r6
 8004044:	10a4      	asrs	r4, r4, #2
 8004046:	2500      	movs	r5, #0
 8004048:	42a5      	cmp	r5, r4
 800404a:	d109      	bne.n	8004060 <__libc_init_array+0x24>
 800404c:	4e0b      	ldr	r6, [pc, #44]	; (800407c <__libc_init_array+0x40>)
 800404e:	4c0c      	ldr	r4, [pc, #48]	; (8004080 <__libc_init_array+0x44>)
 8004050:	f000 f820 	bl	8004094 <_init>
 8004054:	1ba4      	subs	r4, r4, r6
 8004056:	10a4      	asrs	r4, r4, #2
 8004058:	2500      	movs	r5, #0
 800405a:	42a5      	cmp	r5, r4
 800405c:	d105      	bne.n	800406a <__libc_init_array+0x2e>
 800405e:	bd70      	pop	{r4, r5, r6, pc}
 8004060:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004064:	4798      	blx	r3
 8004066:	3501      	adds	r5, #1
 8004068:	e7ee      	b.n	8004048 <__libc_init_array+0xc>
 800406a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800406e:	4798      	blx	r3
 8004070:	3501      	adds	r5, #1
 8004072:	e7f2      	b.n	800405a <__libc_init_array+0x1e>
 8004074:	080040e4 	.word	0x080040e4
 8004078:	080040e4 	.word	0x080040e4
 800407c:	080040e4 	.word	0x080040e4
 8004080:	080040e8 	.word	0x080040e8

08004084 <memset>:
 8004084:	4402      	add	r2, r0
 8004086:	4603      	mov	r3, r0
 8004088:	4293      	cmp	r3, r2
 800408a:	d100      	bne.n	800408e <memset+0xa>
 800408c:	4770      	bx	lr
 800408e:	f803 1b01 	strb.w	r1, [r3], #1
 8004092:	e7f9      	b.n	8004088 <memset+0x4>

08004094 <_init>:
 8004094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004096:	bf00      	nop
 8004098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800409a:	bc08      	pop	{r3}
 800409c:	469e      	mov	lr, r3
 800409e:	4770      	bx	lr

080040a0 <_fini>:
 80040a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a2:	bf00      	nop
 80040a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040a6:	bc08      	pop	{r3}
 80040a8:	469e      	mov	lr, r3
 80040aa:	4770      	bx	lr
